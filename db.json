{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next-pisces/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/css/main.css","path":"css/main.css","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/default_avatar1.jpg","path":"images/default_avatar1.jpg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/myWechat.jpg","path":"images/myWechat.jpg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/default_avatar.jpg","path":"images/default_avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/wood.png","path":"images/wood.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/19-2.png","path":"images/article_img/19-2.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/19-3.png","path":"images/article_img/19-3.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/2.png","path":"images/article_img/2.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/3-1.png","path":"images/article_img/3-1.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/3-2.png","path":"images/article_img/3-2.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/3-3.png","path":"images/article_img/3-3.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/3-4.png","path":"images/article_img/3-4.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/3.png","path":"images/article_img/3.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/4.png","path":"images/article_img/4.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/5.png","path":"images/article_img/5.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-01.png","path":"images/article_img/cubic-bezier-01.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-03.png","path":"images/article_img/cubic-bezier-03.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-02.jpg","path":"images/article_img/cubic-bezier-02.jpg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-04.png","path":"images/article_img/cubic-bezier-04.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-05.png","path":"images/article_img/cubic-bezier-05.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-06.png","path":"images/article_img/cubic-bezier-06.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-07.png","path":"images/article_img/cubic-bezier-07.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-08.png","path":"images/article_img/cubic-bezier-08.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-09.png","path":"images/article_img/cubic-bezier-09.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/1.png","path":"images/article_img/1.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/hexo-next.jpg","path":"images/article_img/hexo-next.jpg","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/19-1.png","path":"images/article_img/19-1.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/new-1.png","path":"images/article_img/new-1.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/old-1.png","path":"images/article_img/old-1.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/new-2.png","path":"images/article_img/new-2.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/images/article_img/old-2.png","path":"images/article_img/old-2.png","modified":0,"renderable":1},{"_id":"themes/next-pisces/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"c4a6d430133ee1823a4a25acf874806f2b08bb98","modified":1463929000000},{"_id":"themes/next-pisces/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1463929000000},{"_id":"themes/next-pisces/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1463929000000},{"_id":"themes/next-pisces/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1463929000000},{"_id":"themes/next-pisces/.jshintrc","hash":"12c5e37da3432bee2219ed1c667076d54f1639c0","modified":1463929000000},{"_id":"themes/next-pisces/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1463929000000},{"_id":"themes/next-pisces/README.md","hash":"0b709591995001cd860384d6c189e51d91690714","modified":1463929000000},{"_id":"themes/next-pisces/_config.yml","hash":"405a58f7321a440b66bbf5305976588d6384f9ce","modified":1463936302000},{"_id":"themes/next-pisces/bower.json","hash":"20344ac0357be00a68b578ad4e7600eebe5a3c46","modified":1463929000000},{"_id":"source/_posts/article-1.md","hash":"655485e087307861c4df0f1a32288e8d2bf464e2","modified":1463929000000},{"_id":"source/_posts/article-10.md","hash":"5e1106389fe917b49585f7babd4debeabd0d95a4","modified":1463929000000},{"_id":"source/_posts/article-11.md","hash":"bb49f16376aa6b96d8238230f824a28abc6fd751","modified":1463929000000},{"_id":"source/_posts/article-12.md","hash":"b7cf0c79d48c9565e841698ee0f8bca5776352c1","modified":1463929000000},{"_id":"source/_posts/article-13.md","hash":"63789124935696d9b571635bfd3b7ce44c206c2b","modified":1463929000000},{"_id":"source/_posts/article-14.md","hash":"4be75a409ba91a6d5a359005452a5b1fefecc0f1","modified":1463929000000},{"_id":"source/_posts/article-16.md","hash":"844bed4fb6c7b5ba483904d375d9ee3f48f1e654","modified":1463929000000},{"_id":"source/_posts/article-15.md","hash":"398eb67b4750ae7d1eda36f624d09aabab09e0ae","modified":1463929000000},{"_id":"source/_posts/article-17.md","hash":"2596af59bca48a0b951ea8d9e164c6d3cbb1f9bb","modified":1463929000000},{"_id":"source/_posts/article-18.md","hash":"dfaf678f2582ac056e72d5e96dc6757188f7cd7e","modified":1463929000000},{"_id":"source/_posts/article-19.md","hash":"216f3adeb803b3a9ea510554a74f4a752ed2c300","modified":1463929000000},{"_id":"source/_posts/article-2.md","hash":"970b9adb061987f8561063d8f840041cc05732f6","modified":1463929000000},{"_id":"source/_posts/article-20.md","hash":"418c30f988cb1145b92e52abccce054d50af3f5a","modified":1463929000000},{"_id":"source/_posts/article-3.md","hash":"47bcd01961477649148451e31fea21ddd51ae651","modified":1463929000000},{"_id":"source/_posts/article-4.md","hash":"f7bbf0d98e2c18fdb83b60e0a437a725cd5a302e","modified":1463929000000},{"_id":"source/_posts/article-5.md","hash":"d2780971dd32ca9baa24fee4e497d7969b8d3826","modified":1463929000000},{"_id":"source/_posts/article-6.md","hash":"7843eb5b05b992da9b499575e9455c09a139b71c","modified":1463929000000},{"_id":"source/_posts/article-7.md","hash":"89993bc5fa031c64984f3923d347f4c154e44b5c","modified":1463929000000},{"_id":"source/_posts/article-8.md","hash":"606efeeb32b0fe3c8cc37857a38dcdc79f82c095","modified":1463929000000},{"_id":"source/_posts/article-9.md","hash":"5836de9ebaf69eff7b075e1a18a853295dbc5293","modified":1463929000000},{"_id":"source/about/index.md","hash":"55d996ddcdee98bc8d9365b4cbf39d5c7eafc8ef","modified":1463929000000},{"_id":"source/categories/index.md","hash":"249b125afdffc3b0ed90ba14a07d58f74e27ed01","modified":1463929000000},{"_id":"source/tags/index.md","hash":"75195b4d1c12be717794ed7ae784126672cbc2bb","modified":1463929000000},{"_id":"themes/next-pisces/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1463929000000},{"_id":"themes/next-pisces/languages/default.yml","hash":"e94becfd180f3fabdc57b208203142b35c968958","modified":1463929000000},{"_id":"themes/next-pisces/languages/en.yml","hash":"05d1dcd28762cdf15c3ca9c9772d0325925d096e","modified":1463929000000},{"_id":"themes/next-pisces/languages/fr-FR.yml","hash":"2d280c6a3479f0621339f89a5559e4a02bfab174","modified":1463929000000},{"_id":"themes/next-pisces/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1463929000000},{"_id":"themes/next-pisces/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1463929000000},{"_id":"themes/next-pisces/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1463929000000},{"_id":"themes/next-pisces/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1463929000000},{"_id":"themes/next-pisces/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1463929000000},{"_id":"themes/next-pisces/layout/_layout.swig","hash":"77e577a588c1c08bedaf3468b778488ec34ae7fb","modified":1463929000000},{"_id":"themes/next-pisces/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1463929000000},{"_id":"themes/next-pisces/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1463929000000},{"_id":"themes/next-pisces/layout/index.swig","hash":"38b1ad401b748965369296b86327d23082a1fe93","modified":1463929000000},{"_id":"themes/next-pisces/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1463929000000},{"_id":"themes/next-pisces/layout/post.swig","hash":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1463929000000},{"_id":"themes/next-pisces/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1463929000000},{"_id":"themes/next-pisces/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1463929000000},{"_id":"themes/next-pisces/source/404.html","hash":"f98817dbc3b85a415f82c2cfb715d3031b0cae64","modified":1463929000000},{"_id":"themes/next-pisces/source/favicon.ico","hash":"c4a6d430133ee1823a4a25acf874806f2b08bb98","modified":1463929000000},{"_id":"themes/next-pisces/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1463929000000},{"_id":"themes/next-pisces/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1463929000000},{"_id":"themes/next-pisces/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1463929000000},{"_id":"themes/next-pisces/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463929000000},{"_id":"themes/next-pisces/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1463929000000},{"_id":"themes/next-pisces/layout/_macro/post.swig","hash":"266cadea3355b92082923fe3483e065eff0ca0f2","modified":1463929000000},{"_id":"themes/next-pisces/layout/_macro/sidebar.swig","hash":"794797c1957dd708256a5368e38c62d510f2bd86","modified":1463929000000},{"_id":"themes/next-pisces/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1463929000000},{"_id":"themes/next-pisces/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1463929000000},{"_id":"themes/next-pisces/layout/_partials/footer.swig","hash":"6e52c34ed0df734fd5ef417ccde9f5ff59118a64","modified":1463929000000},{"_id":"themes/next-pisces/layout/_partials/head.swig","hash":"fe98b693ac69e54efe8da7c8145e9f272e80b8b0","modified":1463929000000},{"_id":"themes/next-pisces/layout/_partials/header.swig","hash":"4286af7fe6eeab974e52d704a28290e7c7ed5490","modified":1463929000000},{"_id":"themes/next-pisces/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1463929000000},{"_id":"themes/next-pisces/layout/_partials/search.swig","hash":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/vendors.swig","hash":"f12d7b0946d37853caa29009e6d134c2a378ad20","modified":1463929000000},{"_id":"themes/next-pisces/scripts/filters/sticky.js","hash":"6b1ea0c09105352813357d0fff4e1d3f4c821fa3","modified":1463929000000},{"_id":"themes/next-pisces/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1463929000000},{"_id":"themes/next-pisces/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1463929000000},{"_id":"themes/next-pisces/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1463929000000},{"_id":"themes/next-pisces/source/css/main.css","hash":"78b5adc4b02a1f4a60ba8d5c3b0d0ad93b172fb0","modified":1463929000000},{"_id":"themes/next-pisces/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1463929000000},{"_id":"themes/next-pisces/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1463929000000},{"_id":"themes/next-pisces/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1463929000000},{"_id":"themes/next-pisces/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1463929000000},{"_id":"themes/next-pisces/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1463929000000},{"_id":"themes/next-pisces/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1463929000000},{"_id":"themes/next-pisces/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1463929000000},{"_id":"themes/next-pisces/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1463929000000},{"_id":"themes/next-pisces/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1463929000000},{"_id":"themes/next-pisces/source/images/default_avatar1.jpg","hash":"75a8db991d27dd1c49ebb0358918775e2fa49e46","modified":1463929000000},{"_id":"themes/next-pisces/source/images/myWechat.jpg","hash":"52cb03e22d46d3cb1f2b251b7bdfc2807efc4790","modified":1463929000000},{"_id":"themes/next-pisces/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1463929000000},{"_id":"themes/next-pisces/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1463929000000},{"_id":"themes/next-pisces/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1463929000000},{"_id":"themes/next-pisces/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/bootstrap/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463929000000},{"_id":"themes/next-pisces/source/images/default_avatar.jpg","hash":"6e8b977f8859c891e429a72e69a39eabf2350558","modified":1463929000000},{"_id":"themes/next-pisces/source/images/wood.png","hash":"58f91533a0c6961df3c5288e405fd3d95573e7b6","modified":1463929000000},{"_id":"themes/next-pisces/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1463929000000},{"_id":"themes/next-pisces/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1463929000000},{"_id":"themes/next-pisces/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1463929000000},{"_id":"themes/next-pisces/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/pages/post-details.swig","hash":"47ef7a0b6d64b4ddf11c4dc0e8443857db1afd67","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/third-party/analytics.swig","hash":"33ca06b9bd9a15a19432d5396b85bd319f017319","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/third-party/baidushare.swig","hash":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/third-party/mathjax.swig","hash":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_mixins/Pisces.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_variables/Pisces.styl","hash":"e6488372eacb4c8acbda42ed366e27a6de7693d4","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_variables/base.styl","hash":"7a58dc46250372cb5f7a5e5a140ebbd7aca12341","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/19-2.png","hash":"c9ca1f67968c0a2aad6f42483a69d0e7e7e708f0","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/19-3.png","hash":"19c9978afe815d33b7c612e5c6595aa7dbf97893","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/2.png","hash":"de973d6c0a2d8229eacefcffd0774da7cbd4032c","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/3-1.png","hash":"6e34f5ac417d9e640719cafb8c95a9adbfba2316","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/3-2.png","hash":"8ebcdc9a0763c9bf273969cd399582c6ad52d48b","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/3-3.png","hash":"c62e70125731b0f0e37e56f5b97acbc0d6bdf228","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/3-4.png","hash":"f7cc0b947026f346c448d6d91bccee0ea02f3666","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/3.png","hash":"dff6320fd726c840eaa948bcd15c0d774aa9b00a","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/4.png","hash":"d0d462ba08be09775b8372071008a6b7b15c2e13","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/5.png","hash":"ae9ee880c074551dfc3fb537c8c47e4adbfe2a85","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-01.png","hash":"ed71cc7ff217bca9792b6dbad40a6ba57bfa6fd0","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-03.png","hash":"2a146677c5832acf80322e4394d71535c004c113","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-02.jpg","hash":"d968947b09aee9eaa96809188d635489914a75c5","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-04.png","hash":"9a3f1e722bdaccfe4ae493fb5ee2858c6894b1a3","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-05.png","hash":"79f987a1d7b58841c60d83a0188f38a5ad8ca5e4","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-06.png","hash":"cf425658e16ee6323a1f08d585c3c3594181585c","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-07.png","hash":"01261d228f3f202aea270455750afe3db37e9050","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-08.png","hash":"8dbc3983c8e798941be92d6c98785927550c5ed9","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/cubic-bezier-09.png","hash":"047c0299eb178b6426f5ff04637013e892210edb","modified":1463929000000},{"_id":"themes/next-pisces/source/js/src/affix.js","hash":"5e59af2dc67c21bf4e028f4378e709fc27c18d18","modified":1463929000000},{"_id":"themes/next-pisces/source/js/src/bootstrap.js","hash":"cb37fee8fc8f9fcdbe36a49e665bc4d13d0f8977","modified":1463929000000},{"_id":"themes/next-pisces/source/js/src/hook-duoshuo.js","hash":"1d4516b8784eebf036391d844793191ed6345a73","modified":1463929000000},{"_id":"themes/next-pisces/source/js/src/motion.js","hash":"25e1f87ceddb38070064c2a511718f16de3bc9e0","modified":1463929000000},{"_id":"themes/next-pisces/source/js/src/scrollspy.js","hash":"a7a7ec041e75e6d77f3b52c79d87e9a30a8aa0a7","modified":1463929000000},{"_id":"themes/next-pisces/source/js/src/utils.js","hash":"8d82b4f47cd9a91da1891bceea77c3710d8fc4d7","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"2d02926ed76683abf4882417bf7d7614e3a23fc2","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/velocity/velocity.min.js","hash":"21efaec73c5b391d46546bac0d9372356c5cad63","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/velocity/velocity.ui.min.js","hash":"a46f6b49fa16a699c95fd96b6330f844f976c1ed","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/1.png","hash":"154ccbf10368a0547d3bceebe0fbad692b570e05","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/hexo-next.jpg","hash":"8030a25159472f4a8a50fb3b26dd9377c002dd52","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/jquery/index.js","hash":"785f554fb74c79dc79b8b86c074a005f8f08a7e1","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1463929000000},{"_id":"themes/next-pisces/layout/_scripts/third-party/comments/duoshuo.swig","hash":"ea9c65ba403e50b9e3668fec3e95ace640a1fff0","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/scaffolding/helpers.styl","hash":"13926be6d39c76da54038978a6d6b83f0686466e","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/scaffolding/tables.styl","hash":"5f766cf26f966dbf9dcfe681f40ab9032e3e8a08","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/back-to-top.styl","hash":"8d9b0f37cf0cd1c25e36303041406a8c72caf766","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Mist/_base.styl","hash":"d50c2a9ae363d26ed2e9bc226a9dc7abeb9ace1b","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Mist/_header.styl","hash":"1631a430655eadb485574d1a9bedd49460988b11","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4a1c113d752cf97c8762d32da474542668d948ee","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Mist/_menu.styl","hash":"5a8036fc61207ca0fe38c9782ed2f686fbf764be","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Muse/_menu.styl","hash":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Muse/_search.styl","hash":"36d707098100abd1ded76a2d016d8c95691b2420","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Mist/index.styl","hash":"fc7d96b897290dbd93bc8c515a2058fc4c374ea7","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Muse/index.styl","hash":"159464cb8a7e01e32db9ec70dec391ec70a72f9c","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Pisces/_brand.styl","hash":"eb4f5a0ae12b67d5e9b24056ec5715d03deda856","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Pisces/_layout.styl","hash":"58a036397de73d868fee16f34d246a3d863f30c2","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Pisces/_menu.styl","hash":"dcbfef1c76288620f7f405a7aeba893d458d5b6a","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Pisces/_sidebar.styl","hash":"7f03d1cb6da4a35cbf35bfa6cbd55681287cd26d","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/19-1.png","hash":"912b861bc3b8c36f236f17e861ce2c1bd61a761f","modified":1463929000000},{"_id":"themes/next-pisces/source/js/src/schemes/pisces.js","hash":"eb0d40fcf91e5f11fb6bb72c25ee3525ad65a168","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/jquery.fancybox.css","hash":"3a0ed87d1c5a09b50a119da09484c0b915d78295","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"3e139a7e91be326939562ac5898a643bd073c7a3","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"04a4f4c55bf6a4e9657477915aee1ef8fac2bd56","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/header/menu.styl","hash":"8c4a1eccc2a67436bf74cdd56e19cc0930aa54ff","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/header/site-meta.styl","hash":"61763d236029d2a4414be499d0e65d7dfb34605b","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/pages/archive.styl","hash":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/pages/categories.styl","hash":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/highlight/theme.styl","hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/highlight/highlight.styl","hash":"6242be4307a3b3dafc14e556f51c8875c41a1ddd","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"6533563b34241e5c73da68156aba89e880b93f53","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/sidebar/sidebar.styl","hash":"1099b5d07a60d93dad6221677c60cba60a82266b","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/post/post-collapse.styl","hash":"fe71e9be08cb418cf68352fd6212ddd0d7150579","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/post/post-eof.styl","hash":"aa362eabaf1990616ce0311b4e408a697bacb8cb","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/post/post-expand.styl","hash":"d239bc5e565f4e3849bcb7a8d8c64215963b00e2","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/post/post-meta.styl","hash":"330a2ce52c5a5fefc1e85c473113a3bc58210c76","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/post/post-more-link.styl","hash":"5c415dc8efab7c1bdeffacafa3100d1da6628b03","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/post/post.styl","hash":"01db9373cd13c1aec840205c622064dd6ae03361","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/tags/group-pictures.styl","hash":"1ee40743000173495728855f734081eb2b6167cc","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/third-party/duoshuo.styl","hash":"a2c91b21f383bd62a1b75779db111e8f9b0ff397","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1463929000000},{"_id":"themes/next-pisces/source/css/_common/components/third-party/third-party.styl","hash":"c946b642bccc7a73c471bf6f119e40f54d0f1663","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/new-1.png","hash":"b5a7b2c8de27023a53ec75683b4c893cfeab9d86","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/old-1.png","hash":"1ca2cbecdd82c00baee7aafa28dff1139d619255","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/new-2.png","hash":"d4b6e8b0be3c75eb8d2e265c7f44abbd8ff20147","modified":1463929000000},{"_id":"themes/next-pisces/source/images/article_img/old-2.png","hash":"cfe65f72898911898a53d862344f72e921760766","modified":1463929000000},{"_id":"themes/next-pisces/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1463929000000},{"_id":"public/atom.xml","hash":"a3711886c1b2b0e32c9a982d39b550dbb15299f9","modified":1463935180846},{"_id":"public/about/index.html","hash":"29012d6433b65e274705c24f32a7dd68ae0524d3","modified":1463935180864},{"_id":"public/categories/index.html","hash":"3da4311dc23c11ac1c9fc320ab5e77b853e49365","modified":1463935180864},{"_id":"public/tags/index.html","hash":"3738e300e775d0419b27968633d7c014efd1327a","modified":1463935180864},{"_id":"public/2016/03/16/article-20/index.html","hash":"20523578b5091386d3fec98fba3581d3783b532c","modified":1463935180865},{"_id":"public/2016/03/03/article-19/index.html","hash":"05ce829504f7d37fb5d13d622384a780f958228b","modified":1463935180865},{"_id":"public/2016/01/26/article-18/index.html","hash":"c20a9a712a08d218e969a795c2998c5c5c78fb1b","modified":1463935180865},{"_id":"public/2016/01/21/article-17/index.html","hash":"5c40fe8475d75ec853f899e455777438147ed1be","modified":1463935180865},{"_id":"public/2015/12/24/article-16/index.html","hash":"13ed81742d95af16bf214081f8edd7287e630fe6","modified":1463935180865},{"_id":"public/2015/12/22/article-15/index.html","hash":"38115d379724ff2e891d83ade1352d89c286a695","modified":1463935180865},{"_id":"public/2015/12/15/article-14/index.html","hash":"a4c9226b546e5d1202031d40d0c075c60d5c9785","modified":1463935180865},{"_id":"public/2015/12/07/article-13/index.html","hash":"6880272107bca8e8af4fde4e2c6e5b972361f8a4","modified":1463935180865},{"_id":"public/2015/12/04/article-12/index.html","hash":"4bb22054ef06894c8cad7bdd1122a114e11fe2cd","modified":1463935180865},{"_id":"public/2015/12/01/article-11/index.html","hash":"cc3bbb23076edc5af0fe7a27a24941ccf4fd4817","modified":1463935180865},{"_id":"public/2015/11/17/article-10/index.html","hash":"cc9ec6fa576e6680e72ee7e683350d1f974fe01a","modified":1463935180865},{"_id":"public/2015/11/04/article-9/index.html","hash":"4f7a32c1d0538b1ffef8cf2b3438e9f3fa29a829","modified":1463935180865},{"_id":"public/2015/10/16/article-8/index.html","hash":"34b9c1d784e0ad707dee89fc5f1b1433cc9f9988","modified":1463935180865},{"_id":"public/2015/10/06/article-7/index.html","hash":"9d514644ee38a03521181d6fff90bcffac22239e","modified":1463935180865},{"_id":"public/2015/09/18/article-6/index.html","hash":"d92f17a8c5294c9ec3205d7939c00879e9959ca1","modified":1463935180866},{"_id":"public/2015/09/17/article-5/index.html","hash":"77ba6be5da82e8d110de64f1c9365c4171926c79","modified":1463935180866},{"_id":"public/2015/09/08/article-4/index.html","hash":"ceb889ce72fad00314aae90b7298a2c6d3e20fa2","modified":1463935180866},{"_id":"public/2015/09/07/article-3/index.html","hash":"5013e6bec427c7c4ce73fdd4fdd1aff611b22960","modified":1463935180866},{"_id":"public/2015/09/07/article-2/index.html","hash":"65e1231bc3363b666d2eb4fa318e533dba1927f1","modified":1463935180866},{"_id":"public/2015/09/07/article-1/index.html","hash":"2e46dd52b89409c53813c94a82f0e755fd3b8e89","modified":1463935180866},{"_id":"public/archives/index.html","hash":"0361c39d797a6fd3eb04defc2bbe6ed3e1935f6b","modified":1463935180866},{"_id":"public/archives/page/2/index.html","hash":"7870e01cd06cf944093705ca2c0de22ce8b87045","modified":1463935180866},{"_id":"public/archives/page/3/index.html","hash":"9ec4a5de9ef427da10d0d95f7e127e0beb7eb013","modified":1463935180866},{"_id":"public/archives/page/4/index.html","hash":"25e7490ae864b7952d784f4b1012c85f3e711eca","modified":1463935180866},{"_id":"public/archives/page/5/index.html","hash":"a5b1052d7df0536814bc527a0772659e0f373321","modified":1463935180866},{"_id":"public/archives/2015/index.html","hash":"b3f008a8edaf86a9252613fef602de025754546e","modified":1463935180866},{"_id":"public/archives/2015/page/2/index.html","hash":"6c7eee8d1e462010524334663272b874039edfd8","modified":1463935180866},{"_id":"public/archives/2015/page/3/index.html","hash":"791402015b67639a2a0ba52702b469ecc4f980f4","modified":1463935180866},{"_id":"public/archives/2015/page/4/index.html","hash":"12ad6e69a548d30ce3b05620c19faf1cfb82578d","modified":1463935180866},{"_id":"public/archives/2015/09/index.html","hash":"0528289afefd3b69177f49af1c29746b999986a8","modified":1463935180866},{"_id":"public/archives/2015/09/page/2/index.html","hash":"0b72ef9a56b573f28b188a9ae0d00b105f1156f1","modified":1463935180866},{"_id":"public/archives/2015/10/index.html","hash":"162cece7439c65614f01dc1d32300f1c3e55e778","modified":1463935180866},{"_id":"public/archives/2015/11/index.html","hash":"33bd6ffd5b4e32cc37f9d4feab55f413bf600b76","modified":1463935180866},{"_id":"public/archives/2015/12/index.html","hash":"79d1d25c623cc9fe05e19f360870c8020ee6d425","modified":1463935180866},{"_id":"public/archives/2015/12/page/2/index.html","hash":"4ea5f03bdd9b7ccf282003f535d42232f0a26287","modified":1463935180866},{"_id":"public/archives/2016/index.html","hash":"4472be2adda241fd4bb4eb260509ea49dc8611de","modified":1463935180866},{"_id":"public/archives/2016/01/index.html","hash":"9d45306c5d63ced8a5113305aafe03486c32f4ef","modified":1463935180866},{"_id":"public/archives/2016/03/index.html","hash":"c5d8d81c5c3973609e1d539517b1661fa2753c41","modified":1463935180866},{"_id":"public/categories/Git/index.html","hash":"cbe6821e4b0a8cdc996f63c82ddbfbb894c351d3","modified":1463935180866},{"_id":"public/categories/好文分享/index.html","hash":"d909a289dc29816edbc063977edaafd95164cbc0","modified":1463935180866},{"_id":"public/categories/好文分享/page/2/index.html","hash":"acf750d4b3b82de1a3e50435937d265c12373b6c","modified":1463935180867},{"_id":"public/categories/杂谈/index.html","hash":"a55c8b6e2df80f134eb0e891d20be3a66a326344","modified":1463935180867},{"_id":"public/categories/React/index.html","hash":"7dcf3aea8b020ff64eeed4994949f4ab26a2dfa2","modified":1463935180867},{"_id":"public/categories/笔记随笔/index.html","hash":"3e6687289f8cd768fd1939f3c2fbd4ba333c5577","modified":1463935180867},{"_id":"public/categories/笔记随笔/page/2/index.html","hash":"2b3c082a1b1ecc78c6f497da187e68eaeef2c569","modified":1463935180867},{"_id":"public/categories/开发日常/index.html","hash":"afed580cf4bb81c49832bf4c7f6f598b5b55b28d","modified":1463935180867},{"_id":"public/index.html","hash":"b610e5ccd8b78179b3d51c8766d679ae85eece0d","modified":1463935180867},{"_id":"public/page/2/index.html","hash":"8830144b614d4024265c0f5fa5a0a93f8ed1a005","modified":1463935180867},{"_id":"public/page/3/index.html","hash":"4e4c745754f3b72e954df4737132e40dbd3567ea","modified":1463935180867},{"_id":"public/page/4/index.html","hash":"74bda5d4a43589c098f6ff892fa34e1f57fbea70","modified":1463935180867},{"_id":"public/page/5/index.html","hash":"c2d8276754659d0f638c4dce8ec2189078fa2ac5","modified":1463935180867},{"_id":"public/tags/git/index.html","hash":"1c7ecc5873de16a7595125aaeb20fb9a0b6a4358","modified":1463935180867},{"_id":"public/tags/项目管理/index.html","hash":"5e19159c3a453e08e11713e23a7446e51f4ae975","modified":1463935180867},{"_id":"public/tags/译文/index.html","hash":"644624a6098b7b1fac273fe7e7aadd91c1dd46f4","modified":1463935180867},{"_id":"public/tags/译文/page/2/index.html","hash":"c487e7c9af3a11206ac1cf1f0cad11a60d9b44c7","modified":1463935180867},{"_id":"public/tags/Web-Dedign/index.html","hash":"10593ae11db935e1dcc13ee5e69d4cc1b8aaf790","modified":1463935180867},{"_id":"public/tags/Web-Development/index.html","hash":"a182d7e7a9ed5765e30fc118405852b32116639c","modified":1463935180867},{"_id":"public/tags/Websites/index.html","hash":"945e8fe66827d9152bb88490dfd8ad05f6f02e22","modified":1463935180868},{"_id":"public/tags/Chrome-Extensions/index.html","hash":"497b291296619dbbc9f54d6c5e3e89e6b6cf5c56","modified":1463935180868},{"_id":"public/tags/Web-Designers/index.html","hash":"e87cf502c7054f1a475809030391c59bfc68b947","modified":1463935180868},{"_id":"public/tags/Developers/index.html","hash":"b7a91f20972631d60ca969001a2cf11c7c9b1c28","modified":1463935180868},{"_id":"public/tags/blog/index.html","hash":"9a1f2c95f55c06ffc1acc7c27c519d96a303ff5c","modified":1463935180868},{"_id":"public/tags/next/index.html","hash":"14667c7248928d55aecbf7ed7fdf1793c725c283","modified":1463935180868},{"_id":"public/tags/hexo/index.html","hash":"9c121e31918a35caf02d57f8092bd6515d63b6cb","modified":1463935180868},{"_id":"public/tags/pisces/index.html","hash":"7ba20adf686b8654a6e4469df725334933a115df","modified":1463935180868},{"_id":"public/tags/ReactJS/index.html","hash":"82d99f6486596a47beeb1bccd54a10773c36a733","modified":1463935180868},{"_id":"public/tags/教程/index.html","hash":"2e6ccf516013a01697df0cd5e83e33c81615837f","modified":1463935180868},{"_id":"public/tags/Tutorials/index.html","hash":"80bf5af89f159e8b1f42881988d9e8c15cfa0344","modified":1463935180868},{"_id":"public/tags/getting-started-lesson/index.html","hash":"9c9cf9e230686be571cf44ece75b9e7dde83790b","modified":1463935180868},{"_id":"public/tags/React/index.html","hash":"a251d833551a89dd5a89d2a3839ae6f1f8d1d1c1","modified":1463935180868},{"_id":"public/tags/JavaScript/index.html","hash":"ffb13f7c043f9469aeeced0dadbe0434cdc5d826","modified":1463935180868},{"_id":"public/tags/button/index.html","hash":"ac986c95e49775fc5ae7f365d887bfb63e0a41a8","modified":1463935180868},{"_id":"public/tags/interactive/index.html","hash":"37f3da691d80dc74707b732edb10a4d7c16a1fd6","modified":1463935180868},{"_id":"public/tags/web/index.html","hash":"37977b40f94356d8fa409ee5a012cf7519af8ef1","modified":1463935180868},{"_id":"public/tags/css/index.html","hash":"66834c414a3d88a5f025fc33e127dedbe221866c","modified":1463935180868},{"_id":"public/tags/features/index.html","hash":"3ab932cbabd21a3ec891c76a8486442595f651c2","modified":1463935180868},{"_id":"public/tags/front-end/index.html","hash":"75b63ffe54ff4986ac71ca7a203fe11f4cf7ba0c","modified":1463935180868},{"_id":"public/tags/Tutorial/index.html","hash":"ea550f65d4a57e68af733567b2ecad5982884003","modified":1463935180868},{"_id":"public/tags/Testing/index.html","hash":"69ab6d4b6835849de22814fa7efcf694320b038c","modified":1463935180868},{"_id":"public/tags/入门/index.html","hash":"5d284e8def49aa37cd6cabab282f4ba3ca57760e","modified":1463935180868},{"_id":"public/tags/实践/index.html","hash":"f0d5fcc5e1b7e8b3e4aab233745f841132ecf11d","modified":1463935180869},{"_id":"public/tags/Hexo/index.html","hash":"7b01637b2129d2c77997a4056038611d7611e72b","modified":1463935180869},{"_id":"public/tags/NexT/index.html","hash":"4c0be4fbf5f645e0158cc00cc668c2125c02ca81","modified":1463935180869},{"_id":"public/tags/github/index.html","hash":"f0c5fd740570903c9c5644eb2db6388521fe3223","modified":1463935180869},{"_id":"public/tags/博客/index.html","hash":"412c0039c43ff67a68f288490c600a556bf2fa11","modified":1463935180869},{"_id":"public/tags/SSH/index.html","hash":"f86d4ecb2a1fc86470cc4df281c2f4bf7cf378be","modified":1463935180869},{"_id":"public/tags/加密/index.html","hash":"99f2db2ebcceba23db20600e73ab3439f56d3ebd","modified":1463935180869},{"_id":"public/tags/cubic-bezier/index.html","hash":"7ffdb4428bf912c26f4b96f73dd6aaa82236e72e","modified":1463935180869},{"_id":"public/tags/animation/index.html","hash":"4c71ded3e4076efbc26d05fcb416c3c180e72cc4","modified":1463935180869},{"_id":"public/tags/Brunch/index.html","hash":"a4bedbe2552d0bd9d54a266b446770c3e0284789","modified":1463935180869},{"_id":"public/tags/构建工具/index.html","hash":"2ca722415bb38b68aaf113e3cc8d38fc3cc993a0","modified":1463935180869},{"_id":"public/tags/npm/index.html","hash":"8318f6ebfab08122ce989a75477671cada4b94b5","modified":1463935180869},{"_id":"public/tags/module/index.html","hash":"c6e17d64de5cbccbbb213d26c79135eda2912a17","modified":1463935180869},{"_id":"public/tags/nodejs/index.html","hash":"7ffbd52fd2db9e8cd7592ea150dbf6dc470114c9","modified":1463935180869},{"_id":"public/tags/Git/index.html","hash":"1dcd2764b3ace9ad1d88fae4489c07911e192891","modified":1463935180870},{"_id":"public/tags/ECharts/index.html","hash":"762ea7b6d2b33a33d06d093c1e0fb480ccb82817","modified":1463935180870},{"_id":"public/tags/js/index.html","hash":"02e659c66a36a137298e2e56ab66e45926673490","modified":1463935180870},{"_id":"public/tags/reset/index.html","hash":"875ec0d654feee006d511f677bc161ffe597f1c3","modified":1463935180870},{"_id":"public/tags/rebase/index.html","hash":"44b8b303688b2a2b65985137bd1c12d9b5919689","modified":1463935180870},{"_id":"public/favicon.ico","hash":"c4a6d430133ee1823a4a25acf874806f2b08bb98","modified":1463935180883},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1463935180883},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1463935180883},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1463935180883},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1463935180883},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1463935180883},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1463935180883},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1463935180883},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1463935180883},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1463935180883},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1463935180883},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1463935180883},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1463935180883},{"_id":"public/images/default_avatar1.jpg","hash":"75a8db991d27dd1c49ebb0358918775e2fa49e46","modified":1463935180883},{"_id":"public/images/myWechat.jpg","hash":"52cb03e22d46d3cb1f2b251b7bdfc2807efc4790","modified":1463935180883},{"_id":"public/images/article_img/19-2.png","hash":"c9ca1f67968c0a2aad6f42483a69d0e7e7e708f0","modified":1463935180883},{"_id":"public/images/article_img/19-3.png","hash":"19c9978afe815d33b7c612e5c6595aa7dbf97893","modified":1463935180883},{"_id":"public/images/article_img/2.png","hash":"de973d6c0a2d8229eacefcffd0774da7cbd4032c","modified":1463935180883},{"_id":"public/images/article_img/3-1.png","hash":"6e34f5ac417d9e640719cafb8c95a9adbfba2316","modified":1463935180883},{"_id":"public/images/article_img/3-2.png","hash":"8ebcdc9a0763c9bf273969cd399582c6ad52d48b","modified":1463935180883},{"_id":"public/images/article_img/3-3.png","hash":"c62e70125731b0f0e37e56f5b97acbc0d6bdf228","modified":1463935180884},{"_id":"public/images/article_img/3-4.png","hash":"f7cc0b947026f346c448d6d91bccee0ea02f3666","modified":1463935180884},{"_id":"public/images/article_img/3.png","hash":"dff6320fd726c840eaa948bcd15c0d774aa9b00a","modified":1463935180884},{"_id":"public/images/article_img/4.png","hash":"d0d462ba08be09775b8372071008a6b7b15c2e13","modified":1463935180884},{"_id":"public/images/article_img/5.png","hash":"ae9ee880c074551dfc3fb537c8c47e4adbfe2a85","modified":1463935180884},{"_id":"public/images/article_img/cubic-bezier-01.png","hash":"ed71cc7ff217bca9792b6dbad40a6ba57bfa6fd0","modified":1463935180884},{"_id":"public/images/article_img/cubic-bezier-03.png","hash":"2a146677c5832acf80322e4394d71535c004c113","modified":1463935180884},{"_id":"public/images/article_img/cubic-bezier-02.jpg","hash":"d968947b09aee9eaa96809188d635489914a75c5","modified":1463935180884},{"_id":"public/images/article_img/cubic-bezier-04.png","hash":"9a3f1e722bdaccfe4ae493fb5ee2858c6894b1a3","modified":1463935180884},{"_id":"public/images/article_img/cubic-bezier-05.png","hash":"79f987a1d7b58841c60d83a0188f38a5ad8ca5e4","modified":1463935180884},{"_id":"public/images/article_img/cubic-bezier-06.png","hash":"cf425658e16ee6323a1f08d585c3c3594181585c","modified":1463935180886},{"_id":"public/images/article_img/cubic-bezier-07.png","hash":"01261d228f3f202aea270455750afe3db37e9050","modified":1463935180886},{"_id":"public/images/article_img/cubic-bezier-08.png","hash":"8dbc3983c8e798941be92d6c98785927550c5ed9","modified":1463935180886},{"_id":"public/images/article_img/cubic-bezier-09.png","hash":"047c0299eb178b6426f5ff04637013e892210edb","modified":1463935180886},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1463935180886},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1463935180886},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1463935180886},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1463935180886},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1463935180887},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1463935180887},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1463935180887},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1463935180887},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1463935180887},{"_id":"public/images/wood.png","hash":"58f91533a0c6961df3c5288e405fd3d95573e7b6","modified":1463935182297},{"_id":"public/images/default_avatar.jpg","hash":"6e8b977f8859c891e429a72e69a39eabf2350558","modified":1463935182298},{"_id":"public/images/article_img/1.png","hash":"154ccbf10368a0547d3bceebe0fbad692b570e05","modified":1463935182300},{"_id":"public/images/article_img/hexo-next.jpg","hash":"8030a25159472f4a8a50fb3b26dd9377c002dd52","modified":1463935182300},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1463935182300},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1463935182300},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1463935182300},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1463935182300},{"_id":"public/404.html","hash":"f98817dbc3b85a415f82c2cfb715d3031b0cae64","modified":1463935182311},{"_id":"public/js/src/affix.js","hash":"5e59af2dc67c21bf4e028f4378e709fc27c18d18","modified":1463935182311},{"_id":"public/js/src/bootstrap.js","hash":"cb37fee8fc8f9fcdbe36a49e665bc4d13d0f8977","modified":1463935182311},{"_id":"public/js/src/hook-duoshuo.js","hash":"1d4516b8784eebf036391d844793191ed6345a73","modified":1463935182311},{"_id":"public/js/src/motion.js","hash":"25e1f87ceddb38070064c2a511718f16de3bc9e0","modified":1463935182312},{"_id":"public/js/src/scrollspy.js","hash":"a7a7ec041e75e6d77f3b52c79d87e9a30a8aa0a7","modified":1463935182312},{"_id":"public/js/src/utils.js","hash":"8d82b4f47cd9a91da1891bceea77c3710d8fc4d7","modified":1463935182312},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1463935182312},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1463935182312},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1463935182312},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1463935182312},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1463935182312},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"2d02926ed76683abf4882417bf7d7614e3a23fc2","modified":1463935182312},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1463935182312},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1463935182312},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"a46f6b49fa16a699c95fd96b6330f844f976c1ed","modified":1463935182312},{"_id":"public/js/src/schemes/pisces.js","hash":"eb0d40fcf91e5f11fb6bb72c25ee3525ad65a168","modified":1463935182312},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"3a0ed87d1c5a09b50a119da09484c0b915d78295","modified":1463935182312},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1463935182312},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"04a4f4c55bf6a4e9657477915aee1ef8fac2bd56","modified":1463935182312},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1463935182312},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1463935182312},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1463935182312},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1463935182313},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1463935182313},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1463935182313},{"_id":"public/css/main.css","hash":"39a55bada2acf8f5728b57e728f9f8ba069ec160","modified":1463935182313},{"_id":"public/vendors/velocity/velocity.min.js","hash":"21efaec73c5b391d46546bac0d9372356c5cad63","modified":1463935182313},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1463935182313},{"_id":"public/vendors/jquery/index.js","hash":"785f554fb74c79dc79b8b86c074a005f8f08a7e1","modified":1463935182313},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"3e139a7e91be326939562ac5898a643bd073c7a3","modified":1463935182313},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1463935182313},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1463935182313},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1463935182313},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1463935182313},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1463935182313},{"_id":"public/images/article_img/19-1.png","hash":"912b861bc3b8c36f236f17e861ce2c1bd61a761f","modified":1463935182313},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1463935182313},{"_id":"public/images/article_img/new-1.png","hash":"b5a7b2c8de27023a53ec75683b4c893cfeab9d86","modified":1463935182328},{"_id":"public/images/article_img/old-1.png","hash":"1ca2cbecdd82c00baee7aafa28dff1139d619255","modified":1463935182336},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1463935182336},{"_id":"public/images/article_img/new-2.png","hash":"d4b6e8b0be3c75eb8d2e265c7f44abbd8ff20147","modified":1463935182355},{"_id":"public/images/article_img/old-2.png","hash":"cfe65f72898911898a53d862344f72e921760766","modified":1463935182355}],"Category":[{"name":"Git","_id":"cioit7em10005wnprwffb7cd3"},{"name":"好文分享","_id":"cioit7em8000awnprb2hroiu5"},{"name":"杂谈","_id":"cioit7emp000lwnprfidtfllt"},{"name":"React","_id":"cioit7emz000xwnprh4tfbeix"},{"name":"笔记随笔","_id":"cioit7en60015wnpra1esvmgp"},{"name":"开发日常","_id":"cioit7enm001uwnprla3k4p6k"}],"Data":[],"Page":[{"title":"关于","_content":"# 关于我\n爱生活，爱编程，Github 死忠（欢迎 [Follow](https://github.com/jovey-zheng) 和 Star）\n前端工程师，目标全栈！目前就职于 [ERS](http://www.ersinfotech.com/simp/index.html)，位置珠海\n喜欢简洁的代码，扁平的设计，酷炫的动画... XD\n喜欢篮球、羽毛球、跑步、健身等运动~~（有想法可以约喔 (╭￣3￣)╭）~~\n...\n\n# 关于文章\n平时开发过程中的一些感悟和想法，皆为拙见\n如果有任何意见或建议可以评论或 <a href=\"mailto:jovey.zheng@gmail.com\">发邮件</a> 给我\n\n# 联系方式\n * EMail： ** jovey.zheng@gmail.com **\n * QQ： ** 164043845 （记得备注） **\n","source":"about/index.md","raw":"title: 关于\n---\n# 关于我\n爱生活，爱编程，Github 死忠（欢迎 [Follow](https://github.com/jovey-zheng) 和 Star）\n前端工程师，目标全栈！目前就职于 [ERS](http://www.ersinfotech.com/simp/index.html)，位置珠海\n喜欢简洁的代码，扁平的设计，酷炫的动画... XD\n喜欢篮球、羽毛球、跑步、健身等运动~~（有想法可以约喔 (╭￣3￣)╭）~~\n...\n\n# 关于文章\n平时开发过程中的一些感悟和想法，皆为拙见\n如果有任何意见或建议可以评论或 <a href=\"mailto:jovey.zheng@gmail.com\">发邮件</a> 给我\n\n# 联系方式\n * EMail： ** jovey.zheng@gmail.com **\n * QQ： ** 164043845 （记得备注） **\n","date":"2016-05-22T15:33:08.000Z","updated":"2016-05-22T14:56:40.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cioit7elu0001wnprmkl7nshn","content":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>爱生活，爱编程，Github 死忠（欢迎 <a href=\"https://github.com/jovey-zheng\" target=\"_blank\" rel=\"external\">Follow</a> 和 Star）<br>前端工程师，目标全栈！目前就职于 <a href=\"http://www.ersinfotech.com/simp/index.html\" target=\"_blank\" rel=\"external\">ERS</a>，位置珠海<br>喜欢简洁的代码，扁平的设计，酷炫的动画… XD<br>喜欢篮球、羽毛球、跑步、健身等运动<del>（有想法可以约喔 (╭￣3￣)╭）</del><br>…</p>\n<h1 id=\"关于文章\"><a href=\"#关于文章\" class=\"headerlink\" title=\"关于文章\"></a>关于文章</h1><p>平时开发过程中的一些感悟和想法，皆为拙见<br>如果有任何意见或建议可以评论或 <a href=\"mailto:jovey.zheng@gmail.com\" target=\"_blank\" rel=\"external\">发邮件</a> 给我</p>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>EMail： <strong> jovey.zheng@gmail.com </strong></li>\n<li>QQ： <strong> 164043845 （记得备注） </strong></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>爱生活，爱编程，Github 死忠（欢迎 <a href=\"https://github.com/jovey-zheng\">Follow</a> 和 Star）<br>前端工程师，目标全栈！目前就职于 <a href=\"http://www.ersinfotech.com/simp/index.html\">ERS</a>，位置珠海<br>喜欢简洁的代码，扁平的设计，酷炫的动画… XD<br>喜欢篮球、羽毛球、跑步、健身等运动<del>（有想法可以约喔 (╭￣3￣)╭）</del><br>…</p>\n<h1 id=\"关于文章\"><a href=\"#关于文章\" class=\"headerlink\" title=\"关于文章\"></a>关于文章</h1><p>平时开发过程中的一些感悟和想法，皆为拙见<br>如果有任何意见或建议可以评论或 <a href=\"mailto:jovey.zheng@gmail.com\">发邮件</a> 给我</p>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>EMail： <strong> jovey.zheng@gmail.com </strong></li>\n<li>QQ： <strong> 164043845 （记得备注） </strong></li>\n</ul>\n"},{"title":"分类","date":"2015-09-16T07:23:03.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: 分类\ndate: 2015-09-16 15:23:03\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-05-22T14:56:40.000Z","path":"categories/index.html","layout":"page","_id":"cioit7ely0003wnprlc9k5v10","content":"","excerpt":"","more":""},{"title":"标签","date":"2015-09-16T07:24:37.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: 标签\ndate: 2015-09-16 15:24:37\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-05-22T14:56:40.000Z","path":"tags/index.html","layout":"page","_id":"cioit7erd0051wnprsx00miar","content":"","excerpt":"","more":""}],"Post":[{"title":"使用Git管理项目-起步","date":"2015-09-07T04:06:21.000Z","_content":"# 关于版本控制\n提到版本控制，那么我会想到的是SVN以及这里要说的Git。那什么是版本控制呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。\n\n# Git基础-三种状态\nGit 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。\n\n![工作目录、暂存区域和Git仓库](/blog/images/article_img/1.png)\n\nGit 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。\n\n工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。\n\n暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作“索引”，不过一般说法还是叫暂存区域。\n<!-- more -->\n\n基本的 Git 工作流程如下：\n```\n1.在工作目录中修改文件。\n\n2.暂存文件，将文件的快照放入暂存区域。\n\n3.提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。\n```\n如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。\n\n# 如何安装Git\n\n> **Mac**: brew install git\n\n> **Linux(Debian)** : apt-get install git-core\n\n> **Linux(Fedora)** : yum install git-core\n\n> **Windows** : 下载安装 [Git](http://git-scm.com)\n\n配置\n```\n$ git config --global user.name \"your name\"\n```\n```\n$ git config --global user.email \"youremail@email.com\"\n```\n使用 `--global` 可以使该命令只执行一次。\n\n你可以通过如下的命令来查看你的配置信息：\n```\n$ git config --list\n\nuser.email=joveyzheng@qq.com\n\nuser.name=joveyzheng\n\ncolor.status=auto\n\n...\n```\n你可以通过输入 `$ git config <key> ` 来查看某一项的配置\n```\n$ git config user.name\n\njoveyzheng\n```\n# 获取帮助\n```\n$ git help\n```\n\n\n文中多处借鉴《Git pro》，想获得更多了解推荐阅读： [Git Pro](http://git-scm.com/book/zh/v2)","source":"_posts/article-1.md","raw":"title: 使用Git管理项目-起步\ndate: 2015.09.07 12:06:21\ncategories:\n\t- Git\ntags:\n\t- git\n\t- 项目管理\n---\n# 关于版本控制\n提到版本控制，那么我会想到的是SVN以及这里要说的Git。那什么是版本控制呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。\n\n# Git基础-三种状态\nGit 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。\n\n![工作目录、暂存区域和Git仓库](/blog/images/article_img/1.png)\n\nGit 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。\n\n工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。\n\n暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作“索引”，不过一般说法还是叫暂存区域。\n<!-- more -->\n\n基本的 Git 工作流程如下：\n```\n1.在工作目录中修改文件。\n\n2.暂存文件，将文件的快照放入暂存区域。\n\n3.提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。\n```\n如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。\n\n# 如何安装Git\n\n> **Mac**: brew install git\n\n> **Linux(Debian)** : apt-get install git-core\n\n> **Linux(Fedora)** : yum install git-core\n\n> **Windows** : 下载安装 [Git](http://git-scm.com)\n\n配置\n```\n$ git config --global user.name \"your name\"\n```\n```\n$ git config --global user.email \"youremail@email.com\"\n```\n使用 `--global` 可以使该命令只执行一次。\n\n你可以通过如下的命令来查看你的配置信息：\n```\n$ git config --list\n\nuser.email=joveyzheng@qq.com\n\nuser.name=joveyzheng\n\ncolor.status=auto\n\n...\n```\n你可以通过输入 `$ git config <key> ` 来查看某一项的配置\n```\n$ git config user.name\n\njoveyzheng\n```\n# 获取帮助\n```\n$ git help\n```\n\n\n文中多处借鉴《Git pro》，想获得更多了解推荐阅读： [Git Pro](http://git-scm.com/book/zh/v2)","slug":"article-1","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7elp0000wnprgausj2so","content":"<h1 id=\"关于版本控制\"><a href=\"#关于版本控制\" class=\"headerlink\" title=\"关于版本控制\"></a>关于版本控制</h1><p>提到版本控制，那么我会想到的是SVN以及这里要说的Git。那什么是版本控制呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p>\n<h1 id=\"Git基础-三种状态\"><a href=\"#Git基础-三种状态\" class=\"headerlink\" title=\"Git基础-三种状态\"></a>Git基础-三种状态</h1><p>Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。</p>\n<p><img src=\"/blog/images/article_img/1.png\" alt=\"工作目录、暂存区域和Git仓库\"></p>\n<p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</p>\n<p>工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p>\n<p>暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作“索引”，不过一般说法还是叫暂存区域。<br><a id=\"more\"></a></p>\n<p>基本的 Git 工作流程如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.在工作目录中修改文件。</span><br><span class=\"line\"></span><br><span class=\"line\">2.暂存文件，将文件的快照放入暂存区域。</span><br><span class=\"line\"></span><br><span class=\"line\">3.提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</span><br></pre></td></tr></table></figure></p>\n<p>如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。</p>\n<h1 id=\"如何安装Git\"><a href=\"#如何安装Git\" class=\"headerlink\" title=\"如何安装Git\"></a>如何安装Git</h1><blockquote>\n<p><strong>Mac</strong>: brew install git</p>\n<p><strong>Linux(Debian)</strong> : apt-get install git-core</p>\n<p><strong>Linux(Fedora)</strong> : yum install git-core</p>\n<p><strong>Windows</strong> : 下载安装 <a href=\"http://git-scm.com\" target=\"_blank\" rel=\"external\">Git</a></p>\n</blockquote>\n<p>配置<br><figure class=\"highlight smalltalk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$ </span>git config --global user.name <span class=\"comment\">\"your name\"</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"youremail@email.com\"</span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>--global</code> 可以使该命令只执行一次。</p>\n<p>你可以通过如下的命令来查看你的配置信息：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">config</span> --list</span><br><span class=\"line\"></span><br><span class=\"line\">user.email=<span class=\"keyword\">joveyzheng@qq.com</span><br><span class=\"line\"></span></span><br><span class=\"line\">user.name=<span class=\"keyword\">joveyzheng</span><br><span class=\"line\"></span></span><br><span class=\"line\">color.status=auto</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>你可以通过输入 <code>$ git config &lt;key&gt;</code> 来查看某一项的配置<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config user<span class=\"selector-class\">.name</span></span><br><span class=\"line\"></span><br><span class=\"line\">joveyzheng</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"获取帮助\"><a href=\"#获取帮助\" class=\"headerlink\" title=\"获取帮助\"></a>获取帮助</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n<p>文中多处借鉴《Git pro》，想获得更多了解推荐阅读： <a href=\"http://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">Git Pro</a></p>\n","excerpt":"<h1 id=\"关于版本控制\"><a href=\"#关于版本控制\" class=\"headerlink\" title=\"关于版本控制\"></a>关于版本控制</h1><p>提到版本控制，那么我会想到的是SVN以及这里要说的Git。那什么是版本控制呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p>\n<h1 id=\"Git基础-三种状态\"><a href=\"#Git基础-三种状态\" class=\"headerlink\" title=\"Git基础-三种状态\"></a>Git基础-三种状态</h1><p>Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。</p>\n<p><img src=\"/blog/images/article_img/1.png\" alt=\"工作目录、暂存区域和Git仓库\"></p>\n<p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</p>\n<p>工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p>\n<p>暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作“索引”，不过一般说法还是叫暂存区域。<br>","more":"</p>\n<p>基本的 Git 工作流程如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.在工作目录中修改文件。</span><br><span class=\"line\"></span><br><span class=\"line\">2.暂存文件，将文件的快照放入暂存区域。</span><br><span class=\"line\"></span><br><span class=\"line\">3.提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</span><br></pre></td></tr></table></figure></p>\n<p>如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。</p>\n<h1 id=\"如何安装Git\"><a href=\"#如何安装Git\" class=\"headerlink\" title=\"如何安装Git\"></a>如何安装Git</h1><blockquote>\n<p><strong>Mac</strong>: brew install git</p>\n<p><strong>Linux(Debian)</strong> : apt-get install git-core</p>\n<p><strong>Linux(Fedora)</strong> : yum install git-core</p>\n<p><strong>Windows</strong> : 下载安装 <a href=\"http://git-scm.com\">Git</a></p>\n</blockquote>\n<p>配置<br><figure class=\"highlight smalltalk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$ </span>git config --global user.name <span class=\"comment\">\"your name\"</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"youremail@email.com\"</span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>--global</code> 可以使该命令只执行一次。</p>\n<p>你可以通过如下的命令来查看你的配置信息：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">config</span> --list</span><br><span class=\"line\"></span><br><span class=\"line\">user.email=<span class=\"keyword\">joveyzheng@qq.com</span><br><span class=\"line\"></span></span><br><span class=\"line\">user.name=<span class=\"keyword\">joveyzheng</span><br><span class=\"line\"></span></span><br><span class=\"line\">color.status=auto</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>你可以通过输入 <code>$ git config &lt;key&gt;</code> 来查看某一项的配置<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config user<span class=\"selector-class\">.name</span></span><br><span class=\"line\"></span><br><span class=\"line\">joveyzheng</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"获取帮助\"><a href=\"#获取帮助\" class=\"headerlink\" title=\"获取帮助\"></a>获取帮助</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n<p>文中多处借鉴《Git pro》，想获得更多了解推荐阅读： <a href=\"http://git-scm.com/book/zh/v2\">Git Pro</a></p>","sticky":0},{"title":"5 大 Web 开发与设计网站","date":"2015-11-17T02:23:56.000Z","_content":"Web 缺点之一是任何东西都是临时的。\n技术的发展快如闪电，当你想设计一个新的网站，或是让别人为你设计一个，当前的技术将变得不足以应付。本文将为你介绍很多很好的网站。\n你需要设计一个让读者难忘的，同时能发表一个声明，并且不会像其它网站一样会让你的读者“尖叫”的网站。\n你要为你的目标读者提供一个独特而不同于其它的体验，否则你会失去这里读者。\n\n如果你是一个 Web 开发人员或是设计师，那么你会喜欢上这 5 个网站，同时你也会拥有一个志同道合的社区，从中受益并且重新概念化你的品牌和业务价值。\n\n# [WebDesigner News](http://www.webdesignernews.com/)\n这里将列出设计师们的经验，他们会将自己的经验总结成一些“入门级”的文章。\n其中有些是高技术含量的文章，但也是与 web-friendly 相关的内容。\n\n# [Smashing Magazine](http://www.smashingmagazine.com/)\n一个不仅关注编码和设计的全类型网站，但也可以在这里用设计好设计和编码去触动某人。\n重点是提供可编辑的内容，从设计的角度而言，它可以作用于在两个主要平台——站点和电子书发布。\n\n# [Dribble](https://dribbble.com/)\n一个设计师社区，用于展示和分享他们最新的 Web 设计项目。\n这为你提供了很多与全球的设计师面对面合作的机会，也可以在此获得设计师工作的机会。\n\n<!-- more -->\n\n# [A List Apart](http://alistapart.com/)\n专注于 Web 相关的设计，开发及意义。\n你会在这找到你特别关注的 Web 标准和最佳的实践。\n这个网站附加的价值是，它会为那些及时书写与主题相关的 Web 设计和开发的自由作家支付一笔钱。\n鲜明的特点是，所有的专家都是来自世界各地。\n\n# [Awwwards](http://www.awwwards.com/)\n一个 Web 设计师和开发人员展示它们工作成果的网站，同时也希望自己能被发现，识别和获得升职机会。\n每年，顶级设计师和开发人员选择在一个标志性的城市举行特殊的颁奖典礼。\n对于 Awwwards 而言，他们正在寻找有用的，创新的，直观的，美丽的而且独特的数字体验。\nAwwwards 是一个全球性对于知识和灵感“很好”的网站。\n\n\n现在你明白了吧——这五大网站，不仅仅是展示人才，同时了解 Web 设计人员和开发人员通过这些网站的功能去概念化品牌的知识。这些网站的许多贡献者最大化他们的在线帮助你去建立品牌和让你成为一个志趣相投的社区的一部分。你听说过或与这些网站吗？你有任何其他人分享吗？加入谈话，在下面的评论栏中分享你的想法。\n\n[**原文链接**](http://www.huffingtonpost.com/dorit-sasson/5-top-websites-on-web-des_b_8481976.html)","source":"_posts/article-10.md","raw":"title: 5 大 Web 开发与设计网站\ndate: 2015-11-17 10:23:56\ncategories:\n  - 好文分享\ntags:\n  - 译文\n  - Web Dedign\n  - Web Development\n  - Websites\n---\nWeb 缺点之一是任何东西都是临时的。\n技术的发展快如闪电，当你想设计一个新的网站，或是让别人为你设计一个，当前的技术将变得不足以应付。本文将为你介绍很多很好的网站。\n你需要设计一个让读者难忘的，同时能发表一个声明，并且不会像其它网站一样会让你的读者“尖叫”的网站。\n你要为你的目标读者提供一个独特而不同于其它的体验，否则你会失去这里读者。\n\n如果你是一个 Web 开发人员或是设计师，那么你会喜欢上这 5 个网站，同时你也会拥有一个志同道合的社区，从中受益并且重新概念化你的品牌和业务价值。\n\n# [WebDesigner News](http://www.webdesignernews.com/)\n这里将列出设计师们的经验，他们会将自己的经验总结成一些“入门级”的文章。\n其中有些是高技术含量的文章，但也是与 web-friendly 相关的内容。\n\n# [Smashing Magazine](http://www.smashingmagazine.com/)\n一个不仅关注编码和设计的全类型网站，但也可以在这里用设计好设计和编码去触动某人。\n重点是提供可编辑的内容，从设计的角度而言，它可以作用于在两个主要平台——站点和电子书发布。\n\n# [Dribble](https://dribbble.com/)\n一个设计师社区，用于展示和分享他们最新的 Web 设计项目。\n这为你提供了很多与全球的设计师面对面合作的机会，也可以在此获得设计师工作的机会。\n\n<!-- more -->\n\n# [A List Apart](http://alistapart.com/)\n专注于 Web 相关的设计，开发及意义。\n你会在这找到你特别关注的 Web 标准和最佳的实践。\n这个网站附加的价值是，它会为那些及时书写与主题相关的 Web 设计和开发的自由作家支付一笔钱。\n鲜明的特点是，所有的专家都是来自世界各地。\n\n# [Awwwards](http://www.awwwards.com/)\n一个 Web 设计师和开发人员展示它们工作成果的网站，同时也希望自己能被发现，识别和获得升职机会。\n每年，顶级设计师和开发人员选择在一个标志性的城市举行特殊的颁奖典礼。\n对于 Awwwards 而言，他们正在寻找有用的，创新的，直观的，美丽的而且独特的数字体验。\nAwwwards 是一个全球性对于知识和灵感“很好”的网站。\n\n\n现在你明白了吧——这五大网站，不仅仅是展示人才，同时了解 Web 设计人员和开发人员通过这些网站的功能去概念化品牌的知识。这些网站的许多贡献者最大化他们的在线帮助你去建立品牌和让你成为一个志趣相投的社区的一部分。你听说过或与这些网站吗？你有任何其他人分享吗？加入谈话，在下面的评论栏中分享你的想法。\n\n[**原文链接**](http://www.huffingtonpost.com/dorit-sasson/5-top-websites-on-web-des_b_8481976.html)","slug":"article-10","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7elv0002wnprg0qxnwda","content":"<p>Web 缺点之一是任何东西都是临时的。<br>技术的发展快如闪电，当你想设计一个新的网站，或是让别人为你设计一个，当前的技术将变得不足以应付。本文将为你介绍很多很好的网站。<br>你需要设计一个让读者难忘的，同时能发表一个声明，并且不会像其它网站一样会让你的读者“尖叫”的网站。<br>你要为你的目标读者提供一个独特而不同于其它的体验，否则你会失去这里读者。</p>\n<p>如果你是一个 Web 开发人员或是设计师，那么你会喜欢上这 5 个网站，同时你也会拥有一个志同道合的社区，从中受益并且重新概念化你的品牌和业务价值。</p>\n<h1 id=\"WebDesigner-News\"><a href=\"#WebDesigner-News\" class=\"headerlink\" title=\"WebDesigner News\"></a><a href=\"http://www.webdesignernews.com/\" target=\"_blank\" rel=\"external\">WebDesigner News</a></h1><p>这里将列出设计师们的经验，他们会将自己的经验总结成一些“入门级”的文章。<br>其中有些是高技术含量的文章，但也是与 web-friendly 相关的内容。</p>\n<h1 id=\"Smashing-Magazine\"><a href=\"#Smashing-Magazine\" class=\"headerlink\" title=\"Smashing Magazine\"></a><a href=\"http://www.smashingmagazine.com/\" target=\"_blank\" rel=\"external\">Smashing Magazine</a></h1><p>一个不仅关注编码和设计的全类型网站，但也可以在这里用设计好设计和编码去触动某人。<br>重点是提供可编辑的内容，从设计的角度而言，它可以作用于在两个主要平台——站点和电子书发布。</p>\n<h1 id=\"Dribble\"><a href=\"#Dribble\" class=\"headerlink\" title=\"Dribble\"></a><a href=\"https://dribbble.com/\" target=\"_blank\" rel=\"external\">Dribble</a></h1><p>一个设计师社区，用于展示和分享他们最新的 Web 设计项目。<br>这为你提供了很多与全球的设计师面对面合作的机会，也可以在此获得设计师工作的机会。</p>\n<a id=\"more\"></a>\n<h1 id=\"A-List-Apart\"><a href=\"#A-List-Apart\" class=\"headerlink\" title=\"A List Apart\"></a><a href=\"http://alistapart.com/\" target=\"_blank\" rel=\"external\">A List Apart</a></h1><p>专注于 Web 相关的设计，开发及意义。<br>你会在这找到你特别关注的 Web 标准和最佳的实践。<br>这个网站附加的价值是，它会为那些及时书写与主题相关的 Web 设计和开发的自由作家支付一笔钱。<br>鲜明的特点是，所有的专家都是来自世界各地。</p>\n<h1 id=\"Awwwards\"><a href=\"#Awwwards\" class=\"headerlink\" title=\"Awwwards\"></a><a href=\"http://www.awwwards.com/\" target=\"_blank\" rel=\"external\">Awwwards</a></h1><p>一个 Web 设计师和开发人员展示它们工作成果的网站，同时也希望自己能被发现，识别和获得升职机会。<br>每年，顶级设计师和开发人员选择在一个标志性的城市举行特殊的颁奖典礼。<br>对于 Awwwards 而言，他们正在寻找有用的，创新的，直观的，美丽的而且独特的数字体验。<br>Awwwards 是一个全球性对于知识和灵感“很好”的网站。</p>\n<p>现在你明白了吧——这五大网站，不仅仅是展示人才，同时了解 Web 设计人员和开发人员通过这些网站的功能去概念化品牌的知识。这些网站的许多贡献者最大化他们的在线帮助你去建立品牌和让你成为一个志趣相投的社区的一部分。你听说过或与这些网站吗？你有任何其他人分享吗？加入谈话，在下面的评论栏中分享你的想法。</p>\n<p><a href=\"http://www.huffingtonpost.com/dorit-sasson/5-top-websites-on-web-des_b_8481976.html\" target=\"_blank\" rel=\"external\"><strong>原文链接</strong></a></p>\n","excerpt":"<p>Web 缺点之一是任何东西都是临时的。<br>技术的发展快如闪电，当你想设计一个新的网站，或是让别人为你设计一个，当前的技术将变得不足以应付。本文将为你介绍很多很好的网站。<br>你需要设计一个让读者难忘的，同时能发表一个声明，并且不会像其它网站一样会让你的读者“尖叫”的网站。<br>你要为你的目标读者提供一个独特而不同于其它的体验，否则你会失去这里读者。</p>\n<p>如果你是一个 Web 开发人员或是设计师，那么你会喜欢上这 5 个网站，同时你也会拥有一个志同道合的社区，从中受益并且重新概念化你的品牌和业务价值。</p>\n<h1 id=\"WebDesigner-News\"><a href=\"#WebDesigner-News\" class=\"headerlink\" title=\"WebDesigner News\"></a><a href=\"http://www.webdesignernews.com/\">WebDesigner News</a></h1><p>这里将列出设计师们的经验，他们会将自己的经验总结成一些“入门级”的文章。<br>其中有些是高技术含量的文章，但也是与 web-friendly 相关的内容。</p>\n<h1 id=\"Smashing-Magazine\"><a href=\"#Smashing-Magazine\" class=\"headerlink\" title=\"Smashing Magazine\"></a><a href=\"http://www.smashingmagazine.com/\">Smashing Magazine</a></h1><p>一个不仅关注编码和设计的全类型网站，但也可以在这里用设计好设计和编码去触动某人。<br>重点是提供可编辑的内容，从设计的角度而言，它可以作用于在两个主要平台——站点和电子书发布。</p>\n<h1 id=\"Dribble\"><a href=\"#Dribble\" class=\"headerlink\" title=\"Dribble\"></a><a href=\"https://dribbble.com/\">Dribble</a></h1><p>一个设计师社区，用于展示和分享他们最新的 Web 设计项目。<br>这为你提供了很多与全球的设计师面对面合作的机会，也可以在此获得设计师工作的机会。</p>","more":"<h1 id=\"A-List-Apart\"><a href=\"#A-List-Apart\" class=\"headerlink\" title=\"A List Apart\"></a><a href=\"http://alistapart.com/\">A List Apart</a></h1><p>专注于 Web 相关的设计，开发及意义。<br>你会在这找到你特别关注的 Web 标准和最佳的实践。<br>这个网站附加的价值是，它会为那些及时书写与主题相关的 Web 设计和开发的自由作家支付一笔钱。<br>鲜明的特点是，所有的专家都是来自世界各地。</p>\n<h1 id=\"Awwwards\"><a href=\"#Awwwards\" class=\"headerlink\" title=\"Awwwards\"></a><a href=\"http://www.awwwards.com/\">Awwwards</a></h1><p>一个 Web 设计师和开发人员展示它们工作成果的网站，同时也希望自己能被发现，识别和获得升职机会。<br>每年，顶级设计师和开发人员选择在一个标志性的城市举行特殊的颁奖典礼。<br>对于 Awwwards 而言，他们正在寻找有用的，创新的，直观的，美丽的而且独特的数字体验。<br>Awwwards 是一个全球性对于知识和灵感“很好”的网站。</p>\n<p>现在你明白了吧——这五大网站，不仅仅是展示人才，同时了解 Web 设计人员和开发人员通过这些网站的功能去概念化品牌的知识。这些网站的许多贡献者最大化他们的在线帮助你去建立品牌和让你成为一个志趣相投的社区的一部分。你听说过或与这些网站吗？你有任何其他人分享吗？加入谈话，在下面的评论栏中分享你的想法。</p>\n<p><a href=\"http://www.huffingtonpost.com/dorit-sasson/5-top-websites-on-web-des_b_8481976.html\"><strong>原文链接</strong></a></p>","sticky":0},{"title":"对于 Web 设计师和开发者非常有用的 25 个 Chrome 扩展应用","date":"2015-12-04T02:10:33.000Z","_content":"尽管 Chrome 的开发者工具给你足够多的实用工具来覆盖你的设计和开发需求，但也可以通过添加免费的扩展应用去进一步扩展浏览器的功能。根据你的需要，并选择完美的扩展，你可以轻松地创建一个个性化的开发环境，这会大大提高你的开发效率。\n\n要介绍的 25 个 Chrome 扩展应该我们为你选择分为以下几类：[前端扩展](#前端扩展)，[在线编辑](#在线编辑)，[验证器与性能相关](#验证器与性能相关)，[测量扩展应用](#测量扩展应用)，[颜色工具](#颜色工具)，[字体测试工具](#字体测试工具)和 [很有用的实用性扩展应用](#很有用的实用性扩展应用)。\n\n# 前端扩展\n## SnappySnippet\n**[SnappySnippet](https://chrome.google.com/webstore/detail/snappysnippet/blfngdefapoapkcdibbdkigpeaffgcil?hl=en)** 把 CSS 和 HTML 从 DOM 树里提取出来，然后发送到 CodePen，jsFiddle 或 JS Bin 上。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-01.png?w=520\" />\n\n## MagiCSS\n**[MagiCSS](https://chrome.google.com/webstore/detail/magicss-live-css-editor/ifhikkcafabcgolfjegfcgloomalapol?hl=en)** 一个拥有内置编辑器的在线 CSS 编辑扩展应用，具有美化和减小 CSS 的功能。同时还允许创建 Github Gist。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-02.png?w=520\" />\n\n## CSS Dig\n**[CSS Dig](https://chrome.google.com/webstore/detail/css-dig/lpnhmlhomomelfkcjnkcacofhmggjmco)** 能够在大多数的网站上找到和组织样式表和样式块，给你一个简单的方法来分析和计划重构的代码。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-03.png?w=520\" />\n\n## CSSViewer\n**[CSSViewer](https://chrome.google.com/webstore/detail/cssviewer/ggfgijbpiheegefliciemofobhmofgce?hl=en)** 能集成很多工具和扩展程序去执行一个简单的任务。这使得它们更好地发挥功能。但没有 Chrome 扩展应用集合能在不集成的情况下可以完成这种功能。用法很简单，你只需点击工具栏的图标，然后将鼠标移到你想审查的元素上就可以了。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-04.png?w=520\" />\n\n<!-- more -->\n\n## CSS-Shack\n**[CSS-Shack](https://chrome.google.com/webstore/detail/css-shack/geiccgjkigajaicecnhdokggninehdlp)** 帮助你创建图层样式（就像你用如 PS 一样），并能生成一个 CSS 文件。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-05.png?w=520\" />\n\n## CSS3 Generator\n**[CSS3 Generator](https://chrome.google.com/webstore/detail/css3-generator/dmlgmehijaodgkkooghkknjjkddahmej?hl=en-GB)** 如名，可以帮助你生成 CSS3 代码。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-06.png?w=520\" />\n\n## CSS Shapes Editor\n**[CSS Shapes Editor](https://chrome.google.com/webstore/detail/css-shapes-editor/nenndldnbcncjmeacmnondmkkfedmgmp)** 在线编辑 CSS 形状的值。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-07.png?w=520\" />\n\n# 在线编辑\n## WordPress Style Editor\n**[WordPress Style Editor](https://chrome.google.com/webstore/detail/wordpress-style-editor/bgdpllcnhcmpfcheafdhimpklhjoommn?hl=en)** 支持在线审查和编辑你的 WordPress 的样式。\n<img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-08.png?w=520\" />\n\n## PageEdit\n**[PageEdit](https://chrome.google.com/webstore/detail/pageedit/ebkclgoaabaibghklgknnjdemknjaeic)** 能把 Chrome 变成所见即所得的编辑器，你可以用它编辑任何网页。\n<iframe width=\"640\" height=\"400\" src=\"https://www.youtube.com/embed/Ts4bSR1hpxg\" frameborder=\"0\" allowfullscreen></iframe>\n\n# 验证器与性能相关\n## Perfmap\n**[Perfmap](https://chrome.google.com/webstore/detail/perfmap/hgpnhiajcdppfbogcpfdgcceepgkhdmk?hl=en&gl=GB)** 它用 Resource Timing API 来创建一个网站的前端的性能的热图检查的定时器，使得可以在浏览器中查看加载的资源。\n<img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-12.png?w=520\" />\n\n## Validity\n**[Validity](https://chrome.google.com/webstore/detail/validity/bbicmjjbohdfglopkidebfccilipgeif?hl=en-GB)** 帮助你验证任何一个网页。可以在 console 页查看错误的数量和详情。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-13.png?w=520\" />\n\n## Web Developer Checklist\n**[Web Developer Checklist](https://chrome.google.com/webstore/detail/web-developer-checklist/iahamcpedabephpcgkeikbclmaljebjp)** 必备的扩展应用，可以查看任何一个网页的报错和反常的问题。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-10.png?w=520\" />\n\n## Bootlint This Page\n**[Bootlint This Page](https://chrome.google.com/webstore/detail/bootlint-this-page/cnamjhcdoadndjpjodeclalnmfhkoepb?hl=en&gl=GB)** 在 Chrome 浏览器上显示一个按钮，帮助你查看任何一个基于 BootStrap 的网页的报错。可以在 console 页查看。\n<img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-11.png?w=520\" />\n\n## Check My Links\n**[Check My Links](https://chrome.google.com/webstore/detail/check-my-links/ojkcdipcgfaekbeaelaapakgnjflfglf)** 扫描网页，并把链接以高亮显示，有效为绿色，无效为红色。没人会喜欢无效的链接！\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-27.png?w=520\" />\n\n# 测量扩展应用\n## Page Ruler\n**[Page Ruler](https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn?hl=en)** 能够在任何网上形成一个画尺，并显示元素的 width，height 和 position。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-14.png?w=520\" />\n\n## Dimensions\n**[Dimensions](https://chrome.google.com/webstore/detail/dimensions/baocaagndhipibgklemoalmkljaimfdj)** 简单且使用的工具，为你测量屏幕宽度和高度。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-15.png?w=520\" />\n\n# 颜色工具\n## ColorZilla\n**[ColorZilla](https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp)** 起源于 Firefox，但它为 Chrome 增加了多种颜色工具，像吸管，颜色选择器，调色板查看器和梯度生成器。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-17.png?w=520\" />\n\n## Color Tab\n**[Color Tab](http://colorhunt.co/tab/)** 在你每次打开一个新标签时，会给你一个美丽的新配色方案。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-18.png?w=520\" />\n\n# 字体测试工具\n## Fontface Ninja\n**[Fontface Ninja](https://chrome.google.com/webstore/detail/fontface-ninja/eljapbgkmlngdpckoiiibecpemleclhh)** 可以识别任何网页的字体，同时给出它的 size 和 line-spacing。帮助你测试和探索新的字体。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-19.png?w=520\" />\n\n## Font Playground\n**[Font Playground](https://chrome.google.com/webstore/detail/font-playground/hdpmpnhaoddjelneingmbnhaibbmjgno?hl=en)** 在任何网页上预览 Google 成千上万的字体。\n<img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-20.png?w=520\" />\n\n## TypeWonder\n**[TypeWonder](https://chrome.google.com/webstore/detail/typewonder/ohgmapelghofmbacalgamfbejaghdilh)** 允许你在任何网站测试 web 字体。输入站点 URL 就可以立马预览字体。\n<img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-21.png?w=520\" />\n\n# 很有用的实用性扩展应用\n## Responsive Web Design Tester\n**[Responsive Web Design Tester](https://chrome.google.com/webstore/detail/responsive-web-design-tes/objclahbaimlfnbjdeobicmmlnbhamkg?hl=en)** 是一个简单的工具，来帮助快速、轻松地测试网站在大多数流行的移动设备上的响应。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-22.png?w=520\" />\n\n## 45to75\n**[45to75](https://chrome.google.com/webstore/detail/45to75/efmppndinjbljeellfdkpghgblenbcdd)** 为保证在所有大小设备上，你的文字是可读的。它可以帮你把句子规定在 45 到 75 个字符之间，从而优化句子长度。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-16.png?w=520\" />\n\n## PerfectPixel\n**[PerfectPixel](https://chrome.google.com/webstore/detail/perfectpixel-by-welldonec/dkaagdgjmgdmbnecmcefdhjekcoceebi)** 在开发 HTML 时，它会把半透明图像叠加在顶部，允许你在每个像素间进行比较。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-23.png?w=520\" />\n\n## ZenHub\n**[ZenHub](https://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd)** 为 Github 项目管理应用。有节省时间的特性，如 drap-drop 任务板和 to-do 列表，帮助你提升 Github 的生产效率。\n<img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-24.png?w=520\" />\n\n## Instant Wireframe\n**[Instant Wireframe](https://chrome.google.com/webstore/detail/instant-wireframe/pmpmnmbgidlnoamkpmcikaejhmeldnha)** 谁不喜欢漂亮的线框呢？它给为任何一个网页添加线框，同时本地的也可以。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-25.png?w=520\" />\n\n## Minimalist Markdown Editor\n**[Minimalist Markdown Editor](https://chrome.google.com/webstore/detail/minimalist-markdown-edito/pghodfjepegmciihfhdipmimghiakcjf)** 同步预览 Markdown。可以快速地帮 Markdown 转化成 HTML。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-26.png?w=520\" />\n\n## fb-flo\n**[fb-flo](https://facebook.github.io/fb-flo/)** 由 Facebook 开发，同时也是 Chrome 的扩展应用。使你能够在线编辑 JS，CSS，images 或任何静态资源。\n\n## Web Developer\n**[Web Developer](https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm)** 如果你现在还没用这个应用，赶紧吧。这是迄今为止最受欢迎的 Chrome 和 Firefox 开发人员扩展应用。它添加了一个超级有用工具到浏览器，每个网页设计师和开发人员，还有你可能甚至不知道你需要的都会需要。\n\n## MySQL Admin\n**[MySQL Admin](https://chrome.google.com/webstore/detail/chrome-mysql-admin/ndgnpnpakfcdjmpgmcaknimfgcldechn)** 为你更好地，更简单地管理 MySQL 数据库。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-29.png?w=520\" />\n\n# 完毕！\n\n想要获取更多的 Chrome 扩展应用，请看 [DevTools Tips](http://devtoolstips.com/)，这里收集了 Chrome 的开发工具集和基本使用方法。如果你是一个设计师或开发人员，想获取更新最新的设计和开发资讯，请访问 Chrome 的扩展应用 [Muzli](https://chrome.google.com/webstore/detail/muzli-design-breakfast/glcipcfhmopcgidicgdociohdoicpdfc) 或 [Panda](https://chrome.google.com/webstore/detail/panda-4-news-inspiration/haafibkemckmbknhfkiiniobjpgkebko)。\n\n如果你正在寻找 Firefox 的扩展应用，请看：[对于 Web 开发非常有用的 20 个 Firefox 扩展应用](http://speckyboy.com/2011/05/03/20-essential-firefox-4-addonsextensions-for-web-developers/)。\n\n之前还有一篇发布在 [Speckyboy Design Magazine](http://speckyboy.com/) 上的文章是[对于 Web 设计师和开发者非常有用的 20 个 Chrome 扩展应用](http://speckyboy.com/2015/12/03/chrome-extensions-web-designers-developers/)。\n\n[**原文链接**](http://p2html.com/blog/25-chrome-extensions-for-web-designers-developers/)","source":"_posts/article-12.md","raw":"title: 对于 Web 设计师和开发者非常有用的 25 个 Chrome 扩展应用\ndate: 2015-12-04 10:10:33\ncategories:\n  - 好文分享\ntags:\n  - 译文\n  - Web Development\n  - Chrome Extensions\n  - Web Designers\n  - Developers\n---\n尽管 Chrome 的开发者工具给你足够多的实用工具来覆盖你的设计和开发需求，但也可以通过添加免费的扩展应用去进一步扩展浏览器的功能。根据你的需要，并选择完美的扩展，你可以轻松地创建一个个性化的开发环境，这会大大提高你的开发效率。\n\n要介绍的 25 个 Chrome 扩展应该我们为你选择分为以下几类：[前端扩展](#前端扩展)，[在线编辑](#在线编辑)，[验证器与性能相关](#验证器与性能相关)，[测量扩展应用](#测量扩展应用)，[颜色工具](#颜色工具)，[字体测试工具](#字体测试工具)和 [很有用的实用性扩展应用](#很有用的实用性扩展应用)。\n\n# 前端扩展\n## SnappySnippet\n**[SnappySnippet](https://chrome.google.com/webstore/detail/snappysnippet/blfngdefapoapkcdibbdkigpeaffgcil?hl=en)** 把 CSS 和 HTML 从 DOM 树里提取出来，然后发送到 CodePen，jsFiddle 或 JS Bin 上。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-01.png?w=520\" />\n\n## MagiCSS\n**[MagiCSS](https://chrome.google.com/webstore/detail/magicss-live-css-editor/ifhikkcafabcgolfjegfcgloomalapol?hl=en)** 一个拥有内置编辑器的在线 CSS 编辑扩展应用，具有美化和减小 CSS 的功能。同时还允许创建 Github Gist。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-02.png?w=520\" />\n\n## CSS Dig\n**[CSS Dig](https://chrome.google.com/webstore/detail/css-dig/lpnhmlhomomelfkcjnkcacofhmggjmco)** 能够在大多数的网站上找到和组织样式表和样式块，给你一个简单的方法来分析和计划重构的代码。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-03.png?w=520\" />\n\n## CSSViewer\n**[CSSViewer](https://chrome.google.com/webstore/detail/cssviewer/ggfgijbpiheegefliciemofobhmofgce?hl=en)** 能集成很多工具和扩展程序去执行一个简单的任务。这使得它们更好地发挥功能。但没有 Chrome 扩展应用集合能在不集成的情况下可以完成这种功能。用法很简单，你只需点击工具栏的图标，然后将鼠标移到你想审查的元素上就可以了。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-04.png?w=520\" />\n\n<!-- more -->\n\n## CSS-Shack\n**[CSS-Shack](https://chrome.google.com/webstore/detail/css-shack/geiccgjkigajaicecnhdokggninehdlp)** 帮助你创建图层样式（就像你用如 PS 一样），并能生成一个 CSS 文件。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-05.png?w=520\" />\n\n## CSS3 Generator\n**[CSS3 Generator](https://chrome.google.com/webstore/detail/css3-generator/dmlgmehijaodgkkooghkknjjkddahmej?hl=en-GB)** 如名，可以帮助你生成 CSS3 代码。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-06.png?w=520\" />\n\n## CSS Shapes Editor\n**[CSS Shapes Editor](https://chrome.google.com/webstore/detail/css-shapes-editor/nenndldnbcncjmeacmnondmkkfedmgmp)** 在线编辑 CSS 形状的值。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-07.png?w=520\" />\n\n# 在线编辑\n## WordPress Style Editor\n**[WordPress Style Editor](https://chrome.google.com/webstore/detail/wordpress-style-editor/bgdpllcnhcmpfcheafdhimpklhjoommn?hl=en)** 支持在线审查和编辑你的 WordPress 的样式。\n<img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-08.png?w=520\" />\n\n## PageEdit\n**[PageEdit](https://chrome.google.com/webstore/detail/pageedit/ebkclgoaabaibghklgknnjdemknjaeic)** 能把 Chrome 变成所见即所得的编辑器，你可以用它编辑任何网页。\n<iframe width=\"640\" height=\"400\" src=\"https://www.youtube.com/embed/Ts4bSR1hpxg\" frameborder=\"0\" allowfullscreen></iframe>\n\n# 验证器与性能相关\n## Perfmap\n**[Perfmap](https://chrome.google.com/webstore/detail/perfmap/hgpnhiajcdppfbogcpfdgcceepgkhdmk?hl=en&gl=GB)** 它用 Resource Timing API 来创建一个网站的前端的性能的热图检查的定时器，使得可以在浏览器中查看加载的资源。\n<img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-12.png?w=520\" />\n\n## Validity\n**[Validity](https://chrome.google.com/webstore/detail/validity/bbicmjjbohdfglopkidebfccilipgeif?hl=en-GB)** 帮助你验证任何一个网页。可以在 console 页查看错误的数量和详情。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-13.png?w=520\" />\n\n## Web Developer Checklist\n**[Web Developer Checklist](https://chrome.google.com/webstore/detail/web-developer-checklist/iahamcpedabephpcgkeikbclmaljebjp)** 必备的扩展应用，可以查看任何一个网页的报错和反常的问题。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-10.png?w=520\" />\n\n## Bootlint This Page\n**[Bootlint This Page](https://chrome.google.com/webstore/detail/bootlint-this-page/cnamjhcdoadndjpjodeclalnmfhkoepb?hl=en&gl=GB)** 在 Chrome 浏览器上显示一个按钮，帮助你查看任何一个基于 BootStrap 的网页的报错。可以在 console 页查看。\n<img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-11.png?w=520\" />\n\n## Check My Links\n**[Check My Links](https://chrome.google.com/webstore/detail/check-my-links/ojkcdipcgfaekbeaelaapakgnjflfglf)** 扫描网页，并把链接以高亮显示，有效为绿色，无效为红色。没人会喜欢无效的链接！\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-27.png?w=520\" />\n\n# 测量扩展应用\n## Page Ruler\n**[Page Ruler](https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn?hl=en)** 能够在任何网上形成一个画尺，并显示元素的 width，height 和 position。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-14.png?w=520\" />\n\n## Dimensions\n**[Dimensions](https://chrome.google.com/webstore/detail/dimensions/baocaagndhipibgklemoalmkljaimfdj)** 简单且使用的工具，为你测量屏幕宽度和高度。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-15.png?w=520\" />\n\n# 颜色工具\n## ColorZilla\n**[ColorZilla](https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp)** 起源于 Firefox，但它为 Chrome 增加了多种颜色工具，像吸管，颜色选择器，调色板查看器和梯度生成器。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-17.png?w=520\" />\n\n## Color Tab\n**[Color Tab](http://colorhunt.co/tab/)** 在你每次打开一个新标签时，会给你一个美丽的新配色方案。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-18.png?w=520\" />\n\n# 字体测试工具\n## Fontface Ninja\n**[Fontface Ninja](https://chrome.google.com/webstore/detail/fontface-ninja/eljapbgkmlngdpckoiiibecpemleclhh)** 可以识别任何网页的字体，同时给出它的 size 和 line-spacing。帮助你测试和探索新的字体。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-19.png?w=520\" />\n\n## Font Playground\n**[Font Playground](https://chrome.google.com/webstore/detail/font-playground/hdpmpnhaoddjelneingmbnhaibbmjgno?hl=en)** 在任何网页上预览 Google 成千上万的字体。\n<img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-20.png?w=520\" />\n\n## TypeWonder\n**[TypeWonder](https://chrome.google.com/webstore/detail/typewonder/ohgmapelghofmbacalgamfbejaghdilh)** 允许你在任何网站测试 web 字体。输入站点 URL 就可以立马预览字体。\n<img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-21.png?w=520\" />\n\n# 很有用的实用性扩展应用\n## Responsive Web Design Tester\n**[Responsive Web Design Tester](https://chrome.google.com/webstore/detail/responsive-web-design-tes/objclahbaimlfnbjdeobicmmlnbhamkg?hl=en)** 是一个简单的工具，来帮助快速、轻松地测试网站在大多数流行的移动设备上的响应。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-22.png?w=520\" />\n\n## 45to75\n**[45to75](https://chrome.google.com/webstore/detail/45to75/efmppndinjbljeellfdkpghgblenbcdd)** 为保证在所有大小设备上，你的文字是可读的。它可以帮你把句子规定在 45 到 75 个字符之间，从而优化句子长度。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-16.png?w=520\" />\n\n## PerfectPixel\n**[PerfectPixel](https://chrome.google.com/webstore/detail/perfectpixel-by-welldonec/dkaagdgjmgdmbnecmcefdhjekcoceebi)** 在开发 HTML 时，它会把半透明图像叠加在顶部，允许你在每个像素间进行比较。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-23.png?w=520\" />\n\n## ZenHub\n**[ZenHub](https://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd)** 为 Github 项目管理应用。有节省时间的特性，如 drap-drop 任务板和 to-do 列表，帮助你提升 Github 的生产效率。\n<img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-24.png?w=520\" />\n\n## Instant Wireframe\n**[Instant Wireframe](https://chrome.google.com/webstore/detail/instant-wireframe/pmpmnmbgidlnoamkpmcikaejhmeldnha)** 谁不喜欢漂亮的线框呢？它给为任何一个网页添加线框，同时本地的也可以。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-25.png?w=520\" />\n\n## Minimalist Markdown Editor\n**[Minimalist Markdown Editor](https://chrome.google.com/webstore/detail/minimalist-markdown-edito/pghodfjepegmciihfhdipmimghiakcjf)** 同步预览 Markdown。可以快速地帮 Markdown 转化成 HTML。\n<img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-26.png?w=520\" />\n\n## fb-flo\n**[fb-flo](https://facebook.github.io/fb-flo/)** 由 Facebook 开发，同时也是 Chrome 的扩展应用。使你能够在线编辑 JS，CSS，images 或任何静态资源。\n\n## Web Developer\n**[Web Developer](https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm)** 如果你现在还没用这个应用，赶紧吧。这是迄今为止最受欢迎的 Chrome 和 Firefox 开发人员扩展应用。它添加了一个超级有用工具到浏览器，每个网页设计师和开发人员，还有你可能甚至不知道你需要的都会需要。\n\n## MySQL Admin\n**[MySQL Admin](https://chrome.google.com/webstore/detail/chrome-mysql-admin/ndgnpnpakfcdjmpgmcaknimfgcldechn)** 为你更好地，更简单地管理 MySQL 数据库。\n<img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-29.png?w=520\" />\n\n# 完毕！\n\n想要获取更多的 Chrome 扩展应用，请看 [DevTools Tips](http://devtoolstips.com/)，这里收集了 Chrome 的开发工具集和基本使用方法。如果你是一个设计师或开发人员，想获取更新最新的设计和开发资讯，请访问 Chrome 的扩展应用 [Muzli](https://chrome.google.com/webstore/detail/muzli-design-breakfast/glcipcfhmopcgidicgdociohdoicpdfc) 或 [Panda](https://chrome.google.com/webstore/detail/panda-4-news-inspiration/haafibkemckmbknhfkiiniobjpgkebko)。\n\n如果你正在寻找 Firefox 的扩展应用，请看：[对于 Web 开发非常有用的 20 个 Firefox 扩展应用](http://speckyboy.com/2011/05/03/20-essential-firefox-4-addonsextensions-for-web-developers/)。\n\n之前还有一篇发布在 [Speckyboy Design Magazine](http://speckyboy.com/) 上的文章是[对于 Web 设计师和开发者非常有用的 20 个 Chrome 扩展应用](http://speckyboy.com/2015/12/03/chrome-extensions-web-designers-developers/)。\n\n[**原文链接**](http://p2html.com/blog/25-chrome-extensions-for-web-designers-developers/)","slug":"article-12","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7em20006wnprzxhm46u0","content":"<p>尽管 Chrome 的开发者工具给你足够多的实用工具来覆盖你的设计和开发需求，但也可以通过添加免费的扩展应用去进一步扩展浏览器的功能。根据你的需要，并选择完美的扩展，你可以轻松地创建一个个性化的开发环境，这会大大提高你的开发效率。</p>\n<p>要介绍的 25 个 Chrome 扩展应该我们为你选择分为以下几类：<a href=\"#前端扩展\">前端扩展</a>，<a href=\"#在线编辑\">在线编辑</a>，<a href=\"#验证器与性能相关\">验证器与性能相关</a>，<a href=\"#测量扩展应用\">测量扩展应用</a>，<a href=\"#颜色工具\">颜色工具</a>，<a href=\"#字体测试工具\">字体测试工具</a>和 <a href=\"#很有用的实用性扩展应用\">很有用的实用性扩展应用</a>。</p>\n<h1 id=\"前端扩展\"><a href=\"#前端扩展\" class=\"headerlink\" title=\"前端扩展\"></a>前端扩展</h1><h2 id=\"SnappySnippet\"><a href=\"#SnappySnippet\" class=\"headerlink\" title=\"SnappySnippet\"></a>SnappySnippet</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/snappysnippet/blfngdefapoapkcdibbdkigpeaffgcil?hl=en\" target=\"_blank\" rel=\"external\">SnappySnippet</a></strong> 把 CSS 和 HTML 从 DOM 树里提取出来，然后发送到 CodePen，jsFiddle 或 JS Bin 上。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-01.png?w=520\"></p>\n<h2 id=\"MagiCSS\"><a href=\"#MagiCSS\" class=\"headerlink\" title=\"MagiCSS\"></a>MagiCSS</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/magicss-live-css-editor/ifhikkcafabcgolfjegfcgloomalapol?hl=en\" target=\"_blank\" rel=\"external\">MagiCSS</a></strong> 一个拥有内置编辑器的在线 CSS 编辑扩展应用，具有美化和减小 CSS 的功能。同时还允许创建 Github Gist。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-02.png?w=520\"></p>\n<h2 id=\"CSS-Dig\"><a href=\"#CSS-Dig\" class=\"headerlink\" title=\"CSS Dig\"></a>CSS Dig</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/css-dig/lpnhmlhomomelfkcjnkcacofhmggjmco\" target=\"_blank\" rel=\"external\">CSS Dig</a></strong> 能够在大多数的网站上找到和组织样式表和样式块，给你一个简单的方法来分析和计划重构的代码。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-03.png?w=520\"></p>\n<h2 id=\"CSSViewer\"><a href=\"#CSSViewer\" class=\"headerlink\" title=\"CSSViewer\"></a>CSSViewer</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/cssviewer/ggfgijbpiheegefliciemofobhmofgce?hl=en\" target=\"_blank\" rel=\"external\">CSSViewer</a></strong> 能集成很多工具和扩展程序去执行一个简单的任务。这使得它们更好地发挥功能。但没有 Chrome 扩展应用集合能在不集成的情况下可以完成这种功能。用法很简单，你只需点击工具栏的图标，然后将鼠标移到你想审查的元素上就可以了。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-04.png?w=520\"></p>\n<a id=\"more\"></a>\n<h2 id=\"CSS-Shack\"><a href=\"#CSS-Shack\" class=\"headerlink\" title=\"CSS-Shack\"></a>CSS-Shack</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/css-shack/geiccgjkigajaicecnhdokggninehdlp\" target=\"_blank\" rel=\"external\">CSS-Shack</a></strong> 帮助你创建图层样式（就像你用如 PS 一样），并能生成一个 CSS 文件。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-05.png?w=520\"></p>\n<h2 id=\"CSS3-Generator\"><a href=\"#CSS3-Generator\" class=\"headerlink\" title=\"CSS3 Generator\"></a>CSS3 Generator</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/css3-generator/dmlgmehijaodgkkooghkknjjkddahmej?hl=en-GB\" target=\"_blank\" rel=\"external\">CSS3 Generator</a></strong> 如名，可以帮助你生成 CSS3 代码。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-06.png?w=520\"></p>\n<h2 id=\"CSS-Shapes-Editor\"><a href=\"#CSS-Shapes-Editor\" class=\"headerlink\" title=\"CSS Shapes Editor\"></a>CSS Shapes Editor</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/css-shapes-editor/nenndldnbcncjmeacmnondmkkfedmgmp\" target=\"_blank\" rel=\"external\">CSS Shapes Editor</a></strong> 在线编辑 CSS 形状的值。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-07.png?w=520\"></p>\n<h1 id=\"在线编辑\"><a href=\"#在线编辑\" class=\"headerlink\" title=\"在线编辑\"></a>在线编辑</h1><h2 id=\"WordPress-Style-Editor\"><a href=\"#WordPress-Style-Editor\" class=\"headerlink\" title=\"WordPress Style Editor\"></a>WordPress Style Editor</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/wordpress-style-editor/bgdpllcnhcmpfcheafdhimpklhjoommn?hl=en\" target=\"_blank\" rel=\"external\">WordPress Style Editor</a></strong> 支持在线审查和编辑你的 WordPress 的样式。<br><img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-08.png?w=520\"></p>\n<h2 id=\"PageEdit\"><a href=\"#PageEdit\" class=\"headerlink\" title=\"PageEdit\"></a>PageEdit</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/pageedit/ebkclgoaabaibghklgknnjdemknjaeic\" target=\"_blank\" rel=\"external\">PageEdit</a></strong> 能把 Chrome 变成所见即所得的编辑器，你可以用它编辑任何网页。</p>\n<iframe width=\"640\" height=\"400\" src=\"https://www.youtube.com/embed/Ts4bSR1hpxg\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h1 id=\"验证器与性能相关\"><a href=\"#验证器与性能相关\" class=\"headerlink\" title=\"验证器与性能相关\"></a>验证器与性能相关</h1><h2 id=\"Perfmap\"><a href=\"#Perfmap\" class=\"headerlink\" title=\"Perfmap\"></a>Perfmap</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/perfmap/hgpnhiajcdppfbogcpfdgcceepgkhdmk?hl=en&amp;gl=GB\" target=\"_blank\" rel=\"external\">Perfmap</a></strong> 它用 Resource Timing API 来创建一个网站的前端的性能的热图检查的定时器，使得可以在浏览器中查看加载的资源。<br><img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-12.png?w=520\"></p>\n<h2 id=\"Validity\"><a href=\"#Validity\" class=\"headerlink\" title=\"Validity\"></a>Validity</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/validity/bbicmjjbohdfglopkidebfccilipgeif?hl=en-GB\" target=\"_blank\" rel=\"external\">Validity</a></strong> 帮助你验证任何一个网页。可以在 console 页查看错误的数量和详情。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-13.png?w=520\"></p>\n<h2 id=\"Web-Developer-Checklist\"><a href=\"#Web-Developer-Checklist\" class=\"headerlink\" title=\"Web Developer Checklist\"></a>Web Developer Checklist</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/web-developer-checklist/iahamcpedabephpcgkeikbclmaljebjp\" target=\"_blank\" rel=\"external\">Web Developer Checklist</a></strong> 必备的扩展应用，可以查看任何一个网页的报错和反常的问题。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-10.png?w=520\"></p>\n<h2 id=\"Bootlint-This-Page\"><a href=\"#Bootlint-This-Page\" class=\"headerlink\" title=\"Bootlint This Page\"></a>Bootlint This Page</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/bootlint-this-page/cnamjhcdoadndjpjodeclalnmfhkoepb?hl=en&amp;gl=GB\" target=\"_blank\" rel=\"external\">Bootlint This Page</a></strong> 在 Chrome 浏览器上显示一个按钮，帮助你查看任何一个基于 BootStrap 的网页的报错。可以在 console 页查看。<br><img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-11.png?w=520\"></p>\n<h2 id=\"Check-My-Links\"><a href=\"#Check-My-Links\" class=\"headerlink\" title=\"Check My Links\"></a>Check My Links</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/check-my-links/ojkcdipcgfaekbeaelaapakgnjflfglf\" target=\"_blank\" rel=\"external\">Check My Links</a></strong> 扫描网页，并把链接以高亮显示，有效为绿色，无效为红色。没人会喜欢无效的链接！<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-27.png?w=520\"></p>\n<h1 id=\"测量扩展应用\"><a href=\"#测量扩展应用\" class=\"headerlink\" title=\"测量扩展应用\"></a>测量扩展应用</h1><h2 id=\"Page-Ruler\"><a href=\"#Page-Ruler\" class=\"headerlink\" title=\"Page Ruler\"></a>Page Ruler</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn?hl=en\" target=\"_blank\" rel=\"external\">Page Ruler</a></strong> 能够在任何网上形成一个画尺，并显示元素的 width，height 和 position。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-14.png?w=520\"></p>\n<h2 id=\"Dimensions\"><a href=\"#Dimensions\" class=\"headerlink\" title=\"Dimensions\"></a>Dimensions</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/dimensions/baocaagndhipibgklemoalmkljaimfdj\" target=\"_blank\" rel=\"external\">Dimensions</a></strong> 简单且使用的工具，为你测量屏幕宽度和高度。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-15.png?w=520\"></p>\n<h1 id=\"颜色工具\"><a href=\"#颜色工具\" class=\"headerlink\" title=\"颜色工具\"></a>颜色工具</h1><h2 id=\"ColorZilla\"><a href=\"#ColorZilla\" class=\"headerlink\" title=\"ColorZilla\"></a>ColorZilla</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp\" target=\"_blank\" rel=\"external\">ColorZilla</a></strong> 起源于 Firefox，但它为 Chrome 增加了多种颜色工具，像吸管，颜色选择器，调色板查看器和梯度生成器。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-17.png?w=520\"></p>\n<h2 id=\"Color-Tab\"><a href=\"#Color-Tab\" class=\"headerlink\" title=\"Color Tab\"></a>Color Tab</h2><p><strong><a href=\"http://colorhunt.co/tab/\" target=\"_blank\" rel=\"external\">Color Tab</a></strong> 在你每次打开一个新标签时，会给你一个美丽的新配色方案。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-18.png?w=520\"></p>\n<h1 id=\"字体测试工具\"><a href=\"#字体测试工具\" class=\"headerlink\" title=\"字体测试工具\"></a>字体测试工具</h1><h2 id=\"Fontface-Ninja\"><a href=\"#Fontface-Ninja\" class=\"headerlink\" title=\"Fontface Ninja\"></a>Fontface Ninja</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/fontface-ninja/eljapbgkmlngdpckoiiibecpemleclhh\" target=\"_blank\" rel=\"external\">Fontface Ninja</a></strong> 可以识别任何网页的字体，同时给出它的 size 和 line-spacing。帮助你测试和探索新的字体。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-19.png?w=520\"></p>\n<h2 id=\"Font-Playground\"><a href=\"#Font-Playground\" class=\"headerlink\" title=\"Font Playground\"></a>Font Playground</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/font-playground/hdpmpnhaoddjelneingmbnhaibbmjgno?hl=en\" target=\"_blank\" rel=\"external\">Font Playground</a></strong> 在任何网页上预览 Google 成千上万的字体。<br><img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-20.png?w=520\"></p>\n<h2 id=\"TypeWonder\"><a href=\"#TypeWonder\" class=\"headerlink\" title=\"TypeWonder\"></a>TypeWonder</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/typewonder/ohgmapelghofmbacalgamfbejaghdilh\" target=\"_blank\" rel=\"external\">TypeWonder</a></strong> 允许你在任何网站测试 web 字体。输入站点 URL 就可以立马预览字体。<br><img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-21.png?w=520\"></p>\n<h1 id=\"很有用的实用性扩展应用\"><a href=\"#很有用的实用性扩展应用\" class=\"headerlink\" title=\"很有用的实用性扩展应用\"></a>很有用的实用性扩展应用</h1><h2 id=\"Responsive-Web-Design-Tester\"><a href=\"#Responsive-Web-Design-Tester\" class=\"headerlink\" title=\"Responsive Web Design Tester\"></a>Responsive Web Design Tester</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/responsive-web-design-tes/objclahbaimlfnbjdeobicmmlnbhamkg?hl=en\" target=\"_blank\" rel=\"external\">Responsive Web Design Tester</a></strong> 是一个简单的工具，来帮助快速、轻松地测试网站在大多数流行的移动设备上的响应。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-22.png?w=520\"></p>\n<h2 id=\"45to75\"><a href=\"#45to75\" class=\"headerlink\" title=\"45to75\"></a>45to75</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/45to75/efmppndinjbljeellfdkpghgblenbcdd\" target=\"_blank\" rel=\"external\">45to75</a></strong> 为保证在所有大小设备上，你的文字是可读的。它可以帮你把句子规定在 45 到 75 个字符之间，从而优化句子长度。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-16.png?w=520\"></p>\n<h2 id=\"PerfectPixel\"><a href=\"#PerfectPixel\" class=\"headerlink\" title=\"PerfectPixel\"></a>PerfectPixel</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/perfectpixel-by-welldonec/dkaagdgjmgdmbnecmcefdhjekcoceebi\" target=\"_blank\" rel=\"external\">PerfectPixel</a></strong> 在开发 HTML 时，它会把半透明图像叠加在顶部，允许你在每个像素间进行比较。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-23.png?w=520\"></p>\n<h2 id=\"ZenHub\"><a href=\"#ZenHub\" class=\"headerlink\" title=\"ZenHub\"></a>ZenHub</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd\" target=\"_blank\" rel=\"external\">ZenHub</a></strong> 为 Github 项目管理应用。有节省时间的特性，如 drap-drop 任务板和 to-do 列表，帮助你提升 Github 的生产效率。<br><img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-24.png?w=520\"></p>\n<h2 id=\"Instant-Wireframe\"><a href=\"#Instant-Wireframe\" class=\"headerlink\" title=\"Instant Wireframe\"></a>Instant Wireframe</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/instant-wireframe/pmpmnmbgidlnoamkpmcikaejhmeldnha\" target=\"_blank\" rel=\"external\">Instant Wireframe</a></strong> 谁不喜欢漂亮的线框呢？它给为任何一个网页添加线框，同时本地的也可以。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-25.png?w=520\"></p>\n<h2 id=\"Minimalist-Markdown-Editor\"><a href=\"#Minimalist-Markdown-Editor\" class=\"headerlink\" title=\"Minimalist Markdown Editor\"></a>Minimalist Markdown Editor</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/minimalist-markdown-edito/pghodfjepegmciihfhdipmimghiakcjf\" target=\"_blank\" rel=\"external\">Minimalist Markdown Editor</a></strong> 同步预览 Markdown。可以快速地帮 Markdown 转化成 HTML。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-26.png?w=520\"></p>\n<h2 id=\"fb-flo\"><a href=\"#fb-flo\" class=\"headerlink\" title=\"fb-flo\"></a>fb-flo</h2><p><strong><a href=\"https://facebook.github.io/fb-flo/\" target=\"_blank\" rel=\"external\">fb-flo</a></strong> 由 Facebook 开发，同时也是 Chrome 的扩展应用。使你能够在线编辑 JS，CSS，images 或任何静态资源。</p>\n<h2 id=\"Web-Developer\"><a href=\"#Web-Developer\" class=\"headerlink\" title=\"Web Developer\"></a>Web Developer</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm\" target=\"_blank\" rel=\"external\">Web Developer</a></strong> 如果你现在还没用这个应用，赶紧吧。这是迄今为止最受欢迎的 Chrome 和 Firefox 开发人员扩展应用。它添加了一个超级有用工具到浏览器，每个网页设计师和开发人员，还有你可能甚至不知道你需要的都会需要。</p>\n<h2 id=\"MySQL-Admin\"><a href=\"#MySQL-Admin\" class=\"headerlink\" title=\"MySQL Admin\"></a>MySQL Admin</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/chrome-mysql-admin/ndgnpnpakfcdjmpgmcaknimfgcldechn\" target=\"_blank\" rel=\"external\">MySQL Admin</a></strong> 为你更好地，更简单地管理 MySQL 数据库。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-29.png?w=520\"></p>\n<h1 id=\"完毕！\"><a href=\"#完毕！\" class=\"headerlink\" title=\"完毕！\"></a>完毕！</h1><p>想要获取更多的 Chrome 扩展应用，请看 <a href=\"http://devtoolstips.com/\" target=\"_blank\" rel=\"external\">DevTools Tips</a>，这里收集了 Chrome 的开发工具集和基本使用方法。如果你是一个设计师或开发人员，想获取更新最新的设计和开发资讯，请访问 Chrome 的扩展应用 <a href=\"https://chrome.google.com/webstore/detail/muzli-design-breakfast/glcipcfhmopcgidicgdociohdoicpdfc\" target=\"_blank\" rel=\"external\">Muzli</a> 或 <a href=\"https://chrome.google.com/webstore/detail/panda-4-news-inspiration/haafibkemckmbknhfkiiniobjpgkebko\" target=\"_blank\" rel=\"external\">Panda</a>。</p>\n<p>如果你正在寻找 Firefox 的扩展应用，请看：<a href=\"http://speckyboy.com/2011/05/03/20-essential-firefox-4-addonsextensions-for-web-developers/\" target=\"_blank\" rel=\"external\">对于 Web 开发非常有用的 20 个 Firefox 扩展应用</a>。</p>\n<p>之前还有一篇发布在 <a href=\"http://speckyboy.com/\" target=\"_blank\" rel=\"external\">Speckyboy Design Magazine</a> 上的文章是<a href=\"http://speckyboy.com/2015/12/03/chrome-extensions-web-designers-developers/\" target=\"_blank\" rel=\"external\">对于 Web 设计师和开发者非常有用的 20 个 Chrome 扩展应用</a>。</p>\n<p><a href=\"http://p2html.com/blog/25-chrome-extensions-for-web-designers-developers/\" target=\"_blank\" rel=\"external\"><strong>原文链接</strong></a></p>\n","excerpt":"<p>尽管 Chrome 的开发者工具给你足够多的实用工具来覆盖你的设计和开发需求，但也可以通过添加免费的扩展应用去进一步扩展浏览器的功能。根据你的需要，并选择完美的扩展，你可以轻松地创建一个个性化的开发环境，这会大大提高你的开发效率。</p>\n<p>要介绍的 25 个 Chrome 扩展应该我们为你选择分为以下几类：<a href=\"#前端扩展\">前端扩展</a>，<a href=\"#在线编辑\">在线编辑</a>，<a href=\"#验证器与性能相关\">验证器与性能相关</a>，<a href=\"#测量扩展应用\">测量扩展应用</a>，<a href=\"#颜色工具\">颜色工具</a>，<a href=\"#字体测试工具\">字体测试工具</a>和 <a href=\"#很有用的实用性扩展应用\">很有用的实用性扩展应用</a>。</p>\n<h1 id=\"前端扩展\"><a href=\"#前端扩展\" class=\"headerlink\" title=\"前端扩展\"></a>前端扩展</h1><h2 id=\"SnappySnippet\"><a href=\"#SnappySnippet\" class=\"headerlink\" title=\"SnappySnippet\"></a>SnappySnippet</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/snappysnippet/blfngdefapoapkcdibbdkigpeaffgcil?hl=en\">SnappySnippet</a></strong> 把 CSS 和 HTML 从 DOM 树里提取出来，然后发送到 CodePen，jsFiddle 或 JS Bin 上。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-01.png?w=520\" /></p>\n<h2 id=\"MagiCSS\"><a href=\"#MagiCSS\" class=\"headerlink\" title=\"MagiCSS\"></a>MagiCSS</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/magicss-live-css-editor/ifhikkcafabcgolfjegfcgloomalapol?hl=en\">MagiCSS</a></strong> 一个拥有内置编辑器的在线 CSS 编辑扩展应用，具有美化和减小 CSS 的功能。同时还允许创建 Github Gist。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-02.png?w=520\" /></p>\n<h2 id=\"CSS-Dig\"><a href=\"#CSS-Dig\" class=\"headerlink\" title=\"CSS Dig\"></a>CSS Dig</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/css-dig/lpnhmlhomomelfkcjnkcacofhmggjmco\">CSS Dig</a></strong> 能够在大多数的网站上找到和组织样式表和样式块，给你一个简单的方法来分析和计划重构的代码。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-03.png?w=520\" /></p>\n<h2 id=\"CSSViewer\"><a href=\"#CSSViewer\" class=\"headerlink\" title=\"CSSViewer\"></a>CSSViewer</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/cssviewer/ggfgijbpiheegefliciemofobhmofgce?hl=en\">CSSViewer</a></strong> 能集成很多工具和扩展程序去执行一个简单的任务。这使得它们更好地发挥功能。但没有 Chrome 扩展应用集合能在不集成的情况下可以完成这种功能。用法很简单，你只需点击工具栏的图标，然后将鼠标移到你想审查的元素上就可以了。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-04.png?w=520\" /></p>","more":"<h2 id=\"CSS-Shack\"><a href=\"#CSS-Shack\" class=\"headerlink\" title=\"CSS-Shack\"></a>CSS-Shack</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/css-shack/geiccgjkigajaicecnhdokggninehdlp\">CSS-Shack</a></strong> 帮助你创建图层样式（就像你用如 PS 一样），并能生成一个 CSS 文件。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-05.png?w=520\" /></p>\n<h2 id=\"CSS3-Generator\"><a href=\"#CSS3-Generator\" class=\"headerlink\" title=\"CSS3 Generator\"></a>CSS3 Generator</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/css3-generator/dmlgmehijaodgkkooghkknjjkddahmej?hl=en-GB\">CSS3 Generator</a></strong> 如名，可以帮助你生成 CSS3 代码。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-06.png?w=520\" /></p>\n<h2 id=\"CSS-Shapes-Editor\"><a href=\"#CSS-Shapes-Editor\" class=\"headerlink\" title=\"CSS Shapes Editor\"></a>CSS Shapes Editor</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/css-shapes-editor/nenndldnbcncjmeacmnondmkkfedmgmp\">CSS Shapes Editor</a></strong> 在线编辑 CSS 形状的值。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-07.png?w=520\" /></p>\n<h1 id=\"在线编辑\"><a href=\"#在线编辑\" class=\"headerlink\" title=\"在线编辑\"></a>在线编辑</h1><h2 id=\"WordPress-Style-Editor\"><a href=\"#WordPress-Style-Editor\" class=\"headerlink\" title=\"WordPress Style Editor\"></a>WordPress Style Editor</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/wordpress-style-editor/bgdpllcnhcmpfcheafdhimpklhjoommn?hl=en\">WordPress Style Editor</a></strong> 支持在线审查和编辑你的 WordPress 的样式。<br><img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-08.png?w=520\" /></p>\n<h2 id=\"PageEdit\"><a href=\"#PageEdit\" class=\"headerlink\" title=\"PageEdit\"></a>PageEdit</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/pageedit/ebkclgoaabaibghklgknnjdemknjaeic\">PageEdit</a></strong> 能把 Chrome 变成所见即所得的编辑器，你可以用它编辑任何网页。</p>\n<iframe width=\"640\" height=\"400\" src=\"https://www.youtube.com/embed/Ts4bSR1hpxg\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h1 id=\"验证器与性能相关\"><a href=\"#验证器与性能相关\" class=\"headerlink\" title=\"验证器与性能相关\"></a>验证器与性能相关</h1><h2 id=\"Perfmap\"><a href=\"#Perfmap\" class=\"headerlink\" title=\"Perfmap\"></a>Perfmap</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/perfmap/hgpnhiajcdppfbogcpfdgcceepgkhdmk?hl=en&amp;gl=GB\">Perfmap</a></strong> 它用 Resource Timing API 来创建一个网站的前端的性能的热图检查的定时器，使得可以在浏览器中查看加载的资源。<br><img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-12.png?w=520\" /></p>\n<h2 id=\"Validity\"><a href=\"#Validity\" class=\"headerlink\" title=\"Validity\"></a>Validity</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/validity/bbicmjjbohdfglopkidebfccilipgeif?hl=en-GB\">Validity</a></strong> 帮助你验证任何一个网页。可以在 console 页查看错误的数量和详情。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-13.png?w=520\" /></p>\n<h2 id=\"Web-Developer-Checklist\"><a href=\"#Web-Developer-Checklist\" class=\"headerlink\" title=\"Web Developer Checklist\"></a>Web Developer Checklist</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/web-developer-checklist/iahamcpedabephpcgkeikbclmaljebjp\">Web Developer Checklist</a></strong> 必备的扩展应用，可以查看任何一个网页的报错和反常的问题。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-10.png?w=520\" /></p>\n<h2 id=\"Bootlint-This-Page\"><a href=\"#Bootlint-This-Page\" class=\"headerlink\" title=\"Bootlint This Page\"></a>Bootlint This Page</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/bootlint-this-page/cnamjhcdoadndjpjodeclalnmfhkoepb?hl=en&amp;gl=GB\">Bootlint This Page</a></strong> 在 Chrome 浏览器上显示一个按钮，帮助你查看任何一个基于 BootStrap 的网页的报错。可以在 console 页查看。<br><img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-11.png?w=520\" /></p>\n<h2 id=\"Check-My-Links\"><a href=\"#Check-My-Links\" class=\"headerlink\" title=\"Check My Links\"></a>Check My Links</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/check-my-links/ojkcdipcgfaekbeaelaapakgnjflfglf\">Check My Links</a></strong> 扫描网页，并把链接以高亮显示，有效为绿色，无效为红色。没人会喜欢无效的链接！<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-27.png?w=520\" /></p>\n<h1 id=\"测量扩展应用\"><a href=\"#测量扩展应用\" class=\"headerlink\" title=\"测量扩展应用\"></a>测量扩展应用</h1><h2 id=\"Page-Ruler\"><a href=\"#Page-Ruler\" class=\"headerlink\" title=\"Page Ruler\"></a>Page Ruler</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn?hl=en\">Page Ruler</a></strong> 能够在任何网上形成一个画尺，并显示元素的 width，height 和 position。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-14.png?w=520\" /></p>\n<h2 id=\"Dimensions\"><a href=\"#Dimensions\" class=\"headerlink\" title=\"Dimensions\"></a>Dimensions</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/dimensions/baocaagndhipibgklemoalmkljaimfdj\">Dimensions</a></strong> 简单且使用的工具，为你测量屏幕宽度和高度。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-15.png?w=520\" /></p>\n<h1 id=\"颜色工具\"><a href=\"#颜色工具\" class=\"headerlink\" title=\"颜色工具\"></a>颜色工具</h1><h2 id=\"ColorZilla\"><a href=\"#ColorZilla\" class=\"headerlink\" title=\"ColorZilla\"></a>ColorZilla</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp\">ColorZilla</a></strong> 起源于 Firefox，但它为 Chrome 增加了多种颜色工具，像吸管，颜色选择器，调色板查看器和梯度生成器。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-17.png?w=520\" /></p>\n<h2 id=\"Color-Tab\"><a href=\"#Color-Tab\" class=\"headerlink\" title=\"Color Tab\"></a>Color Tab</h2><p><strong><a href=\"http://colorhunt.co/tab/\">Color Tab</a></strong> 在你每次打开一个新标签时，会给你一个美丽的新配色方案。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-18.png?w=520\" /></p>\n<h1 id=\"字体测试工具\"><a href=\"#字体测试工具\" class=\"headerlink\" title=\"字体测试工具\"></a>字体测试工具</h1><h2 id=\"Fontface-Ninja\"><a href=\"#Fontface-Ninja\" class=\"headerlink\" title=\"Fontface Ninja\"></a>Fontface Ninja</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/fontface-ninja/eljapbgkmlngdpckoiiibecpemleclhh\">Fontface Ninja</a></strong> 可以识别任何网页的字体，同时给出它的 size 和 line-spacing。帮助你测试和探索新的字体。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-19.png?w=520\" /></p>\n<h2 id=\"Font-Playground\"><a href=\"#Font-Playground\" class=\"headerlink\" title=\"Font Playground\"></a>Font Playground</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/font-playground/hdpmpnhaoddjelneingmbnhaibbmjgno?hl=en\">Font Playground</a></strong> 在任何网页上预览 Google 成千上万的字体。<br><img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-20.png?w=520\" /></p>\n<h2 id=\"TypeWonder\"><a href=\"#TypeWonder\" class=\"headerlink\" title=\"TypeWonder\"></a>TypeWonder</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/typewonder/ohgmapelghofmbacalgamfbejaghdilh\">TypeWonder</a></strong> 允许你在任何网站测试 web 字体。输入站点 URL 就可以立马预览字体。<br><img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-21.png?w=520\" /></p>\n<h1 id=\"很有用的实用性扩展应用\"><a href=\"#很有用的实用性扩展应用\" class=\"headerlink\" title=\"很有用的实用性扩展应用\"></a>很有用的实用性扩展应用</h1><h2 id=\"Responsive-Web-Design-Tester\"><a href=\"#Responsive-Web-Design-Tester\" class=\"headerlink\" title=\"Responsive Web Design Tester\"></a>Responsive Web Design Tester</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/responsive-web-design-tes/objclahbaimlfnbjdeobicmmlnbhamkg?hl=en\">Responsive Web Design Tester</a></strong> 是一个简单的工具，来帮助快速、轻松地测试网站在大多数流行的移动设备上的响应。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-22.png?w=520\" /></p>\n<h2 id=\"45to75\"><a href=\"#45to75\" class=\"headerlink\" title=\"45to75\"></a>45to75</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/45to75/efmppndinjbljeellfdkpghgblenbcdd\">45to75</a></strong> 为保证在所有大小设备上，你的文字是可读的。它可以帮你把句子规定在 45 到 75 个字符之间，从而优化句子长度。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-16.png?w=520\" /></p>\n<h2 id=\"PerfectPixel\"><a href=\"#PerfectPixel\" class=\"headerlink\" title=\"PerfectPixel\"></a>PerfectPixel</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/perfectpixel-by-welldonec/dkaagdgjmgdmbnecmcefdhjekcoceebi\">PerfectPixel</a></strong> 在开发 HTML 时，它会把半透明图像叠加在顶部，允许你在每个像素间进行比较。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-23.png?w=520\" /></p>\n<h2 id=\"ZenHub\"><a href=\"#ZenHub\" class=\"headerlink\" title=\"ZenHub\"></a>ZenHub</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd\">ZenHub</a></strong> 为 Github 项目管理应用。有节省时间的特性，如 drap-drop 任务板和 to-do 列表，帮助你提升 Github 的生产效率。<br><img src=\"http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-24.png?w=520\" /></p>\n<h2 id=\"Instant-Wireframe\"><a href=\"#Instant-Wireframe\" class=\"headerlink\" title=\"Instant Wireframe\"></a>Instant Wireframe</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/instant-wireframe/pmpmnmbgidlnoamkpmcikaejhmeldnha\">Instant Wireframe</a></strong> 谁不喜欢漂亮的线框呢？它给为任何一个网页添加线框，同时本地的也可以。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-25.png?w=520\" /></p>\n<h2 id=\"Minimalist-Markdown-Editor\"><a href=\"#Minimalist-Markdown-Editor\" class=\"headerlink\" title=\"Minimalist Markdown Editor\"></a>Minimalist Markdown Editor</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/minimalist-markdown-edito/pghodfjepegmciihfhdipmimghiakcjf\">Minimalist Markdown Editor</a></strong> 同步预览 Markdown。可以快速地帮 Markdown 转化成 HTML。<br><img src=\"http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-26.png?w=520\" /></p>\n<h2 id=\"fb-flo\"><a href=\"#fb-flo\" class=\"headerlink\" title=\"fb-flo\"></a>fb-flo</h2><p><strong><a href=\"https://facebook.github.io/fb-flo/\">fb-flo</a></strong> 由 Facebook 开发，同时也是 Chrome 的扩展应用。使你能够在线编辑 JS，CSS，images 或任何静态资源。</p>\n<h2 id=\"Web-Developer\"><a href=\"#Web-Developer\" class=\"headerlink\" title=\"Web Developer\"></a>Web Developer</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm\">Web Developer</a></strong> 如果你现在还没用这个应用，赶紧吧。这是迄今为止最受欢迎的 Chrome 和 Firefox 开发人员扩展应用。它添加了一个超级有用工具到浏览器，每个网页设计师和开发人员，还有你可能甚至不知道你需要的都会需要。</p>\n<h2 id=\"MySQL-Admin\"><a href=\"#MySQL-Admin\" class=\"headerlink\" title=\"MySQL Admin\"></a>MySQL Admin</h2><p><strong><a href=\"https://chrome.google.com/webstore/detail/chrome-mysql-admin/ndgnpnpakfcdjmpgmcaknimfgcldechn\">MySQL Admin</a></strong> 为你更好地，更简单地管理 MySQL 数据库。<br><img src=\"http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-29.png?w=520\" /></p>\n<h1 id=\"完毕！\"><a href=\"#完毕！\" class=\"headerlink\" title=\"完毕！\"></a>完毕！</h1><p>想要获取更多的 Chrome 扩展应用，请看 <a href=\"http://devtoolstips.com/\">DevTools Tips</a>，这里收集了 Chrome 的开发工具集和基本使用方法。如果你是一个设计师或开发人员，想获取更新最新的设计和开发资讯，请访问 Chrome 的扩展应用 <a href=\"https://chrome.google.com/webstore/detail/muzli-design-breakfast/glcipcfhmopcgidicgdociohdoicpdfc\">Muzli</a> 或 <a href=\"https://chrome.google.com/webstore/detail/panda-4-news-inspiration/haafibkemckmbknhfkiiniobjpgkebko\">Panda</a>。</p>\n<p>如果你正在寻找 Firefox 的扩展应用，请看：<a href=\"http://speckyboy.com/2011/05/03/20-essential-firefox-4-addonsextensions-for-web-developers/\">对于 Web 开发非常有用的 20 个 Firefox 扩展应用</a>。</p>\n<p>之前还有一篇发布在 <a href=\"http://speckyboy.com/\">Speckyboy Design Magazine</a> 上的文章是<a href=\"http://speckyboy.com/2015/12/03/chrome-extensions-web-designers-developers/\">对于 Web 设计师和开发者非常有用的 20 个 Chrome 扩展应用</a>。</p>\n<p><a href=\"http://p2html.com/blog/25-chrome-extensions-for-web-designers-developers/\"><strong>原文链接</strong></a></p>","sticky":0},{"title":"博客的新版布局","date":"2015-12-01T06:12:53.000Z","_content":"\n今天兴致勃勃去查看了下 Next 主题的更新，发现已经有了新的版本，而且布局也更新了。所以马上就试了试，先来看看变化：\n\n#### 旧版\n![old-main](/blog/images/article_img/old-1.png)\n\n<!-- more -->\n\n![old-detail](/blog/images/article_img/old-2.png)\n\n#### 新版\n![new-main](/blog/images/article_img/new-1.png)\n![new-detail](/blog/images/article_img/new-2.png)\n\n## 主要改动\n * 修改了 `header` 的位置和布局\n * 添加了 FontAwsome 的图标\n * 将一部分站点配置，转到 theme 下的 `_config.yml` 中，如：第三方服务等\n * 添加了`阅读次数`字段：`leancloud_visitors`\n * FaceBook SDK 支持：`facebook_sdk`\n * ...\n\n很有很多有趣的变化可以自己去发现，有任何疑问或建议可以在下面评论！\n同时你也可以去[ NexT 作者的博客](http://notes.iissnan.com/)提问。\n","source":"_posts/article-11.md","raw":"title: 博客的新版布局\ndate: 2015-12-01 14:12:53\ncategories:\n  - 杂谈\ntags:\n  - blog\n  - next\n  - hexo\n  - pisces\n---\n\n今天兴致勃勃去查看了下 Next 主题的更新，发现已经有了新的版本，而且布局也更新了。所以马上就试了试，先来看看变化：\n\n#### 旧版\n![old-main](/blog/images/article_img/old-1.png)\n\n<!-- more -->\n\n![old-detail](/blog/images/article_img/old-2.png)\n\n#### 新版\n![new-main](/blog/images/article_img/new-1.png)\n![new-detail](/blog/images/article_img/new-2.png)\n\n## 主要改动\n * 修改了 `header` 的位置和布局\n * 添加了 FontAwsome 的图标\n * 将一部分站点配置，转到 theme 下的 `_config.yml` 中，如：第三方服务等\n * 添加了`阅读次数`字段：`leancloud_visitors`\n * FaceBook SDK 支持：`facebook_sdk`\n * ...\n\n很有很多有趣的变化可以自己去发现，有任何疑问或建议可以在下面评论！\n同时你也可以去[ NexT 作者的博客](http://notes.iissnan.com/)提问。\n","slug":"article-11","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7em40007wnprl0y4n91w","content":"<p>今天兴致勃勃去查看了下 Next 主题的更新，发现已经有了新的版本，而且布局也更新了。所以马上就试了试，先来看看变化：</p>\n<h4 id=\"旧版\"><a href=\"#旧版\" class=\"headerlink\" title=\"旧版\"></a>旧版</h4><p><img src=\"/blog/images/article_img/old-1.png\" alt=\"old-main\"></p>\n<a id=\"more\"></a>\n<p><img src=\"/blog/images/article_img/old-2.png\" alt=\"old-detail\"></p>\n<h4 id=\"新版\"><a href=\"#新版\" class=\"headerlink\" title=\"新版\"></a>新版</h4><p><img src=\"/blog/images/article_img/new-1.png\" alt=\"new-main\"><br><img src=\"/blog/images/article_img/new-2.png\" alt=\"new-detail\"></p>\n<h2 id=\"主要改动\"><a href=\"#主要改动\" class=\"headerlink\" title=\"主要改动\"></a>主要改动</h2><ul>\n<li>修改了 <code>header</code> 的位置和布局</li>\n<li>添加了 FontAwsome 的图标</li>\n<li>将一部分站点配置，转到 theme 下的 <code>_config.yml</code> 中，如：第三方服务等</li>\n<li>添加了<code>阅读次数</code>字段：<code>leancloud_visitors</code></li>\n<li>FaceBook SDK 支持：<code>facebook_sdk</code></li>\n<li>…</li>\n</ul>\n<p>很有很多有趣的变化可以自己去发现，有任何疑问或建议可以在下面评论！<br>同时你也可以去<a href=\"http://notes.iissnan.com/\" target=\"_blank\" rel=\"external\"> NexT 作者的博客</a>提问。</p>\n","excerpt":"<p>今天兴致勃勃去查看了下 Next 主题的更新，发现已经有了新的版本，而且布局也更新了。所以马上就试了试，先来看看变化：</p>\n<h4 id=\"旧版\"><a href=\"#旧版\" class=\"headerlink\" title=\"旧版\"></a>旧版</h4><p><img src=\"/blog/images/article_img/old-1.png\" alt=\"old-main\"></p>","more":"<p><img src=\"/blog/images/article_img/old-2.png\" alt=\"old-detail\"></p>\n<h4 id=\"新版\"><a href=\"#新版\" class=\"headerlink\" title=\"新版\"></a>新版</h4><p><img src=\"/blog/images/article_img/new-1.png\" alt=\"new-main\"><br><img src=\"/blog/images/article_img/new-2.png\" alt=\"new-detail\"></p>\n<h2 id=\"主要改动\"><a href=\"#主要改动\" class=\"headerlink\" title=\"主要改动\"></a>主要改动</h2><ul>\n<li>修改了 <code>header</code> 的位置和布局</li>\n<li>添加了 FontAwsome 的图标</li>\n<li>将一部分站点配置，转到 theme 下的 <code>_config.yml</code> 中，如：第三方服务等</li>\n<li>添加了<code>阅读次数</code>字段：<code>leancloud_visitors</code></li>\n<li>FaceBook SDK 支持：<code>facebook_sdk</code></li>\n<li>…</li>\n</ul>\n<p>很有很多有趣的变化可以自己去发现，有任何疑问或建议可以在下面评论！<br>同时你也可以去<a href=\"http://notes.iissnan.com/\"> NexT 作者的博客</a>提问。</p>","sticky":0},{"title":"ReactJS 的学习教程","date":"2015-12-07T01:48:17.000Z","_content":"<img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/reactjs-tutorials.jpg\" />\n\n当提到为某个应用或网站构建 UI 时，ReactJS 往往是首先列出的最好的 JavaScript 库。首先它是开源的，并且已经在 Instagram 和 Facebook 上得到实践。还有一些著名的网站也使用 ReactJS 去构建他们的 UI，例如 Airbnb，Khan Academy，BBC，Netflix [等等](https://github.com/facebook/react/wiki/Sites-Using-React)。\n\n如果你仍然在学习 ReactJS 的路上，并用它构建动态的用户界面，这里有一些教程能帮助你加速学习进程。\n\n下面列出的是一些开发者和作者所写的一部分教程，他们能帮你从新手提升到专家。\n\n# [ReactJs.net 的教程](http://reactjs.net/getting-started/tutorial.html)\n<img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/1-reactjs-website.jpg\" />\n\n这是众多版本的 React 教程之一。这个专门为设计师和开发者去“入门” React 和探索其功能而写的。本教程涵盖了利用 ReactJS 库去创建一个全新的 asp.net MVC 网站的完整流程，并且保证了学习的深入浅出。开始一个新项目的基本流程是，安装 React，构建 component，优化等等。\n\n# [Ken Wheeler - 学习 ReactJS](https://scotch.io/tutorials/learning-react-getting-started-and-concepts)\n<img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/2-scothio-reactjs.jpg\" />\n\n这是 Ken Wheeler 在 Scotch.io 上发表的一篇很棒的教程。在去年发表的时候至今，已经有超过 200 条的分享，当然这些也只有在开发者社区圈里才会对此感兴趣。可以说这是目前找到的 ReactJS 最好的教程之一。此教程主要分为五个部分，从基础开始，涵盖了**什么是 React**，**虚拟 DOM 是如何工作的**，**如何构建页面**，**生命周期的说明**和 **state** 等。\n\n<!-- more -->\n\n第二部分则介绍了一些高级的概念，例如 Flux，dispatcher，视图控制器的依赖等等。第三，第四和第五部分主要是用 30 分钟去教你如何开发一个具有购物车的 ReactJS 应用，构建一个实时的 Twitter 流，以及开发一个移动应用。\n\n# [Jack Callister - React 的快速入门](http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html)\n<img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/3-codementor-tutorial.jpg\" />\n\n如果你正在寻找一个如何使用 React 库的快速指南，这会是一个很好的地方。这篇文章发布在 Jack Callister 的个人博客中。这篇文章并是不是很出名，但它对于学习基础知识已经足够了。作者写时主要描述 react element，component，JSX 和虚拟 DOM 的基础概念。当你理解了这些概念，就可以很轻松地构建一系列的用户界面。作者首先解释了渲染，然后是 component，props，state 和合成。\n\n本文的另一个观点是，它充满了有用的工具链接，ReactJS 资源和信息。ReactJs 的初学者绝对值得一读!\n\n# [Leveluptuts - React for Everyone](http://leveluptuts.com/tutorials/react-for-everyone)\n<img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/4-levelup-tutorials.jpg\" />\n\n此教程的本质是提供给任何一个学习 ReactJS 的人，无论是初学者还是高手。这里面有一系列的视频来做介绍，并且涵盖了入门和理解这个库的基础知识。\n\n在第二章中我们会得到很有趣的部分，教你如何构建你的第一个 react 组件。其余章节包含了 **react component properties**，JSX 的条件语句，父子组件的关系和使用 state。这些都是必看的视频。\n\n# [ReactJS 入门级教程](https://blog.risingstack.com/the-react-way-getting-started-tutorial/)\n<img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/5-risingstack-reactjs.jpg\" />\n\n这是入门 ReactJS 的另一个很好的教程。这是只是三部分的第一部分。对于新人学习基础知识而言这是很棒的一部分。开始介绍了什么是 React，虚拟 DOM 的概念，然后就是如何在服务端做渲染，组件驱动的开发，还有一点关于 JSX 和有用的链接等。\n\n这其实是一个“入门级”课程的详细教程。在开发 ReactJS 的过程中确保你都看了这些非常有用的资源！\n\n[**原文链接**](http://www.logopearl.com/blog/best-tutorials-to-learn-reactjs/)","source":"_posts/article-13.md","raw":"title: ReactJS 的学习教程\ndate: 2015-12-07 09:48:17\ncategories:\n  - 好文分享\ntags:\n  - 译文\n  - ReactJS\n  - 教程\n  - Tutorials\n  - getting started lesson\n---\n<img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/reactjs-tutorials.jpg\" />\n\n当提到为某个应用或网站构建 UI 时，ReactJS 往往是首先列出的最好的 JavaScript 库。首先它是开源的，并且已经在 Instagram 和 Facebook 上得到实践。还有一些著名的网站也使用 ReactJS 去构建他们的 UI，例如 Airbnb，Khan Academy，BBC，Netflix [等等](https://github.com/facebook/react/wiki/Sites-Using-React)。\n\n如果你仍然在学习 ReactJS 的路上，并用它构建动态的用户界面，这里有一些教程能帮助你加速学习进程。\n\n下面列出的是一些开发者和作者所写的一部分教程，他们能帮你从新手提升到专家。\n\n# [ReactJs.net 的教程](http://reactjs.net/getting-started/tutorial.html)\n<img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/1-reactjs-website.jpg\" />\n\n这是众多版本的 React 教程之一。这个专门为设计师和开发者去“入门” React 和探索其功能而写的。本教程涵盖了利用 ReactJS 库去创建一个全新的 asp.net MVC 网站的完整流程，并且保证了学习的深入浅出。开始一个新项目的基本流程是，安装 React，构建 component，优化等等。\n\n# [Ken Wheeler - 学习 ReactJS](https://scotch.io/tutorials/learning-react-getting-started-and-concepts)\n<img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/2-scothio-reactjs.jpg\" />\n\n这是 Ken Wheeler 在 Scotch.io 上发表的一篇很棒的教程。在去年发表的时候至今，已经有超过 200 条的分享，当然这些也只有在开发者社区圈里才会对此感兴趣。可以说这是目前找到的 ReactJS 最好的教程之一。此教程主要分为五个部分，从基础开始，涵盖了**什么是 React**，**虚拟 DOM 是如何工作的**，**如何构建页面**，**生命周期的说明**和 **state** 等。\n\n<!-- more -->\n\n第二部分则介绍了一些高级的概念，例如 Flux，dispatcher，视图控制器的依赖等等。第三，第四和第五部分主要是用 30 分钟去教你如何开发一个具有购物车的 ReactJS 应用，构建一个实时的 Twitter 流，以及开发一个移动应用。\n\n# [Jack Callister - React 的快速入门](http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html)\n<img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/3-codementor-tutorial.jpg\" />\n\n如果你正在寻找一个如何使用 React 库的快速指南，这会是一个很好的地方。这篇文章发布在 Jack Callister 的个人博客中。这篇文章并是不是很出名，但它对于学习基础知识已经足够了。作者写时主要描述 react element，component，JSX 和虚拟 DOM 的基础概念。当你理解了这些概念，就可以很轻松地构建一系列的用户界面。作者首先解释了渲染，然后是 component，props，state 和合成。\n\n本文的另一个观点是，它充满了有用的工具链接，ReactJS 资源和信息。ReactJs 的初学者绝对值得一读!\n\n# [Leveluptuts - React for Everyone](http://leveluptuts.com/tutorials/react-for-everyone)\n<img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/4-levelup-tutorials.jpg\" />\n\n此教程的本质是提供给任何一个学习 ReactJS 的人，无论是初学者还是高手。这里面有一系列的视频来做介绍，并且涵盖了入门和理解这个库的基础知识。\n\n在第二章中我们会得到很有趣的部分，教你如何构建你的第一个 react 组件。其余章节包含了 **react component properties**，JSX 的条件语句，父子组件的关系和使用 state。这些都是必看的视频。\n\n# [ReactJS 入门级教程](https://blog.risingstack.com/the-react-way-getting-started-tutorial/)\n<img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/5-risingstack-reactjs.jpg\" />\n\n这是入门 ReactJS 的另一个很好的教程。这是只是三部分的第一部分。对于新人学习基础知识而言这是很棒的一部分。开始介绍了什么是 React，虚拟 DOM 的概念，然后就是如何在服务端做渲染，组件驱动的开发，还有一点关于 JSX 和有用的链接等。\n\n这其实是一个“入门级”课程的详细教程。在开发 ReactJS 的过程中确保你都看了这些非常有用的资源！\n\n[**原文链接**](http://www.logopearl.com/blog/best-tutorials-to-learn-reactjs/)","slug":"article-13","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7em70009wnprcshecd1d","content":"<p><img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/reactjs-tutorials.jpg\"></p>\n<p>当提到为某个应用或网站构建 UI 时，ReactJS 往往是首先列出的最好的 JavaScript 库。首先它是开源的，并且已经在 Instagram 和 Facebook 上得到实践。还有一些著名的网站也使用 ReactJS 去构建他们的 UI，例如 Airbnb，Khan Academy，BBC，Netflix <a href=\"https://github.com/facebook/react/wiki/Sites-Using-React\" target=\"_blank\" rel=\"external\">等等</a>。</p>\n<p>如果你仍然在学习 ReactJS 的路上，并用它构建动态的用户界面，这里有一些教程能帮助你加速学习进程。</p>\n<p>下面列出的是一些开发者和作者所写的一部分教程，他们能帮你从新手提升到专家。</p>\n<h1 id=\"ReactJs-net-的教程\"><a href=\"#ReactJs-net-的教程\" class=\"headerlink\" title=\"ReactJs.net 的教程\"></a><a href=\"http://reactjs.net/getting-started/tutorial.html\" target=\"_blank\" rel=\"external\">ReactJs.net 的教程</a></h1><p><img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/1-reactjs-website.jpg\"></p>\n<p>这是众多版本的 React 教程之一。这个专门为设计师和开发者去“入门” React 和探索其功能而写的。本教程涵盖了利用 ReactJS 库去创建一个全新的 asp.net MVC 网站的完整流程，并且保证了学习的深入浅出。开始一个新项目的基本流程是，安装 React，构建 component，优化等等。</p>\n<h1 id=\"Ken-Wheeler-学习-ReactJS\"><a href=\"#Ken-Wheeler-学习-ReactJS\" class=\"headerlink\" title=\"Ken Wheeler - 学习 ReactJS\"></a><a href=\"https://scotch.io/tutorials/learning-react-getting-started-and-concepts\" target=\"_blank\" rel=\"external\">Ken Wheeler - 学习 ReactJS</a></h1><p><img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/2-scothio-reactjs.jpg\"></p>\n<p>这是 Ken Wheeler 在 Scotch.io 上发表的一篇很棒的教程。在去年发表的时候至今，已经有超过 200 条的分享，当然这些也只有在开发者社区圈里才会对此感兴趣。可以说这是目前找到的 ReactJS 最好的教程之一。此教程主要分为五个部分，从基础开始，涵盖了<strong>什么是 React</strong>，<strong>虚拟 DOM 是如何工作的</strong>，<strong>如何构建页面</strong>，<strong>生命周期的说明</strong>和 <strong>state</strong> 等。</p>\n<a id=\"more\"></a>\n<p>第二部分则介绍了一些高级的概念，例如 Flux，dispatcher，视图控制器的依赖等等。第三，第四和第五部分主要是用 30 分钟去教你如何开发一个具有购物车的 ReactJS 应用，构建一个实时的 Twitter 流，以及开发一个移动应用。</p>\n<h1 id=\"Jack-Callister-React-的快速入门\"><a href=\"#Jack-Callister-React-的快速入门\" class=\"headerlink\" title=\"Jack Callister - React 的快速入门\"></a><a href=\"http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html\" target=\"_blank\" rel=\"external\">Jack Callister - React 的快速入门</a></h1><p><img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/3-codementor-tutorial.jpg\"></p>\n<p>如果你正在寻找一个如何使用 React 库的快速指南，这会是一个很好的地方。这篇文章发布在 Jack Callister 的个人博客中。这篇文章并是不是很出名，但它对于学习基础知识已经足够了。作者写时主要描述 react element，component，JSX 和虚拟 DOM 的基础概念。当你理解了这些概念，就可以很轻松地构建一系列的用户界面。作者首先解释了渲染，然后是 component，props，state 和合成。</p>\n<p>本文的另一个观点是，它充满了有用的工具链接，ReactJS 资源和信息。ReactJs 的初学者绝对值得一读!</p>\n<h1 id=\"Leveluptuts-React-for-Everyone\"><a href=\"#Leveluptuts-React-for-Everyone\" class=\"headerlink\" title=\"Leveluptuts - React for Everyone\"></a><a href=\"http://leveluptuts.com/tutorials/react-for-everyone\" target=\"_blank\" rel=\"external\">Leveluptuts - React for Everyone</a></h1><p><img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/4-levelup-tutorials.jpg\"></p>\n<p>此教程的本质是提供给任何一个学习 ReactJS 的人，无论是初学者还是高手。这里面有一系列的视频来做介绍，并且涵盖了入门和理解这个库的基础知识。</p>\n<p>在第二章中我们会得到很有趣的部分，教你如何构建你的第一个 react 组件。其余章节包含了 <strong>react component properties</strong>，JSX 的条件语句，父子组件的关系和使用 state。这些都是必看的视频。</p>\n<h1 id=\"ReactJS-入门级教程\"><a href=\"#ReactJS-入门级教程\" class=\"headerlink\" title=\"ReactJS 入门级教程\"></a><a href=\"https://blog.risingstack.com/the-react-way-getting-started-tutorial/\" target=\"_blank\" rel=\"external\">ReactJS 入门级教程</a></h1><p><img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/5-risingstack-reactjs.jpg\"></p>\n<p>这是入门 ReactJS 的另一个很好的教程。这是只是三部分的第一部分。对于新人学习基础知识而言这是很棒的一部分。开始介绍了什么是 React，虚拟 DOM 的概念，然后就是如何在服务端做渲染，组件驱动的开发，还有一点关于 JSX 和有用的链接等。</p>\n<p>这其实是一个“入门级”课程的详细教程。在开发 ReactJS 的过程中确保你都看了这些非常有用的资源！</p>\n<p><a href=\"http://www.logopearl.com/blog/best-tutorials-to-learn-reactjs/\" target=\"_blank\" rel=\"external\"><strong>原文链接</strong></a></p>\n","excerpt":"<p><img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/reactjs-tutorials.jpg\" /></p>\n<p>当提到为某个应用或网站构建 UI 时，ReactJS 往往是首先列出的最好的 JavaScript 库。首先它是开源的，并且已经在 Instagram 和 Facebook 上得到实践。还有一些著名的网站也使用 ReactJS 去构建他们的 UI，例如 Airbnb，Khan Academy，BBC，Netflix <a href=\"https://github.com/facebook/react/wiki/Sites-Using-React\">等等</a>。</p>\n<p>如果你仍然在学习 ReactJS 的路上，并用它构建动态的用户界面，这里有一些教程能帮助你加速学习进程。</p>\n<p>下面列出的是一些开发者和作者所写的一部分教程，他们能帮你从新手提升到专家。</p>\n<h1 id=\"ReactJs-net-的教程\"><a href=\"#ReactJs-net-的教程\" class=\"headerlink\" title=\"ReactJs.net 的教程\"></a><a href=\"http://reactjs.net/getting-started/tutorial.html\">ReactJs.net 的教程</a></h1><p><img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/1-reactjs-website.jpg\" /></p>\n<p>这是众多版本的 React 教程之一。这个专门为设计师和开发者去“入门” React 和探索其功能而写的。本教程涵盖了利用 ReactJS 库去创建一个全新的 asp.net MVC 网站的完整流程，并且保证了学习的深入浅出。开始一个新项目的基本流程是，安装 React，构建 component，优化等等。</p>\n<h1 id=\"Ken-Wheeler-学习-ReactJS\"><a href=\"#Ken-Wheeler-学习-ReactJS\" class=\"headerlink\" title=\"Ken Wheeler - 学习 ReactJS\"></a><a href=\"https://scotch.io/tutorials/learning-react-getting-started-and-concepts\">Ken Wheeler - 学习 ReactJS</a></h1><p><img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/2-scothio-reactjs.jpg\" /></p>\n<p>这是 Ken Wheeler 在 Scotch.io 上发表的一篇很棒的教程。在去年发表的时候至今，已经有超过 200 条的分享，当然这些也只有在开发者社区圈里才会对此感兴趣。可以说这是目前找到的 ReactJS 最好的教程之一。此教程主要分为五个部分，从基础开始，涵盖了<strong>什么是 React</strong>，<strong>虚拟 DOM 是如何工作的</strong>，<strong>如何构建页面</strong>，<strong>生命周期的说明</strong>和 <strong>state</strong> 等。</p>","more":"<p>第二部分则介绍了一些高级的概念，例如 Flux，dispatcher，视图控制器的依赖等等。第三，第四和第五部分主要是用 30 分钟去教你如何开发一个具有购物车的 ReactJS 应用，构建一个实时的 Twitter 流，以及开发一个移动应用。</p>\n<h1 id=\"Jack-Callister-React-的快速入门\"><a href=\"#Jack-Callister-React-的快速入门\" class=\"headerlink\" title=\"Jack Callister - React 的快速入门\"></a><a href=\"http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html\">Jack Callister - React 的快速入门</a></h1><p><img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/3-codementor-tutorial.jpg\" /></p>\n<p>如果你正在寻找一个如何使用 React 库的快速指南，这会是一个很好的地方。这篇文章发布在 Jack Callister 的个人博客中。这篇文章并是不是很出名，但它对于学习基础知识已经足够了。作者写时主要描述 react element，component，JSX 和虚拟 DOM 的基础概念。当你理解了这些概念，就可以很轻松地构建一系列的用户界面。作者首先解释了渲染，然后是 component，props，state 和合成。</p>\n<p>本文的另一个观点是，它充满了有用的工具链接，ReactJS 资源和信息。ReactJs 的初学者绝对值得一读!</p>\n<h1 id=\"Leveluptuts-React-for-Everyone\"><a href=\"#Leveluptuts-React-for-Everyone\" class=\"headerlink\" title=\"Leveluptuts - React for Everyone\"></a><a href=\"http://leveluptuts.com/tutorials/react-for-everyone\">Leveluptuts - React for Everyone</a></h1><p><img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/4-levelup-tutorials.jpg\" /></p>\n<p>此教程的本质是提供给任何一个学习 ReactJS 的人，无论是初学者还是高手。这里面有一系列的视频来做介绍，并且涵盖了入门和理解这个库的基础知识。</p>\n<p>在第二章中我们会得到很有趣的部分，教你如何构建你的第一个 react 组件。其余章节包含了 <strong>react component properties</strong>，JSX 的条件语句，父子组件的关系和使用 state。这些都是必看的视频。</p>\n<h1 id=\"ReactJS-入门级教程\"><a href=\"#ReactJS-入门级教程\" class=\"headerlink\" title=\"ReactJS 入门级教程\"></a><a href=\"https://blog.risingstack.com/the-react-way-getting-started-tutorial/\">ReactJS 入门级教程</a></h1><p><img src=\"http://www.logopearl.com/blog/wp-content/uploads/2015/12/5-risingstack-reactjs.jpg\" /></p>\n<p>这是入门 ReactJS 的另一个很好的教程。这是只是三部分的第一部分。对于新人学习基础知识而言这是很棒的一部分。开始介绍了什么是 React，虚拟 DOM 的概念，然后就是如何在服务端做渲染，组件驱动的开发，还有一点关于 JSX 和有用的链接等。</p>\n<p>这其实是一个“入门级”课程的详细教程。在开发 ReactJS 的过程中确保你都看了这些非常有用的资源！</p>\n<p><a href=\"http://www.logopearl.com/blog/best-tutorials-to-learn-reactjs/\"><strong>原文链接</strong></a></p>","sticky":0},{"title":"使用 React 是业务需求，而不是技术需求","date":"2015-12-15T04:23:23.000Z","_content":"\n# 前言\n\nReact 已经在开发者圈越来越流行了，并且有很多说明其技术优势的资源。然而，迁移（或是选择）一个新的框架最终归结为向所有人推销 —— 包括非开发者。这里会有一小部分工程经理或项目经理会因为它的新颖，而选择使用它来重构，更糟的是，很多团队被 JavaScript 的高生产工具搞得焦头烂额了，可悲的是向后移动项目是向前移动 web 的一部分。这篇文章并不是试图教你关于 React 的新东西，只是试着去总结以下，起点是为了向所有人说明 React 的疑惑，不仅是开发者。\n\n**总结**：React 是一个为创建可组合的用户界面的库。同比其他类似的库如  Angular、Backbone、Knockout 和 Ember，React 的出现是为了解决业务问题而非技术的。接下来会为你解释 React 的重要性和对开发团队的益处。\n\n# 降低风险\n\n**稳定性** —— Facebook 花了很大的精力在 React 上（Newsfeed，Instagram，Messenger，Ads Marketplace 等），并且拥有专职的技术团队来维护这个项目。它的 dog-food 测试和投资都不是现有的任何一个项目能比的。除了 Facebook 内部的工程师，还有一大批 React 的爱好者。随着版本的更迭，目前在 github 上拥有 571 个贡献者（截止到 2015 年 12 月）。\n\n**正在使用 React**：AirBnB，Asana，Atlassian，BBC，Chegg，CloudFlare，CNN.com，Codecademy，Coursera，Craftsy，Dailymotion，Dropbox，Expedia，Facebook，Feedly，Flipboard，HipChat，IMDb，Imgur，Instagram，Khan Academy，KISSmetrics，Mattermark，Minerva Project，Netflix，OkCupid，Rackspace，Rally Software，Ralph Lauren，Reddit，Redfin，Salesforce，Squarespace，The New York Times，Trunk Club，Twitter，Uber，University of Cincinnati，Venmo，WhatsApp，Wired，Wix，WordPress，Yahoo，Zendesk\n\n# 开发效率\n\n**强大的路径迁移** —— React 允许开发者可以根据自己的需求将其放到任何一个已经存在的页面上。值得注意的是，React 是需要加载一个运行时的库（React 0.14.0 的大小是 39.4 kb），因此零碎的迁移会导致页面重量的增加，直到旧版本的库被移除才会减少。\n\n<!-- more -->\n\n**默认情况下的性能** —— React 的使用模式，让它很难写出低性能的代码。此外，自从它减少了与 DOM 的直接交互，使得它不仅可以代替现有的一些库（Angular/Backbone/Ember），也不再需要大量像 jQuery 一样的依赖，从而减少整体部署代码大小。\n\n**SEO** —— SEO 是从服务器发送一个已经渲染好的页面到浏览器上。React 在设计时就考虑到了 SEO，它用 Node 可以在客户端或服务端进行渲染。其他工具允许在服务端进行渲染，但需要引入一些不稳定的 hack，同时还需要大量的人员去维护。而 React 有可能简化构建工具和减少维护成本。\n\n**提高了代码的重用** —— React 在提供良好的性能同时还可以管理组件的渲染生命周期，如此一来可以显著地提高开发人员的开发效率。通过可重用组件的创造、分配和使用，使之更简单，这样开发人员就能更好地节省使用和开发通用组件的时间。就如按钮一样的低阶元素和可折叠元素一样的高阶元素。\n\n# 提高开发效率\n\n**从混合资源中降低复杂度** —— React 混合了 HTML 和 JavaScript，在此原则下，它们被紧紧地捆在一起，而分离它们是分离技术，这不是关注点。这个概念可以进一步扩展到 CSS，删除 CSS 开发过程中的一连串问题，包括全局命名、作用域/变量的隔离。详细请看：[Radium](http://projects.formidablelabs.com/radium/) 和 [React: CSS in js](https://speakerdeck.com/vjeux/react-css-in-js)。\n\n**错误的快速隔离** —— Facebook 提供了一个浏览器的[扩展应用](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)，帮助开发者更好地查看某一 UI 是由哪些 component 和数据组合生成的。详细请看[这里](https://www.youtube.com/watch?v=D-ioDiacTm8)。\n\n**简洁明了的代码** —— 当前绝大多数的工具，都是以**模型**表示数据和**视图**显示数据结合在一起，从而生成丰富的 UI 交互。通常修改一个模型或视图（例如购物车）就可能在其他视图中触发“级联变化”，同时它依赖的是相同的数据。在一个大型应用中，依赖视图会变得很复杂，而且很难修复那些意想不到的 BUG。但是在 React 中，数据的流向是单向的，因此使得视图更容易理解。下面的图是展示信息的流动。\n![stream](https://cdn-images-1.medium.com/max/800/1*pHvDgaslF8EClCehi6AiMA.png)\n\n**提高了易测性** —— 一个组件，React 的通常做法是抽象数据参数和输出一个没有其他副作用的 DOM。通过移除依赖使用和在 DOM 中创建 state 的 store，使得这些组件拥有更多的原子和可测试性。\n\n# 开发团队的效益\n\n**快捷的管理** —— React 的 API 非常小，结合声明性语法和组件化的 UI 元素使新的开发人员能更快地上手 —— 特别是刚毕业的大学生或是不熟悉前端坏境的开发者。\n\n# 案例\n\n## [Facebook Ads](http://5by5.tv/changelog/149)\n\n“It was extremely difficult to change without causing some side effect or bug somewhere else in the application … When the team rebuilt it in React they found that their rate of new bugs being introduced had gone through the floor”\n\n-Spencer Ahrens\n\n“When a bug did come in it was much easier to figure out what was going wrong and make a targeted fix”\n\n-Spencer Ahrens\n\n## [Netflix](http://techblog.netflix.com/2015/01/netflix-likes-react.html)\n\n“React has exceeded our requirements and enabled us to build a tremendous foundation on which to innovate the Netflix experience”\n\n## [Hit Chat](https://developer.atlassian.com/blog/2015/02/rebuilding-hipchat-with-react/)\n\n“The dev speed we’ve gained…proves that we can release new client features faster and with more confidence on this platform than on any native client.”\n\n[**原文链接**](https://blog.formidable.com/using-react-is-a-business-decision-not-a-technology-choice-63c4641c5f7#.o7fu0q9m6)\n","source":"_posts/article-14.md","raw":"title: 使用 React 是业务需求，而不是技术需求\ndate: 2015-12-15 12:23:23\ncategories:\n  - 好文分享\ntags:\n  - 译文\n  - React\n  - JavaScript\n---\n\n# 前言\n\nReact 已经在开发者圈越来越流行了，并且有很多说明其技术优势的资源。然而，迁移（或是选择）一个新的框架最终归结为向所有人推销 —— 包括非开发者。这里会有一小部分工程经理或项目经理会因为它的新颖，而选择使用它来重构，更糟的是，很多团队被 JavaScript 的高生产工具搞得焦头烂额了，可悲的是向后移动项目是向前移动 web 的一部分。这篇文章并不是试图教你关于 React 的新东西，只是试着去总结以下，起点是为了向所有人说明 React 的疑惑，不仅是开发者。\n\n**总结**：React 是一个为创建可组合的用户界面的库。同比其他类似的库如  Angular、Backbone、Knockout 和 Ember，React 的出现是为了解决业务问题而非技术的。接下来会为你解释 React 的重要性和对开发团队的益处。\n\n# 降低风险\n\n**稳定性** —— Facebook 花了很大的精力在 React 上（Newsfeed，Instagram，Messenger，Ads Marketplace 等），并且拥有专职的技术团队来维护这个项目。它的 dog-food 测试和投资都不是现有的任何一个项目能比的。除了 Facebook 内部的工程师，还有一大批 React 的爱好者。随着版本的更迭，目前在 github 上拥有 571 个贡献者（截止到 2015 年 12 月）。\n\n**正在使用 React**：AirBnB，Asana，Atlassian，BBC，Chegg，CloudFlare，CNN.com，Codecademy，Coursera，Craftsy，Dailymotion，Dropbox，Expedia，Facebook，Feedly，Flipboard，HipChat，IMDb，Imgur，Instagram，Khan Academy，KISSmetrics，Mattermark，Minerva Project，Netflix，OkCupid，Rackspace，Rally Software，Ralph Lauren，Reddit，Redfin，Salesforce，Squarespace，The New York Times，Trunk Club，Twitter，Uber，University of Cincinnati，Venmo，WhatsApp，Wired，Wix，WordPress，Yahoo，Zendesk\n\n# 开发效率\n\n**强大的路径迁移** —— React 允许开发者可以根据自己的需求将其放到任何一个已经存在的页面上。值得注意的是，React 是需要加载一个运行时的库（React 0.14.0 的大小是 39.4 kb），因此零碎的迁移会导致页面重量的增加，直到旧版本的库被移除才会减少。\n\n<!-- more -->\n\n**默认情况下的性能** —— React 的使用模式，让它很难写出低性能的代码。此外，自从它减少了与 DOM 的直接交互，使得它不仅可以代替现有的一些库（Angular/Backbone/Ember），也不再需要大量像 jQuery 一样的依赖，从而减少整体部署代码大小。\n\n**SEO** —— SEO 是从服务器发送一个已经渲染好的页面到浏览器上。React 在设计时就考虑到了 SEO，它用 Node 可以在客户端或服务端进行渲染。其他工具允许在服务端进行渲染，但需要引入一些不稳定的 hack，同时还需要大量的人员去维护。而 React 有可能简化构建工具和减少维护成本。\n\n**提高了代码的重用** —— React 在提供良好的性能同时还可以管理组件的渲染生命周期，如此一来可以显著地提高开发人员的开发效率。通过可重用组件的创造、分配和使用，使之更简单，这样开发人员就能更好地节省使用和开发通用组件的时间。就如按钮一样的低阶元素和可折叠元素一样的高阶元素。\n\n# 提高开发效率\n\n**从混合资源中降低复杂度** —— React 混合了 HTML 和 JavaScript，在此原则下，它们被紧紧地捆在一起，而分离它们是分离技术，这不是关注点。这个概念可以进一步扩展到 CSS，删除 CSS 开发过程中的一连串问题，包括全局命名、作用域/变量的隔离。详细请看：[Radium](http://projects.formidablelabs.com/radium/) 和 [React: CSS in js](https://speakerdeck.com/vjeux/react-css-in-js)。\n\n**错误的快速隔离** —— Facebook 提供了一个浏览器的[扩展应用](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)，帮助开发者更好地查看某一 UI 是由哪些 component 和数据组合生成的。详细请看[这里](https://www.youtube.com/watch?v=D-ioDiacTm8)。\n\n**简洁明了的代码** —— 当前绝大多数的工具，都是以**模型**表示数据和**视图**显示数据结合在一起，从而生成丰富的 UI 交互。通常修改一个模型或视图（例如购物车）就可能在其他视图中触发“级联变化”，同时它依赖的是相同的数据。在一个大型应用中，依赖视图会变得很复杂，而且很难修复那些意想不到的 BUG。但是在 React 中，数据的流向是单向的，因此使得视图更容易理解。下面的图是展示信息的流动。\n![stream](https://cdn-images-1.medium.com/max/800/1*pHvDgaslF8EClCehi6AiMA.png)\n\n**提高了易测性** —— 一个组件，React 的通常做法是抽象数据参数和输出一个没有其他副作用的 DOM。通过移除依赖使用和在 DOM 中创建 state 的 store，使得这些组件拥有更多的原子和可测试性。\n\n# 开发团队的效益\n\n**快捷的管理** —— React 的 API 非常小，结合声明性语法和组件化的 UI 元素使新的开发人员能更快地上手 —— 特别是刚毕业的大学生或是不熟悉前端坏境的开发者。\n\n# 案例\n\n## [Facebook Ads](http://5by5.tv/changelog/149)\n\n“It was extremely difficult to change without causing some side effect or bug somewhere else in the application … When the team rebuilt it in React they found that their rate of new bugs being introduced had gone through the floor”\n\n-Spencer Ahrens\n\n“When a bug did come in it was much easier to figure out what was going wrong and make a targeted fix”\n\n-Spencer Ahrens\n\n## [Netflix](http://techblog.netflix.com/2015/01/netflix-likes-react.html)\n\n“React has exceeded our requirements and enabled us to build a tremendous foundation on which to innovate the Netflix experience”\n\n## [Hit Chat](https://developer.atlassian.com/blog/2015/02/rebuilding-hipchat-with-react/)\n\n“The dev speed we’ve gained…proves that we can release new client features faster and with more confidence on this platform than on any native client.”\n\n[**原文链接**](https://blog.formidable.com/using-react-is-a-business-decision-not-a-technology-choice-63c4641c5f7#.o7fu0q9m6)\n","slug":"article-14","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7em9000bwnpr34cs4d3r","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>React 已经在开发者圈越来越流行了，并且有很多说明其技术优势的资源。然而，迁移（或是选择）一个新的框架最终归结为向所有人推销 —— 包括非开发者。这里会有一小部分工程经理或项目经理会因为它的新颖，而选择使用它来重构，更糟的是，很多团队被 JavaScript 的高生产工具搞得焦头烂额了，可悲的是向后移动项目是向前移动 web 的一部分。这篇文章并不是试图教你关于 React 的新东西，只是试着去总结以下，起点是为了向所有人说明 React 的疑惑，不仅是开发者。</p>\n<p><strong>总结</strong>：React 是一个为创建可组合的用户界面的库。同比其他类似的库如  Angular、Backbone、Knockout 和 Ember，React 的出现是为了解决业务问题而非技术的。接下来会为你解释 React 的重要性和对开发团队的益处。</p>\n<h1 id=\"降低风险\"><a href=\"#降低风险\" class=\"headerlink\" title=\"降低风险\"></a>降低风险</h1><p><strong>稳定性</strong> —— Facebook 花了很大的精力在 React 上（Newsfeed，Instagram，Messenger，Ads Marketplace 等），并且拥有专职的技术团队来维护这个项目。它的 dog-food 测试和投资都不是现有的任何一个项目能比的。除了 Facebook 内部的工程师，还有一大批 React 的爱好者。随着版本的更迭，目前在 github 上拥有 571 个贡献者（截止到 2015 年 12 月）。</p>\n<p><strong>正在使用 React</strong>：AirBnB，Asana，Atlassian，BBC，Chegg，CloudFlare，CNN.com，Codecademy，Coursera，Craftsy，Dailymotion，Dropbox，Expedia，Facebook，Feedly，Flipboard，HipChat，IMDb，Imgur，Instagram，Khan Academy，KISSmetrics，Mattermark，Minerva Project，Netflix，OkCupid，Rackspace，Rally Software，Ralph Lauren，Reddit，Redfin，Salesforce，Squarespace，The New York Times，Trunk Club，Twitter，Uber，University of Cincinnati，Venmo，WhatsApp，Wired，Wix，WordPress，Yahoo，Zendesk</p>\n<h1 id=\"开发效率\"><a href=\"#开发效率\" class=\"headerlink\" title=\"开发效率\"></a>开发效率</h1><p><strong>强大的路径迁移</strong> —— React 允许开发者可以根据自己的需求将其放到任何一个已经存在的页面上。值得注意的是，React 是需要加载一个运行时的库（React 0.14.0 的大小是 39.4 kb），因此零碎的迁移会导致页面重量的增加，直到旧版本的库被移除才会减少。</p>\n<a id=\"more\"></a>\n<p><strong>默认情况下的性能</strong> —— React 的使用模式，让它很难写出低性能的代码。此外，自从它减少了与 DOM 的直接交互，使得它不仅可以代替现有的一些库（Angular/Backbone/Ember），也不再需要大量像 jQuery 一样的依赖，从而减少整体部署代码大小。</p>\n<p><strong>SEO</strong> —— SEO 是从服务器发送一个已经渲染好的页面到浏览器上。React 在设计时就考虑到了 SEO，它用 Node 可以在客户端或服务端进行渲染。其他工具允许在服务端进行渲染，但需要引入一些不稳定的 hack，同时还需要大量的人员去维护。而 React 有可能简化构建工具和减少维护成本。</p>\n<p><strong>提高了代码的重用</strong> —— React 在提供良好的性能同时还可以管理组件的渲染生命周期，如此一来可以显著地提高开发人员的开发效率。通过可重用组件的创造、分配和使用，使之更简单，这样开发人员就能更好地节省使用和开发通用组件的时间。就如按钮一样的低阶元素和可折叠元素一样的高阶元素。</p>\n<h1 id=\"提高开发效率\"><a href=\"#提高开发效率\" class=\"headerlink\" title=\"提高开发效率\"></a>提高开发效率</h1><p><strong>从混合资源中降低复杂度</strong> —— React 混合了 HTML 和 JavaScript，在此原则下，它们被紧紧地捆在一起，而分离它们是分离技术，这不是关注点。这个概念可以进一步扩展到 CSS，删除 CSS 开发过程中的一连串问题，包括全局命名、作用域/变量的隔离。详细请看：<a href=\"http://projects.formidablelabs.com/radium/\" target=\"_blank\" rel=\"external\">Radium</a> 和 <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\" target=\"_blank\" rel=\"external\">React: CSS in js</a>。</p>\n<p><strong>错误的快速隔离</strong> —— Facebook 提供了一个浏览器的<a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\" target=\"_blank\" rel=\"external\">扩展应用</a>，帮助开发者更好地查看某一 UI 是由哪些 component 和数据组合生成的。详细请看<a href=\"https://www.youtube.com/watch?v=D-ioDiacTm8\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<p><strong>简洁明了的代码</strong> —— 当前绝大多数的工具，都是以<strong>模型</strong>表示数据和<strong>视图</strong>显示数据结合在一起，从而生成丰富的 UI 交互。通常修改一个模型或视图（例如购物车）就可能在其他视图中触发“级联变化”，同时它依赖的是相同的数据。在一个大型应用中，依赖视图会变得很复杂，而且很难修复那些意想不到的 BUG。但是在 React 中，数据的流向是单向的，因此使得视图更容易理解。下面的图是展示信息的流动。<br><img src=\"https://cdn-images-1.medium.com/max/800/1*pHvDgaslF8EClCehi6AiMA.png\" alt=\"stream\"></p>\n<p><strong>提高了易测性</strong> —— 一个组件，React 的通常做法是抽象数据参数和输出一个没有其他副作用的 DOM。通过移除依赖使用和在 DOM 中创建 state 的 store，使得这些组件拥有更多的原子和可测试性。</p>\n<h1 id=\"开发团队的效益\"><a href=\"#开发团队的效益\" class=\"headerlink\" title=\"开发团队的效益\"></a>开发团队的效益</h1><p><strong>快捷的管理</strong> —— React 的 API 非常小，结合声明性语法和组件化的 UI 元素使新的开发人员能更快地上手 —— 特别是刚毕业的大学生或是不熟悉前端坏境的开发者。</p>\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><h2 id=\"Facebook-Ads\"><a href=\"#Facebook-Ads\" class=\"headerlink\" title=\"Facebook Ads\"></a><a href=\"http://5by5.tv/changelog/149\" target=\"_blank\" rel=\"external\">Facebook Ads</a></h2><p>“It was extremely difficult to change without causing some side effect or bug somewhere else in the application … When the team rebuilt it in React they found that their rate of new bugs being introduced had gone through the floor”</p>\n<p>-Spencer Ahrens</p>\n<p>“When a bug did come in it was much easier to figure out what was going wrong and make a targeted fix”</p>\n<p>-Spencer Ahrens</p>\n<h2 id=\"Netflix\"><a href=\"#Netflix\" class=\"headerlink\" title=\"Netflix\"></a><a href=\"http://techblog.netflix.com/2015/01/netflix-likes-react.html\" target=\"_blank\" rel=\"external\">Netflix</a></h2><p>“React has exceeded our requirements and enabled us to build a tremendous foundation on which to innovate the Netflix experience”</p>\n<h2 id=\"Hit-Chat\"><a href=\"#Hit-Chat\" class=\"headerlink\" title=\"Hit Chat\"></a><a href=\"https://developer.atlassian.com/blog/2015/02/rebuilding-hipchat-with-react/\" target=\"_blank\" rel=\"external\">Hit Chat</a></h2><p>“The dev speed we’ve gained…proves that we can release new client features faster and with more confidence on this platform than on any native client.”</p>\n<p><a href=\"https://blog.formidable.com/using-react-is-a-business-decision-not-a-technology-choice-63c4641c5f7#.o7fu0q9m6\" target=\"_blank\" rel=\"external\"><strong>原文链接</strong></a></p>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>React 已经在开发者圈越来越流行了，并且有很多说明其技术优势的资源。然而，迁移（或是选择）一个新的框架最终归结为向所有人推销 —— 包括非开发者。这里会有一小部分工程经理或项目经理会因为它的新颖，而选择使用它来重构，更糟的是，很多团队被 JavaScript 的高生产工具搞得焦头烂额了，可悲的是向后移动项目是向前移动 web 的一部分。这篇文章并不是试图教你关于 React 的新东西，只是试着去总结以下，起点是为了向所有人说明 React 的疑惑，不仅是开发者。</p>\n<p><strong>总结</strong>：React 是一个为创建可组合的用户界面的库。同比其他类似的库如  Angular、Backbone、Knockout 和 Ember，React 的出现是为了解决业务问题而非技术的。接下来会为你解释 React 的重要性和对开发团队的益处。</p>\n<h1 id=\"降低风险\"><a href=\"#降低风险\" class=\"headerlink\" title=\"降低风险\"></a>降低风险</h1><p><strong>稳定性</strong> —— Facebook 花了很大的精力在 React 上（Newsfeed，Instagram，Messenger，Ads Marketplace 等），并且拥有专职的技术团队来维护这个项目。它的 dog-food 测试和投资都不是现有的任何一个项目能比的。除了 Facebook 内部的工程师，还有一大批 React 的爱好者。随着版本的更迭，目前在 github 上拥有 571 个贡献者（截止到 2015 年 12 月）。</p>\n<p><strong>正在使用 React</strong>：AirBnB，Asana，Atlassian，BBC，Chegg，CloudFlare，CNN.com，Codecademy，Coursera，Craftsy，Dailymotion，Dropbox，Expedia，Facebook，Feedly，Flipboard，HipChat，IMDb，Imgur，Instagram，Khan Academy，KISSmetrics，Mattermark，Minerva Project，Netflix，OkCupid，Rackspace，Rally Software，Ralph Lauren，Reddit，Redfin，Salesforce，Squarespace，The New York Times，Trunk Club，Twitter，Uber，University of Cincinnati，Venmo，WhatsApp，Wired，Wix，WordPress，Yahoo，Zendesk</p>\n<h1 id=\"开发效率\"><a href=\"#开发效率\" class=\"headerlink\" title=\"开发效率\"></a>开发效率</h1><p><strong>强大的路径迁移</strong> —— React 允许开发者可以根据自己的需求将其放到任何一个已经存在的页面上。值得注意的是，React 是需要加载一个运行时的库（React 0.14.0 的大小是 39.4 kb），因此零碎的迁移会导致页面重量的增加，直到旧版本的库被移除才会减少。</p>","more":"<p><strong>默认情况下的性能</strong> —— React 的使用模式，让它很难写出低性能的代码。此外，自从它减少了与 DOM 的直接交互，使得它不仅可以代替现有的一些库（Angular/Backbone/Ember），也不再需要大量像 jQuery 一样的依赖，从而减少整体部署代码大小。</p>\n<p><strong>SEO</strong> —— SEO 是从服务器发送一个已经渲染好的页面到浏览器上。React 在设计时就考虑到了 SEO，它用 Node 可以在客户端或服务端进行渲染。其他工具允许在服务端进行渲染，但需要引入一些不稳定的 hack，同时还需要大量的人员去维护。而 React 有可能简化构建工具和减少维护成本。</p>\n<p><strong>提高了代码的重用</strong> —— React 在提供良好的性能同时还可以管理组件的渲染生命周期，如此一来可以显著地提高开发人员的开发效率。通过可重用组件的创造、分配和使用，使之更简单，这样开发人员就能更好地节省使用和开发通用组件的时间。就如按钮一样的低阶元素和可折叠元素一样的高阶元素。</p>\n<h1 id=\"提高开发效率\"><a href=\"#提高开发效率\" class=\"headerlink\" title=\"提高开发效率\"></a>提高开发效率</h1><p><strong>从混合资源中降低复杂度</strong> —— React 混合了 HTML 和 JavaScript，在此原则下，它们被紧紧地捆在一起，而分离它们是分离技术，这不是关注点。这个概念可以进一步扩展到 CSS，删除 CSS 开发过程中的一连串问题，包括全局命名、作用域/变量的隔离。详细请看：<a href=\"http://projects.formidablelabs.com/radium/\">Radium</a> 和 <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">React: CSS in js</a>。</p>\n<p><strong>错误的快速隔离</strong> —— Facebook 提供了一个浏览器的<a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\">扩展应用</a>，帮助开发者更好地查看某一 UI 是由哪些 component 和数据组合生成的。详细请看<a href=\"https://www.youtube.com/watch?v=D-ioDiacTm8\">这里</a>。</p>\n<p><strong>简洁明了的代码</strong> —— 当前绝大多数的工具，都是以<strong>模型</strong>表示数据和<strong>视图</strong>显示数据结合在一起，从而生成丰富的 UI 交互。通常修改一个模型或视图（例如购物车）就可能在其他视图中触发“级联变化”，同时它依赖的是相同的数据。在一个大型应用中，依赖视图会变得很复杂，而且很难修复那些意想不到的 BUG。但是在 React 中，数据的流向是单向的，因此使得视图更容易理解。下面的图是展示信息的流动。<br><img src=\"https://cdn-images-1.medium.com/max/800/1*pHvDgaslF8EClCehi6AiMA.png\" alt=\"stream\"></p>\n<p><strong>提高了易测性</strong> —— 一个组件，React 的通常做法是抽象数据参数和输出一个没有其他副作用的 DOM。通过移除依赖使用和在 DOM 中创建 state 的 store，使得这些组件拥有更多的原子和可测试性。</p>\n<h1 id=\"开发团队的效益\"><a href=\"#开发团队的效益\" class=\"headerlink\" title=\"开发团队的效益\"></a>开发团队的效益</h1><p><strong>快捷的管理</strong> —— React 的 API 非常小，结合声明性语法和组件化的 UI 元素使新的开发人员能更快地上手 —— 特别是刚毕业的大学生或是不熟悉前端坏境的开发者。</p>\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><h2 id=\"Facebook-Ads\"><a href=\"#Facebook-Ads\" class=\"headerlink\" title=\"Facebook Ads\"></a><a href=\"http://5by5.tv/changelog/149\">Facebook Ads</a></h2><p>“It was extremely difficult to change without causing some side effect or bug somewhere else in the application … When the team rebuilt it in React they found that their rate of new bugs being introduced had gone through the floor”</p>\n<p>-Spencer Ahrens</p>\n<p>“When a bug did come in it was much easier to figure out what was going wrong and make a targeted fix”</p>\n<p>-Spencer Ahrens</p>\n<h2 id=\"Netflix\"><a href=\"#Netflix\" class=\"headerlink\" title=\"Netflix\"></a><a href=\"http://techblog.netflix.com/2015/01/netflix-likes-react.html\">Netflix</a></h2><p>“React has exceeded our requirements and enabled us to build a tremendous foundation on which to innovate the Netflix experience”</p>\n<h2 id=\"Hit-Chat\"><a href=\"#Hit-Chat\" class=\"headerlink\" title=\"Hit Chat\"></a><a href=\"https://developer.atlassian.com/blog/2015/02/rebuilding-hipchat-with-react/\">Hit Chat</a></h2><p>“The dev speed we’ve gained…proves that we can release new client features faster and with more confidence on this platform than on any native client.”</p>\n<p><a href=\"https://blog.formidable.com/using-react-is-a-business-decision-not-a-technology-choice-63c4641c5f7#.o7fu0q9m6\"><strong>原文链接</strong></a></p>","sticky":0},{"title":"20 个交互非常棒的按钮代码","date":"2015-12-24T01:57:22.000Z","_content":"\n你能想象网页中没有按钮吗？我打赌你不会。在网页中，拥有按钮并不奇怪，这些看似很小、主要以矩形表现（如导航栏，版权信息）的东西，其实是网页 UI 中基础之一。它们不仅使链接看起来更有分量、吸引人和鲜明，而且他们还能提高跳转率和用户体验，使之更方便和直观。这些 CTA （Call-to-action：行为召唤）能帮你获得更多的潜在客户和促进业务的扩展。\n\n![HOST](http://www.noupe.com/wp-content/uploads/2015/10/codesnippets-buttons-teaser_EN.jpg)\n\n按钮的开发需要注意它的形状、颜色、空间、排版和前景，这些都很重要。前四个主要是依赖于网页的主题，而最后一个则是取决于你需要达成的目标。例如，你可以在用户点击后，等待的时间里在按钮上加入转轮点亮的动画；又或是，加入一些更吸引眼球的动画效果。如此一来，添加动画效果可以使按钮产生的效果最大化。那么，接下来为你介绍这 20 个很棒的按钮代码，它们能使按钮更加丰富，且用户体验超好。\n\n# [波浪形按钮](http://codepen.io/suez/pen/aOgMxy)\n\n<a href=\"http://codepen.io/suez/pen/aOgMxy\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/blobs-button.png\">\n</a>\n\n**作者**：Nikolay Talanov\n\n<!-- more -->\n\n# [用 Canvas 和 HTML5 制作的粒子状按钮](http://codepen.io/igcorreia/pen/vEzmyV)\n\n<a href=\"http://codepen.io/igcorreia/pen/vEzmyV\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/particle-button.png\">\n</a>\n\n**作者**：Ignacio Correia\n\n# [用 Sass 制作的胶状按钮](http://codepen.io/macreart/pen/mdCHA)\n\n<a href=\"http://codepen.io/macreart/pen/mdCHA\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/gelatin-over-button-effect.png\">\n</a>\n\n**作者**：François Lesenne\n\n# [3D 弹出效果的按钮](http://codepen.io/ashleynolan/pen/djpCG)\n\n<a href=\"http://codepen.io/ashleynolan/pen/djpCG\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/3d-paper-button.png\">\n</a>\n\n**作者**：Ashley Nolan\n\n# [“Material Design” CSS 动画效果的按钮](http://codepen.io/jonbrennecke/pen/xbojLg)\n\n<a href=\"http://codepen.io/jonbrennecke/pen/xbojLg\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/material-design-button-effect.png\">\n</a>\n\n**作者**：Jon Brennecke\n\n# [具有 3D 效果的按钮](http://codepen.io/drus/pen/IKzqG)\n\n<a href=\"http://codepen.io/drus/pen/IKzqG\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/3d-button.png\">\n</a>\n\n**作者**：drus unlimited\n\n# [关闭按钮效果](http://codepen.io/JonasB/pen/MYaMBz)\n\n<a href=\"http://codepen.io/JonasB/pen/MYaMBz\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/close-button-ui.png\">\n</a>\n\n**作者**：Jonas Badalic\n\n# [一些时尚的切换效果按钮](http://codepen.io/ashleynolan/pen/wBppKz)\n\n<a href=\"http://codepen.io/ashleynolan/pen/wBppKz\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/funky-toggle-buttons.png\">\n</a>\n\n**作者**：Ashley Nolan\n\n# [纯 CSS3 效果的按钮](http://codepen.io/overlyenginnered/pen/myZVYv)\n\n<a href=\"http://codepen.io/overlyenginnered/pen/myZVYv\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/pure-css-button-effects.png\">\n</a>\n\n**作者**：Overly Engineered\n\n# [Hover 效果](http://codepen.io/deep1808/pen/aOQqqa)\n\n<a href=\"http://codepen.io/deep1808/pen/aOQqqa\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/elegant-hover-effect.png\">\n</a>\n\n**作者**：Deep\n\n# [Jelly 按钮](http://codepen.io/ayamflow/pen/Dufxr)\n\n<a href=\"http://codepen.io/ayamflow/pen/Dufxr\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/jelly-button.png\">\n</a>\n\n**作者**：ayamflow\n\n# [Hover 效果的按钮](http://codepen.io/thejamespower/pen/OVNYLL)\n\n<a href=\"http://codepen.io/thejamespower/pen/OVNYLL\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/button-hover-effects.png\">\n</a>\n\n**作者**：James Power\n\n# [Gaming Button With Hover Effect](http://codepen.io/kaigth/pen/qiDJL)\n\n<a href=\"http://codepen.io/kaigth/pen/qiDJL\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/hover-over-effect.png\">\n</a>\n\n**作者**：kaigth\n\n# [分享按钮](http://codepen.io/onediv/pen/dkFco)\n\n<a href=\"http://codepen.io/onediv/pen/dkFco\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/share-button.png\">\n</a>\n\n**作者**：Vincent Durand\n\n# [Flipside](http://codepen.io/hakimel/pen/ZYRgwB)\n\n<a href=\"http://codepen.io/hakimel/pen/ZYRgwB\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/flipside.png\">\n</a>\n\n**作者**：Hakim El Hattab\n\n# [粒子按钮效果](http://codepen.io/timohausmann/pen/icCer)\n\n<a href=\"http://codepen.io/timohausmann/pen/icCer\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/button-with-particle-animation.png\">\n</a>\n\n**作者**：Timo Hausmann\n\n# [CSS3 按钮示例](http://codepen.io/volusion/pen/AgqBf)\n\n<a href=\"http://codepen.io/volusion/pen/AgqBf\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/ecommerce-buttons.png\">\n</a>\n\n**作者**：Volusion Services\n\n# [很棒的按钮样式和效果](http://tympanus.net/codrops/2015/02/26/inspiration-button-styles-effects/)\n\n<a href=\"http://tympanus.net/codrops/2015/02/26/inspiration-button-styles-effects/\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/series-of-button-effects.png\">\n</a>\n\n**作者**：Mary Lou\n\n# [创意按钮样式](http://tympanus.net/codrops/2013/06/13/creative-button-styles/)\n\n<a href=\"http://tympanus.net/codrops/2013/06/13/creative-button-styles/\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/creative-buttons.png\">\n</a>\n\n**作者**：Mary Lou\n\n# [3D 动画效果的按钮](http://codepen.io/1forhlol/pen/VYrxOP)\n\n<a href=\"http://codepen.io/1forhlol/pen/VYrxOP\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/creative-3d-buttons.png\">\n</a>\n\n**作者**：Zachary Minner\n\n[**原文链接**](http://www.noupe.com/design/20-code-snippets-for-interactive-buttons-93374.html)\n","source":"_posts/article-16.md","raw":"title: 20 个交互非常棒的按钮代码\ndate: 2015-12-24 09:57:22\ncategories:\n  - 好文分享\ntags:\n  - 译文\n  - button\n  - interactive\n  - web\n---\n\n你能想象网页中没有按钮吗？我打赌你不会。在网页中，拥有按钮并不奇怪，这些看似很小、主要以矩形表现（如导航栏，版权信息）的东西，其实是网页 UI 中基础之一。它们不仅使链接看起来更有分量、吸引人和鲜明，而且他们还能提高跳转率和用户体验，使之更方便和直观。这些 CTA （Call-to-action：行为召唤）能帮你获得更多的潜在客户和促进业务的扩展。\n\n![HOST](http://www.noupe.com/wp-content/uploads/2015/10/codesnippets-buttons-teaser_EN.jpg)\n\n按钮的开发需要注意它的形状、颜色、空间、排版和前景，这些都很重要。前四个主要是依赖于网页的主题，而最后一个则是取决于你需要达成的目标。例如，你可以在用户点击后，等待的时间里在按钮上加入转轮点亮的动画；又或是，加入一些更吸引眼球的动画效果。如此一来，添加动画效果可以使按钮产生的效果最大化。那么，接下来为你介绍这 20 个很棒的按钮代码，它们能使按钮更加丰富，且用户体验超好。\n\n# [波浪形按钮](http://codepen.io/suez/pen/aOgMxy)\n\n<a href=\"http://codepen.io/suez/pen/aOgMxy\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/blobs-button.png\">\n</a>\n\n**作者**：Nikolay Talanov\n\n<!-- more -->\n\n# [用 Canvas 和 HTML5 制作的粒子状按钮](http://codepen.io/igcorreia/pen/vEzmyV)\n\n<a href=\"http://codepen.io/igcorreia/pen/vEzmyV\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/particle-button.png\">\n</a>\n\n**作者**：Ignacio Correia\n\n# [用 Sass 制作的胶状按钮](http://codepen.io/macreart/pen/mdCHA)\n\n<a href=\"http://codepen.io/macreart/pen/mdCHA\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/gelatin-over-button-effect.png\">\n</a>\n\n**作者**：François Lesenne\n\n# [3D 弹出效果的按钮](http://codepen.io/ashleynolan/pen/djpCG)\n\n<a href=\"http://codepen.io/ashleynolan/pen/djpCG\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/3d-paper-button.png\">\n</a>\n\n**作者**：Ashley Nolan\n\n# [“Material Design” CSS 动画效果的按钮](http://codepen.io/jonbrennecke/pen/xbojLg)\n\n<a href=\"http://codepen.io/jonbrennecke/pen/xbojLg\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/material-design-button-effect.png\">\n</a>\n\n**作者**：Jon Brennecke\n\n# [具有 3D 效果的按钮](http://codepen.io/drus/pen/IKzqG)\n\n<a href=\"http://codepen.io/drus/pen/IKzqG\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/3d-button.png\">\n</a>\n\n**作者**：drus unlimited\n\n# [关闭按钮效果](http://codepen.io/JonasB/pen/MYaMBz)\n\n<a href=\"http://codepen.io/JonasB/pen/MYaMBz\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/close-button-ui.png\">\n</a>\n\n**作者**：Jonas Badalic\n\n# [一些时尚的切换效果按钮](http://codepen.io/ashleynolan/pen/wBppKz)\n\n<a href=\"http://codepen.io/ashleynolan/pen/wBppKz\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/funky-toggle-buttons.png\">\n</a>\n\n**作者**：Ashley Nolan\n\n# [纯 CSS3 效果的按钮](http://codepen.io/overlyenginnered/pen/myZVYv)\n\n<a href=\"http://codepen.io/overlyenginnered/pen/myZVYv\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/pure-css-button-effects.png\">\n</a>\n\n**作者**：Overly Engineered\n\n# [Hover 效果](http://codepen.io/deep1808/pen/aOQqqa)\n\n<a href=\"http://codepen.io/deep1808/pen/aOQqqa\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/elegant-hover-effect.png\">\n</a>\n\n**作者**：Deep\n\n# [Jelly 按钮](http://codepen.io/ayamflow/pen/Dufxr)\n\n<a href=\"http://codepen.io/ayamflow/pen/Dufxr\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/jelly-button.png\">\n</a>\n\n**作者**：ayamflow\n\n# [Hover 效果的按钮](http://codepen.io/thejamespower/pen/OVNYLL)\n\n<a href=\"http://codepen.io/thejamespower/pen/OVNYLL\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/button-hover-effects.png\">\n</a>\n\n**作者**：James Power\n\n# [Gaming Button With Hover Effect](http://codepen.io/kaigth/pen/qiDJL)\n\n<a href=\"http://codepen.io/kaigth/pen/qiDJL\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/hover-over-effect.png\">\n</a>\n\n**作者**：kaigth\n\n# [分享按钮](http://codepen.io/onediv/pen/dkFco)\n\n<a href=\"http://codepen.io/onediv/pen/dkFco\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/share-button.png\">\n</a>\n\n**作者**：Vincent Durand\n\n# [Flipside](http://codepen.io/hakimel/pen/ZYRgwB)\n\n<a href=\"http://codepen.io/hakimel/pen/ZYRgwB\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/flipside.png\">\n</a>\n\n**作者**：Hakim El Hattab\n\n# [粒子按钮效果](http://codepen.io/timohausmann/pen/icCer)\n\n<a href=\"http://codepen.io/timohausmann/pen/icCer\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/button-with-particle-animation.png\">\n</a>\n\n**作者**：Timo Hausmann\n\n# [CSS3 按钮示例](http://codepen.io/volusion/pen/AgqBf)\n\n<a href=\"http://codepen.io/volusion/pen/AgqBf\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/ecommerce-buttons.png\">\n</a>\n\n**作者**：Volusion Services\n\n# [很棒的按钮样式和效果](http://tympanus.net/codrops/2015/02/26/inspiration-button-styles-effects/)\n\n<a href=\"http://tympanus.net/codrops/2015/02/26/inspiration-button-styles-effects/\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/series-of-button-effects.png\">\n</a>\n\n**作者**：Mary Lou\n\n# [创意按钮样式](http://tympanus.net/codrops/2013/06/13/creative-button-styles/)\n\n<a href=\"http://tympanus.net/codrops/2013/06/13/creative-button-styles/\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/creative-buttons.png\">\n</a>\n\n**作者**：Mary Lou\n\n# [3D 动画效果的按钮](http://codepen.io/1forhlol/pen/VYrxOP)\n\n<a href=\"http://codepen.io/1forhlol/pen/VYrxOP\">\n  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/creative-3d-buttons.png\">\n</a>\n\n**作者**：Zachary Minner\n\n[**原文链接**](http://www.noupe.com/design/20-code-snippets-for-interactive-buttons-93374.html)\n","slug":"article-16","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7emg000dwnprkz83og1o","content":"<p>你能想象网页中没有按钮吗？我打赌你不会。在网页中，拥有按钮并不奇怪，这些看似很小、主要以矩形表现（如导航栏，版权信息）的东西，其实是网页 UI 中基础之一。它们不仅使链接看起来更有分量、吸引人和鲜明，而且他们还能提高跳转率和用户体验，使之更方便和直观。这些 CTA （Call-to-action：行为召唤）能帮你获得更多的潜在客户和促进业务的扩展。</p>\n<p><img src=\"http://www.noupe.com/wp-content/uploads/2015/10/codesnippets-buttons-teaser_EN.jpg\" alt=\"HOST\"></p>\n<p>按钮的开发需要注意它的形状、颜色、空间、排版和前景，这些都很重要。前四个主要是依赖于网页的主题，而最后一个则是取决于你需要达成的目标。例如，你可以在用户点击后，等待的时间里在按钮上加入转轮点亮的动画；又或是，加入一些更吸引眼球的动画效果。如此一来，添加动画效果可以使按钮产生的效果最大化。那么，接下来为你介绍这 20 个很棒的按钮代码，它们能使按钮更加丰富，且用户体验超好。</p>\n<h1 id=\"波浪形按钮\"><a href=\"#波浪形按钮\" class=\"headerlink\" title=\"波浪形按钮\"></a><a href=\"http://codepen.io/suez/pen/aOgMxy\" target=\"_blank\" rel=\"external\">波浪形按钮</a></h1><p><a href=\"http://codepen.io/suez/pen/aOgMxy\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/blobs-button.png\"><br></a></p>\n<p><strong>作者</strong>：Nikolay Talanov</p>\n<a id=\"more\"></a>\n<h1 id=\"用-Canvas-和-HTML5-制作的粒子状按钮\"><a href=\"#用-Canvas-和-HTML5-制作的粒子状按钮\" class=\"headerlink\" title=\"用 Canvas 和 HTML5 制作的粒子状按钮\"></a><a href=\"http://codepen.io/igcorreia/pen/vEzmyV\" target=\"_blank\" rel=\"external\">用 Canvas 和 HTML5 制作的粒子状按钮</a></h1><p><a href=\"http://codepen.io/igcorreia/pen/vEzmyV\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/particle-button.png\"><br></a></p>\n<p><strong>作者</strong>：Ignacio Correia</p>\n<h1 id=\"用-Sass-制作的胶状按钮\"><a href=\"#用-Sass-制作的胶状按钮\" class=\"headerlink\" title=\"用 Sass 制作的胶状按钮\"></a><a href=\"http://codepen.io/macreart/pen/mdCHA\" target=\"_blank\" rel=\"external\">用 Sass 制作的胶状按钮</a></h1><p><a href=\"http://codepen.io/macreart/pen/mdCHA\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/gelatin-over-button-effect.png\"><br></a></p>\n<p><strong>作者</strong>：François Lesenne</p>\n<h1 id=\"3D-弹出效果的按钮\"><a href=\"#3D-弹出效果的按钮\" class=\"headerlink\" title=\"3D 弹出效果的按钮\"></a><a href=\"http://codepen.io/ashleynolan/pen/djpCG\" target=\"_blank\" rel=\"external\">3D 弹出效果的按钮</a></h1><p><a href=\"http://codepen.io/ashleynolan/pen/djpCG\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/3d-paper-button.png\"><br></a></p>\n<p><strong>作者</strong>：Ashley Nolan</p>\n<h1 id=\"“Material-Design”-CSS-动画效果的按钮\"><a href=\"#“Material-Design”-CSS-动画效果的按钮\" class=\"headerlink\" title=\"“Material Design” CSS 动画效果的按钮\"></a><a href=\"http://codepen.io/jonbrennecke/pen/xbojLg\" target=\"_blank\" rel=\"external\">“Material Design” CSS 动画效果的按钮</a></h1><p><a href=\"http://codepen.io/jonbrennecke/pen/xbojLg\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/material-design-button-effect.png\"><br></a></p>\n<p><strong>作者</strong>：Jon Brennecke</p>\n<h1 id=\"具有-3D-效果的按钮\"><a href=\"#具有-3D-效果的按钮\" class=\"headerlink\" title=\"具有 3D 效果的按钮\"></a><a href=\"http://codepen.io/drus/pen/IKzqG\" target=\"_blank\" rel=\"external\">具有 3D 效果的按钮</a></h1><p><a href=\"http://codepen.io/drus/pen/IKzqG\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/3d-button.png\"><br></a></p>\n<p><strong>作者</strong>：drus unlimited</p>\n<h1 id=\"关闭按钮效果\"><a href=\"#关闭按钮效果\" class=\"headerlink\" title=\"关闭按钮效果\"></a><a href=\"http://codepen.io/JonasB/pen/MYaMBz\" target=\"_blank\" rel=\"external\">关闭按钮效果</a></h1><p><a href=\"http://codepen.io/JonasB/pen/MYaMBz\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/close-button-ui.png\"><br></a></p>\n<p><strong>作者</strong>：Jonas Badalic</p>\n<h1 id=\"一些时尚的切换效果按钮\"><a href=\"#一些时尚的切换效果按钮\" class=\"headerlink\" title=\"一些时尚的切换效果按钮\"></a><a href=\"http://codepen.io/ashleynolan/pen/wBppKz\" target=\"_blank\" rel=\"external\">一些时尚的切换效果按钮</a></h1><p><a href=\"http://codepen.io/ashleynolan/pen/wBppKz\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/funky-toggle-buttons.png\"><br></a></p>\n<p><strong>作者</strong>：Ashley Nolan</p>\n<h1 id=\"纯-CSS3-效果的按钮\"><a href=\"#纯-CSS3-效果的按钮\" class=\"headerlink\" title=\"纯 CSS3 效果的按钮\"></a><a href=\"http://codepen.io/overlyenginnered/pen/myZVYv\" target=\"_blank\" rel=\"external\">纯 CSS3 效果的按钮</a></h1><p><a href=\"http://codepen.io/overlyenginnered/pen/myZVYv\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/pure-css-button-effects.png\"><br></a></p>\n<p><strong>作者</strong>：Overly Engineered</p>\n<h1 id=\"Hover-效果\"><a href=\"#Hover-效果\" class=\"headerlink\" title=\"Hover 效果\"></a><a href=\"http://codepen.io/deep1808/pen/aOQqqa\" target=\"_blank\" rel=\"external\">Hover 效果</a></h1><p><a href=\"http://codepen.io/deep1808/pen/aOQqqa\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/elegant-hover-effect.png\"><br></a></p>\n<p><strong>作者</strong>：Deep</p>\n<h1 id=\"Jelly-按钮\"><a href=\"#Jelly-按钮\" class=\"headerlink\" title=\"Jelly 按钮\"></a><a href=\"http://codepen.io/ayamflow/pen/Dufxr\" target=\"_blank\" rel=\"external\">Jelly 按钮</a></h1><p><a href=\"http://codepen.io/ayamflow/pen/Dufxr\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/jelly-button.png\"><br></a></p>\n<p><strong>作者</strong>：ayamflow</p>\n<h1 id=\"Hover-效果的按钮\"><a href=\"#Hover-效果的按钮\" class=\"headerlink\" title=\"Hover 效果的按钮\"></a><a href=\"http://codepen.io/thejamespower/pen/OVNYLL\" target=\"_blank\" rel=\"external\">Hover 效果的按钮</a></h1><p><a href=\"http://codepen.io/thejamespower/pen/OVNYLL\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/button-hover-effects.png\"><br></a></p>\n<p><strong>作者</strong>：James Power</p>\n<h1 id=\"Gaming-Button-With-Hover-Effect\"><a href=\"#Gaming-Button-With-Hover-Effect\" class=\"headerlink\" title=\"Gaming Button With Hover Effect\"></a><a href=\"http://codepen.io/kaigth/pen/qiDJL\" target=\"_blank\" rel=\"external\">Gaming Button With Hover Effect</a></h1><p><a href=\"http://codepen.io/kaigth/pen/qiDJL\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/hover-over-effect.png\"><br></a></p>\n<p><strong>作者</strong>：kaigth</p>\n<h1 id=\"分享按钮\"><a href=\"#分享按钮\" class=\"headerlink\" title=\"分享按钮\"></a><a href=\"http://codepen.io/onediv/pen/dkFco\" target=\"_blank\" rel=\"external\">分享按钮</a></h1><p><a href=\"http://codepen.io/onediv/pen/dkFco\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/share-button.png\"><br></a></p>\n<p><strong>作者</strong>：Vincent Durand</p>\n<h1 id=\"Flipside\"><a href=\"#Flipside\" class=\"headerlink\" title=\"Flipside\"></a><a href=\"http://codepen.io/hakimel/pen/ZYRgwB\" target=\"_blank\" rel=\"external\">Flipside</a></h1><p><a href=\"http://codepen.io/hakimel/pen/ZYRgwB\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/flipside.png\"><br></a></p>\n<p><strong>作者</strong>：Hakim El Hattab</p>\n<h1 id=\"粒子按钮效果\"><a href=\"#粒子按钮效果\" class=\"headerlink\" title=\"粒子按钮效果\"></a><a href=\"http://codepen.io/timohausmann/pen/icCer\" target=\"_blank\" rel=\"external\">粒子按钮效果</a></h1><p><a href=\"http://codepen.io/timohausmann/pen/icCer\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/button-with-particle-animation.png\"><br></a></p>\n<p><strong>作者</strong>：Timo Hausmann</p>\n<h1 id=\"CSS3-按钮示例\"><a href=\"#CSS3-按钮示例\" class=\"headerlink\" title=\"CSS3 按钮示例\"></a><a href=\"http://codepen.io/volusion/pen/AgqBf\" target=\"_blank\" rel=\"external\">CSS3 按钮示例</a></h1><p><a href=\"http://codepen.io/volusion/pen/AgqBf\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/ecommerce-buttons.png\"><br></a></p>\n<p><strong>作者</strong>：Volusion Services</p>\n<h1 id=\"很棒的按钮样式和效果\"><a href=\"#很棒的按钮样式和效果\" class=\"headerlink\" title=\"很棒的按钮样式和效果\"></a><a href=\"http://tympanus.net/codrops/2015/02/26/inspiration-button-styles-effects/\" target=\"_blank\" rel=\"external\">很棒的按钮样式和效果</a></h1><p><a href=\"http://tympanus.net/codrops/2015/02/26/inspiration-button-styles-effects/\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/series-of-button-effects.png\"><br></a></p>\n<p><strong>作者</strong>：Mary Lou</p>\n<h1 id=\"创意按钮样式\"><a href=\"#创意按钮样式\" class=\"headerlink\" title=\"创意按钮样式\"></a><a href=\"http://tympanus.net/codrops/2013/06/13/creative-button-styles/\" target=\"_blank\" rel=\"external\">创意按钮样式</a></h1><p><a href=\"http://tympanus.net/codrops/2013/06/13/creative-button-styles/\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/creative-buttons.png\"><br></a></p>\n<p><strong>作者</strong>：Mary Lou</p>\n<h1 id=\"3D-动画效果的按钮\"><a href=\"#3D-动画效果的按钮\" class=\"headerlink\" title=\"3D 动画效果的按钮\"></a><a href=\"http://codepen.io/1forhlol/pen/VYrxOP\" target=\"_blank\" rel=\"external\">3D 动画效果的按钮</a></h1><p><a href=\"http://codepen.io/1forhlol/pen/VYrxOP\" target=\"_blank\" rel=\"external\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/creative-3d-buttons.png\"><br></a></p>\n<p><strong>作者</strong>：Zachary Minner</p>\n<p><a href=\"http://www.noupe.com/design/20-code-snippets-for-interactive-buttons-93374.html\" target=\"_blank\" rel=\"external\"><strong>原文链接</strong></a></p>\n","excerpt":"<p>你能想象网页中没有按钮吗？我打赌你不会。在网页中，拥有按钮并不奇怪，这些看似很小、主要以矩形表现（如导航栏，版权信息）的东西，其实是网页 UI 中基础之一。它们不仅使链接看起来更有分量、吸引人和鲜明，而且他们还能提高跳转率和用户体验，使之更方便和直观。这些 CTA （Call-to-action：行为召唤）能帮你获得更多的潜在客户和促进业务的扩展。</p>\n<p><img src=\"http://www.noupe.com/wp-content/uploads/2015/10/codesnippets-buttons-teaser_EN.jpg\" alt=\"HOST\"></p>\n<p>按钮的开发需要注意它的形状、颜色、空间、排版和前景，这些都很重要。前四个主要是依赖于网页的主题，而最后一个则是取决于你需要达成的目标。例如，你可以在用户点击后，等待的时间里在按钮上加入转轮点亮的动画；又或是，加入一些更吸引眼球的动画效果。如此一来，添加动画效果可以使按钮产生的效果最大化。那么，接下来为你介绍这 20 个很棒的按钮代码，它们能使按钮更加丰富，且用户体验超好。</p>\n<h1 id=\"波浪形按钮\"><a href=\"#波浪形按钮\" class=\"headerlink\" title=\"波浪形按钮\"></a><a href=\"http://codepen.io/suez/pen/aOgMxy\">波浪形按钮</a></h1><p><a href=\"http://codepen.io/suez/pen/aOgMxy\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/blobs-button.png\"><br></a></p>\n<p><strong>作者</strong>：Nikolay Talanov</p>","more":"<h1 id=\"用-Canvas-和-HTML5-制作的粒子状按钮\"><a href=\"#用-Canvas-和-HTML5-制作的粒子状按钮\" class=\"headerlink\" title=\"用 Canvas 和 HTML5 制作的粒子状按钮\"></a><a href=\"http://codepen.io/igcorreia/pen/vEzmyV\">用 Canvas 和 HTML5 制作的粒子状按钮</a></h1><p><a href=\"http://codepen.io/igcorreia/pen/vEzmyV\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/particle-button.png\"><br></a></p>\n<p><strong>作者</strong>：Ignacio Correia</p>\n<h1 id=\"用-Sass-制作的胶状按钮\"><a href=\"#用-Sass-制作的胶状按钮\" class=\"headerlink\" title=\"用 Sass 制作的胶状按钮\"></a><a href=\"http://codepen.io/macreart/pen/mdCHA\">用 Sass 制作的胶状按钮</a></h1><p><a href=\"http://codepen.io/macreart/pen/mdCHA\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/gelatin-over-button-effect.png\"><br></a></p>\n<p><strong>作者</strong>：François Lesenne</p>\n<h1 id=\"3D-弹出效果的按钮\"><a href=\"#3D-弹出效果的按钮\" class=\"headerlink\" title=\"3D 弹出效果的按钮\"></a><a href=\"http://codepen.io/ashleynolan/pen/djpCG\">3D 弹出效果的按钮</a></h1><p><a href=\"http://codepen.io/ashleynolan/pen/djpCG\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/3d-paper-button.png\"><br></a></p>\n<p><strong>作者</strong>：Ashley Nolan</p>\n<h1 id=\"“Material-Design”-CSS-动画效果的按钮\"><a href=\"#“Material-Design”-CSS-动画效果的按钮\" class=\"headerlink\" title=\"“Material Design” CSS 动画效果的按钮\"></a><a href=\"http://codepen.io/jonbrennecke/pen/xbojLg\">“Material Design” CSS 动画效果的按钮</a></h1><p><a href=\"http://codepen.io/jonbrennecke/pen/xbojLg\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/material-design-button-effect.png\"><br></a></p>\n<p><strong>作者</strong>：Jon Brennecke</p>\n<h1 id=\"具有-3D-效果的按钮\"><a href=\"#具有-3D-效果的按钮\" class=\"headerlink\" title=\"具有 3D 效果的按钮\"></a><a href=\"http://codepen.io/drus/pen/IKzqG\">具有 3D 效果的按钮</a></h1><p><a href=\"http://codepen.io/drus/pen/IKzqG\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/3d-button.png\"><br></a></p>\n<p><strong>作者</strong>：drus unlimited</p>\n<h1 id=\"关闭按钮效果\"><a href=\"#关闭按钮效果\" class=\"headerlink\" title=\"关闭按钮效果\"></a><a href=\"http://codepen.io/JonasB/pen/MYaMBz\">关闭按钮效果</a></h1><p><a href=\"http://codepen.io/JonasB/pen/MYaMBz\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/close-button-ui.png\"><br></a></p>\n<p><strong>作者</strong>：Jonas Badalic</p>\n<h1 id=\"一些时尚的切换效果按钮\"><a href=\"#一些时尚的切换效果按钮\" class=\"headerlink\" title=\"一些时尚的切换效果按钮\"></a><a href=\"http://codepen.io/ashleynolan/pen/wBppKz\">一些时尚的切换效果按钮</a></h1><p><a href=\"http://codepen.io/ashleynolan/pen/wBppKz\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/funky-toggle-buttons.png\"><br></a></p>\n<p><strong>作者</strong>：Ashley Nolan</p>\n<h1 id=\"纯-CSS3-效果的按钮\"><a href=\"#纯-CSS3-效果的按钮\" class=\"headerlink\" title=\"纯 CSS3 效果的按钮\"></a><a href=\"http://codepen.io/overlyenginnered/pen/myZVYv\">纯 CSS3 效果的按钮</a></h1><p><a href=\"http://codepen.io/overlyenginnered/pen/myZVYv\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/pure-css-button-effects.png\"><br></a></p>\n<p><strong>作者</strong>：Overly Engineered</p>\n<h1 id=\"Hover-效果\"><a href=\"#Hover-效果\" class=\"headerlink\" title=\"Hover 效果\"></a><a href=\"http://codepen.io/deep1808/pen/aOQqqa\">Hover 效果</a></h1><p><a href=\"http://codepen.io/deep1808/pen/aOQqqa\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/elegant-hover-effect.png\"><br></a></p>\n<p><strong>作者</strong>：Deep</p>\n<h1 id=\"Jelly-按钮\"><a href=\"#Jelly-按钮\" class=\"headerlink\" title=\"Jelly 按钮\"></a><a href=\"http://codepen.io/ayamflow/pen/Dufxr\">Jelly 按钮</a></h1><p><a href=\"http://codepen.io/ayamflow/pen/Dufxr\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/jelly-button.png\"><br></a></p>\n<p><strong>作者</strong>：ayamflow</p>\n<h1 id=\"Hover-效果的按钮\"><a href=\"#Hover-效果的按钮\" class=\"headerlink\" title=\"Hover 效果的按钮\"></a><a href=\"http://codepen.io/thejamespower/pen/OVNYLL\">Hover 效果的按钮</a></h1><p><a href=\"http://codepen.io/thejamespower/pen/OVNYLL\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/button-hover-effects.png\"><br></a></p>\n<p><strong>作者</strong>：James Power</p>\n<h1 id=\"Gaming-Button-With-Hover-Effect\"><a href=\"#Gaming-Button-With-Hover-Effect\" class=\"headerlink\" title=\"Gaming Button With Hover Effect\"></a><a href=\"http://codepen.io/kaigth/pen/qiDJL\">Gaming Button With Hover Effect</a></h1><p><a href=\"http://codepen.io/kaigth/pen/qiDJL\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/hover-over-effect.png\"><br></a></p>\n<p><strong>作者</strong>：kaigth</p>\n<h1 id=\"分享按钮\"><a href=\"#分享按钮\" class=\"headerlink\" title=\"分享按钮\"></a><a href=\"http://codepen.io/onediv/pen/dkFco\">分享按钮</a></h1><p><a href=\"http://codepen.io/onediv/pen/dkFco\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/share-button.png\"><br></a></p>\n<p><strong>作者</strong>：Vincent Durand</p>\n<h1 id=\"Flipside\"><a href=\"#Flipside\" class=\"headerlink\" title=\"Flipside\"></a><a href=\"http://codepen.io/hakimel/pen/ZYRgwB\">Flipside</a></h1><p><a href=\"http://codepen.io/hakimel/pen/ZYRgwB\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/flipside.png\"><br></a></p>\n<p><strong>作者</strong>：Hakim El Hattab</p>\n<h1 id=\"粒子按钮效果\"><a href=\"#粒子按钮效果\" class=\"headerlink\" title=\"粒子按钮效果\"></a><a href=\"http://codepen.io/timohausmann/pen/icCer\">粒子按钮效果</a></h1><p><a href=\"http://codepen.io/timohausmann/pen/icCer\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/button-with-particle-animation.png\"><br></a></p>\n<p><strong>作者</strong>：Timo Hausmann</p>\n<h1 id=\"CSS3-按钮示例\"><a href=\"#CSS3-按钮示例\" class=\"headerlink\" title=\"CSS3 按钮示例\"></a><a href=\"http://codepen.io/volusion/pen/AgqBf\">CSS3 按钮示例</a></h1><p><a href=\"http://codepen.io/volusion/pen/AgqBf\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/ecommerce-buttons.png\"><br></a></p>\n<p><strong>作者</strong>：Volusion Services</p>\n<h1 id=\"很棒的按钮样式和效果\"><a href=\"#很棒的按钮样式和效果\" class=\"headerlink\" title=\"很棒的按钮样式和效果\"></a><a href=\"http://tympanus.net/codrops/2015/02/26/inspiration-button-styles-effects/\">很棒的按钮样式和效果</a></h1><p><a href=\"http://tympanus.net/codrops/2015/02/26/inspiration-button-styles-effects/\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/series-of-button-effects.png\"><br></a></p>\n<p><strong>作者</strong>：Mary Lou</p>\n<h1 id=\"创意按钮样式\"><a href=\"#创意按钮样式\" class=\"headerlink\" title=\"创意按钮样式\"></a><a href=\"http://tympanus.net/codrops/2013/06/13/creative-button-styles/\">创意按钮样式</a></h1><p><a href=\"http://tympanus.net/codrops/2013/06/13/creative-button-styles/\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/creative-buttons.png\"><br></a></p>\n<p><strong>作者</strong>：Mary Lou</p>\n<h1 id=\"3D-动画效果的按钮\"><a href=\"#3D-动画效果的按钮\" class=\"headerlink\" title=\"3D 动画效果的按钮\"></a><a href=\"http://codepen.io/1forhlol/pen/VYrxOP\">3D 动画效果的按钮</a></h1><p><a href=\"http://codepen.io/1forhlol/pen/VYrxOP\"><br>  <img src=\"http://www.noupe.com/wp-content/uploads/2015/10/creative-3d-buttons.png\"><br></a></p>\n<p><strong>作者</strong>：Zachary Minner</p>\n<p><a href=\"http://www.noupe.com/design/20-code-snippets-for-interactive-buttons-93374.html\"><strong>原文链接</strong></a></p>","sticky":0},{"title":"CSS 的使用中你可能不知道的 7 件事","date":"2015-12-22T07:50:56.000Z","_content":"\n无论你信不信，JavaScript 和 CSS 已经开始重叠，并为 CSS 增加了更多的功能。当我在写 [CSS 与 JavaScript 交互中你可能不知道的 5 种方式](https://davidwalsh.name/ways-css-javascript-interact)的时候，读者对于 CSS 与 JavaScript 已经重叠的事感到很惊讶。那么今天，我会着重为你介绍 7 个可以通过 CSS 完成的任务 —— 不使用 JavaScript 或图像处理！\n\n# [CSS @supports](https://davidwalsh.name/css-supports)\n\n每个优秀的前端工程师都会在使用某个特性前测试一下，确保是否在浏览器中可以使用。而这类测试通常是由 JavaScript 完成的，当然，也有很多人用 Modernizr（拥有很多很好功能的测试工具）来测试特性。那么现在有一个 CSS 新的 API 可以让你去做特性测试：[@supports](https://davidwalsh.name/css-supports)，下面的例子将简单地教你如何使用：\n\n```css\n/* basic usage */\n@supports(prop:value) {\n  /* more styles */\n}\n\n/* real usage */\n@supports (display: flex) {\n  div { display: flex; }\n}\n\n/* testing prefixes too */\n@supports (display: -webkit-flex) or\n          (display: -moz-flex) or\n          (display: flex) {\n\n    section {\n      display: -webkit-flex;\n      display: -moz-flex;\n      display: flex;\n      float: none;\n    }\n}\n```\n\n<!-- more -->\n\n@supports 这个新的特性也有一个相对应的 JavaScript 方式，但这个特性还在实验阶段，希望我们可以很快用到！\n\n# [CSS Filters](https://davidwalsh.name/css-filters)\n\n你可以写一个服务去修改图片的颜色，同时还可以把它卖给 Facebook 获得大量的钱！当然，写一个图片过滤器功能只是一个简单化的实现，并非一门科学。在 Mozilla 的第一周，我写了一个[小的应用](https://github.com/darkwing/fotofilter)（这让我赢了比赛，BTW...就说说而已），这个应用使用了一些 JS-base 的数学方法并使用 canvas 去做图片过滤器。这很麻烦，但是现在我们可以[用 CSS 的特性去完成这一功能](https://davidwalsh.name/css-filters)！\n\n```css\n/* simple filter */\n.myElement {\n  -webkit-filter: blur(2px);\n}\n\n/* advanced filter */\n.myElement {\n  -webkit-filter: blur(2px) grayscale (.5) opacity(0.8) hue-rotate(120deg);\n}\n```\n\n这类的过滤功能只是创建一个图片的原型，并且不会保存和导出来完成过滤器的功能。这对于图片管理或想处理任何一张图片来说很方便！\n\n * [Demo](https://davidwalsh.name/demo/css-filters.php)\n\n# [Pointer Events 和点击事件](https://davidwalsh.name/pointer-events)\n\n[CSS 特性中的 `pointer-events`](https://davidwalsh.name/pointer-events) 提供了一个方法，能使一个元素 disable，即在用户点击某个元素时，不触发它在 JavaScript 中写的点击事件：\n\n```css\n/* do nothing when clicked or activated */\n.disabled { pointer-events: none; }\n```\n\n```js\n/* this will _not_ fire because of the pointer-events: none application */\ndocument.getElementById(\"disabled-element\").addEventListener(\"click\", function(e) {\n  alert(\"Clicked!\");\n});\n```\n\n在上述的例子中，由于 `pointer-events` 的值是 `none`，而使点击事件不被触发。大有用处的是，让你不必到处去检查类名或属性，来确认哪一个是 disabled 的了。\n\n * [Demo](https://davidwalsh.name/demo/pointer-events.php)\n\n# [Slide Down & Slide Up](https://davidwalsh.name/css-slide)\n\nCSS 使我们能够创建转换和动画，但通常我们需要一个 JavaScript 库帮助我们实现。例如一个比较流行的动画效果[ slide up 和 silde down](https://davidwalsh.name/css-slide)，大概很多人都不知道这个可以只用 CSS 实现吧！\n\n```css\n/* slider in open state */\n.slider {\n  overflow-y: hidden;\n  max-height: 500px; /* approximate max height */\n\n  transition-property: all;\n  transition-duration: .5s;\n  transition-timing-function: cubic-bezier(0, 1, 0.5, 1);\n}\n\n/* close it with the \"closed\" class */\n.slider.closed {\n  max-height: 0;\n}\n```\n\n很聪明地使用了 `max-height` 来控制元素的展开和收缩。\n\n * [Demo](https://davidwalsh.name/demo/css-slide.php)\n\n# [CSS Counters](https://davidwalsh.name/css-counters)\n\n我们不禁地问，“counter” 在网上意味着什么呢？但是 `CSS Counters` 就是另外一回事了。这个特性可以把一个 counter 加到元素中，通过 `:before` 或 `:after` ：\n\n```css\n/* initialize the counter */\nol.slides {\n  counter-reset: slideNum;\n}\n\n/* increment the counter */\nol.slides > li {\n  counter-increment: slideNum;\n}\n\n/* display the counter value */\nol.slides li:after {\n  content: \"[\" counter(slideNum) \"]\";\n}\n```\n\n通常这个会在一些模块或是列表中用到。\n\n * [Demo](https://davidwalsh.name/demo/css-counters.php)\n\n# [Unicode CSS Classes](https://davidwalsh.name/unicode-css-classes)\n\n有大量的文章说明，去教你如何对 CSS 的类命名。但你应该不知道会有这样的文档，去教你[用特殊字符命名你的 css 类](https://davidwalsh.name/unicode-css-classes)：\n\n```css\n.ಠ_ಠ {\n  border: 1px solid #f00;\n  background: pink;\n}\n\n.❤ {\n  background: lightgreen;\n  border: 1px solid green;\n}\n```\n\n但请不要这么使用。\n\n * [Demo](https://davidwalsh.name/demo/unicode-css-classes.php)\n\n# [CSS Circles](https://davidwalsh.name/css-circles)\n\n[CSS 中的圆形](https://davidwalsh.name/css-circles) 与 [CSS 中的三角形](https://davidwalsh.name/css-triangles)一样。通过使用 `border-radius` 就能创建一个完美的圆形！\n\n```css\n.circle {\n  border-radius: 50%;\n  width: 200px;\n  height: 200px;\n  /* width and height can be anything, as long as they're equal */\n}\n```\n\n你也可以给圆形添加一些渐变效果，甚至可以添加动画。CSS 拥有更多[对于图形统一的 API](http://alistapart.com/article/css-shapes-101)，当然现在你可以使用 hack 创建一个圆形。\n\n * [Demo](https://davidwalsh.name/demo/css-circles.php)\n\n就是这些：你可能不知道的 7 个关于 CSS 的事，一部分是临界的情况，其他一部分还是非常实用的。那么就大胆地去用它们吧！\n\n[**原文链接**](https://davidwalsh.name/css-facts)\n","source":"_posts/article-15.md","raw":"title: CSS 的使用中你可能不知道的 7 件事\ndate: 2015-12-22 15:50:56\ncategories:\n  - 好文分享\ntags:\n  - 译文\n  - css\n  - features\n  - front-end\n---\n\n无论你信不信，JavaScript 和 CSS 已经开始重叠，并为 CSS 增加了更多的功能。当我在写 [CSS 与 JavaScript 交互中你可能不知道的 5 种方式](https://davidwalsh.name/ways-css-javascript-interact)的时候，读者对于 CSS 与 JavaScript 已经重叠的事感到很惊讶。那么今天，我会着重为你介绍 7 个可以通过 CSS 完成的任务 —— 不使用 JavaScript 或图像处理！\n\n# [CSS @supports](https://davidwalsh.name/css-supports)\n\n每个优秀的前端工程师都会在使用某个特性前测试一下，确保是否在浏览器中可以使用。而这类测试通常是由 JavaScript 完成的，当然，也有很多人用 Modernizr（拥有很多很好功能的测试工具）来测试特性。那么现在有一个 CSS 新的 API 可以让你去做特性测试：[@supports](https://davidwalsh.name/css-supports)，下面的例子将简单地教你如何使用：\n\n```css\n/* basic usage */\n@supports(prop:value) {\n  /* more styles */\n}\n\n/* real usage */\n@supports (display: flex) {\n  div { display: flex; }\n}\n\n/* testing prefixes too */\n@supports (display: -webkit-flex) or\n          (display: -moz-flex) or\n          (display: flex) {\n\n    section {\n      display: -webkit-flex;\n      display: -moz-flex;\n      display: flex;\n      float: none;\n    }\n}\n```\n\n<!-- more -->\n\n@supports 这个新的特性也有一个相对应的 JavaScript 方式，但这个特性还在实验阶段，希望我们可以很快用到！\n\n# [CSS Filters](https://davidwalsh.name/css-filters)\n\n你可以写一个服务去修改图片的颜色，同时还可以把它卖给 Facebook 获得大量的钱！当然，写一个图片过滤器功能只是一个简单化的实现，并非一门科学。在 Mozilla 的第一周，我写了一个[小的应用](https://github.com/darkwing/fotofilter)（这让我赢了比赛，BTW...就说说而已），这个应用使用了一些 JS-base 的数学方法并使用 canvas 去做图片过滤器。这很麻烦，但是现在我们可以[用 CSS 的特性去完成这一功能](https://davidwalsh.name/css-filters)！\n\n```css\n/* simple filter */\n.myElement {\n  -webkit-filter: blur(2px);\n}\n\n/* advanced filter */\n.myElement {\n  -webkit-filter: blur(2px) grayscale (.5) opacity(0.8) hue-rotate(120deg);\n}\n```\n\n这类的过滤功能只是创建一个图片的原型，并且不会保存和导出来完成过滤器的功能。这对于图片管理或想处理任何一张图片来说很方便！\n\n * [Demo](https://davidwalsh.name/demo/css-filters.php)\n\n# [Pointer Events 和点击事件](https://davidwalsh.name/pointer-events)\n\n[CSS 特性中的 `pointer-events`](https://davidwalsh.name/pointer-events) 提供了一个方法，能使一个元素 disable，即在用户点击某个元素时，不触发它在 JavaScript 中写的点击事件：\n\n```css\n/* do nothing when clicked or activated */\n.disabled { pointer-events: none; }\n```\n\n```js\n/* this will _not_ fire because of the pointer-events: none application */\ndocument.getElementById(\"disabled-element\").addEventListener(\"click\", function(e) {\n  alert(\"Clicked!\");\n});\n```\n\n在上述的例子中，由于 `pointer-events` 的值是 `none`，而使点击事件不被触发。大有用处的是，让你不必到处去检查类名或属性，来确认哪一个是 disabled 的了。\n\n * [Demo](https://davidwalsh.name/demo/pointer-events.php)\n\n# [Slide Down & Slide Up](https://davidwalsh.name/css-slide)\n\nCSS 使我们能够创建转换和动画，但通常我们需要一个 JavaScript 库帮助我们实现。例如一个比较流行的动画效果[ slide up 和 silde down](https://davidwalsh.name/css-slide)，大概很多人都不知道这个可以只用 CSS 实现吧！\n\n```css\n/* slider in open state */\n.slider {\n  overflow-y: hidden;\n  max-height: 500px; /* approximate max height */\n\n  transition-property: all;\n  transition-duration: .5s;\n  transition-timing-function: cubic-bezier(0, 1, 0.5, 1);\n}\n\n/* close it with the \"closed\" class */\n.slider.closed {\n  max-height: 0;\n}\n```\n\n很聪明地使用了 `max-height` 来控制元素的展开和收缩。\n\n * [Demo](https://davidwalsh.name/demo/css-slide.php)\n\n# [CSS Counters](https://davidwalsh.name/css-counters)\n\n我们不禁地问，“counter” 在网上意味着什么呢？但是 `CSS Counters` 就是另外一回事了。这个特性可以把一个 counter 加到元素中，通过 `:before` 或 `:after` ：\n\n```css\n/* initialize the counter */\nol.slides {\n  counter-reset: slideNum;\n}\n\n/* increment the counter */\nol.slides > li {\n  counter-increment: slideNum;\n}\n\n/* display the counter value */\nol.slides li:after {\n  content: \"[\" counter(slideNum) \"]\";\n}\n```\n\n通常这个会在一些模块或是列表中用到。\n\n * [Demo](https://davidwalsh.name/demo/css-counters.php)\n\n# [Unicode CSS Classes](https://davidwalsh.name/unicode-css-classes)\n\n有大量的文章说明，去教你如何对 CSS 的类命名。但你应该不知道会有这样的文档，去教你[用特殊字符命名你的 css 类](https://davidwalsh.name/unicode-css-classes)：\n\n```css\n.ಠ_ಠ {\n  border: 1px solid #f00;\n  background: pink;\n}\n\n.❤ {\n  background: lightgreen;\n  border: 1px solid green;\n}\n```\n\n但请不要这么使用。\n\n * [Demo](https://davidwalsh.name/demo/unicode-css-classes.php)\n\n# [CSS Circles](https://davidwalsh.name/css-circles)\n\n[CSS 中的圆形](https://davidwalsh.name/css-circles) 与 [CSS 中的三角形](https://davidwalsh.name/css-triangles)一样。通过使用 `border-radius` 就能创建一个完美的圆形！\n\n```css\n.circle {\n  border-radius: 50%;\n  width: 200px;\n  height: 200px;\n  /* width and height can be anything, as long as they're equal */\n}\n```\n\n你也可以给圆形添加一些渐变效果，甚至可以添加动画。CSS 拥有更多[对于图形统一的 API](http://alistapart.com/article/css-shapes-101)，当然现在你可以使用 hack 创建一个圆形。\n\n * [Demo](https://davidwalsh.name/demo/css-circles.php)\n\n就是这些：你可能不知道的 7 个关于 CSS 的事，一部分是临界的情况，其他一部分还是非常实用的。那么就大胆地去用它们吧！\n\n[**原文链接**](https://davidwalsh.name/css-facts)\n","slug":"article-15","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7emk000hwnprij5lbt4h","content":"<p>无论你信不信，JavaScript 和 CSS 已经开始重叠，并为 CSS 增加了更多的功能。当我在写 <a href=\"https://davidwalsh.name/ways-css-javascript-interact\" target=\"_blank\" rel=\"external\">CSS 与 JavaScript 交互中你可能不知道的 5 种方式</a>的时候，读者对于 CSS 与 JavaScript 已经重叠的事感到很惊讶。那么今天，我会着重为你介绍 7 个可以通过 CSS 完成的任务 —— 不使用 JavaScript 或图像处理！</p>\n<h1 id=\"CSS-supports\"><a href=\"#CSS-supports\" class=\"headerlink\" title=\"CSS @supports\"></a><a href=\"https://davidwalsh.name/css-supports\" target=\"_blank\" rel=\"external\">CSS @supports</a></h1><p>每个优秀的前端工程师都会在使用某个特性前测试一下，确保是否在浏览器中可以使用。而这类测试通常是由 JavaScript 完成的，当然，也有很多人用 Modernizr（拥有很多很好功能的测试工具）来测试特性。那么现在有一个 CSS 新的 API 可以让你去做特性测试：<a href=\"https://davidwalsh.name/css-supports\" target=\"_blank\" rel=\"external\">@supports</a>，下面的例子将简单地教你如何使用：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* basic usage */</span><br><span class=\"line\">@supports(prop:value) &#123;</span><br><span class=\"line\">  /* more styles */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* real usage */</span><br><span class=\"line\">@supports (display: flex) &#123;</span><br><span class=\"line\">  div &#123; display: flex; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* testing prefixes too */</span><br><span class=\"line\">@supports (display: -webkit-flex) or</span><br><span class=\"line\">          (display: -moz-flex) or</span><br><span class=\"line\">          (display: flex) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    section &#123;</span><br><span class=\"line\">      display: -webkit-flex;</span><br><span class=\"line\">      display: -moz-flex;</span><br><span class=\"line\">      display: flex;</span><br><span class=\"line\">      float: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>@supports 这个新的特性也有一个相对应的 JavaScript 方式，但这个特性还在实验阶段，希望我们可以很快用到！</p>\n<h1 id=\"CSS-Filters\"><a href=\"#CSS-Filters\" class=\"headerlink\" title=\"CSS Filters\"></a><a href=\"https://davidwalsh.name/css-filters\" target=\"_blank\" rel=\"external\">CSS Filters</a></h1><p>你可以写一个服务去修改图片的颜色，同时还可以把它卖给 Facebook 获得大量的钱！当然，写一个图片过滤器功能只是一个简单化的实现，并非一门科学。在 Mozilla 的第一周，我写了一个<a href=\"https://github.com/darkwing/fotofilter\" target=\"_blank\" rel=\"external\">小的应用</a>（这让我赢了比赛，BTW…就说说而已），这个应用使用了一些 JS-base 的数学方法并使用 canvas 去做图片过滤器。这很麻烦，但是现在我们可以<a href=\"https://davidwalsh.name/css-filters\" target=\"_blank\" rel=\"external\">用 CSS 的特性去完成这一功能</a>！</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* simple filter */</span></span><br><span class=\"line\"><span class=\"selector-class\">.myElement</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">blur</span>(2px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* advanced filter */</span></span><br><span class=\"line\"><span class=\"selector-class\">.myElement</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">blur</span>(2px) grayscale (.<span class=\"number\">5</span>) <span class=\"built_in\">opacity</span>(0.8) <span class=\"built_in\">hue-rotate</span>(120deg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这类的过滤功能只是创建一个图片的原型，并且不会保存和导出来完成过滤器的功能。这对于图片管理或想处理任何一张图片来说很方便！</p>\n<ul>\n<li><a href=\"https://davidwalsh.name/demo/css-filters.php\" target=\"_blank\" rel=\"external\">Demo</a></li>\n</ul>\n<h1 id=\"Pointer-Events-和点击事件\"><a href=\"#Pointer-Events-和点击事件\" class=\"headerlink\" title=\"Pointer Events 和点击事件\"></a><a href=\"https://davidwalsh.name/pointer-events\" target=\"_blank\" rel=\"external\">Pointer Events 和点击事件</a></h1><p><a href=\"https://davidwalsh.name/pointer-events\" target=\"_blank\" rel=\"external\">CSS 特性中的 <code>pointer-events</code></a> 提供了一个方法，能使一个元素 disable，即在用户点击某个元素时，不触发它在 JavaScript 中写的点击事件：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* do nothing when clicked or activated */</span></span><br><span class=\"line\"><span class=\"selector-class\">.disabled</span> &#123; <span class=\"attribute\">pointer-events</span>: none; &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* this will _not_ fire because of the pointer-events: none application */</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"disabled-element\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"Clicked!\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在上述的例子中，由于 <code>pointer-events</code> 的值是 <code>none</code>，而使点击事件不被触发。大有用处的是，让你不必到处去检查类名或属性，来确认哪一个是 disabled 的了。</p>\n<ul>\n<li><a href=\"https://davidwalsh.name/demo/pointer-events.php\" target=\"_blank\" rel=\"external\">Demo</a></li>\n</ul>\n<h1 id=\"Slide-Down-amp-Slide-Up\"><a href=\"#Slide-Down-amp-Slide-Up\" class=\"headerlink\" title=\"Slide Down &amp; Slide Up\"></a><a href=\"https://davidwalsh.name/css-slide\" target=\"_blank\" rel=\"external\">Slide Down &amp; Slide Up</a></h1><p>CSS 使我们能够创建转换和动画，但通常我们需要一个 JavaScript 库帮助我们实现。例如一个比较流行的动画效果<a href=\"https://davidwalsh.name/css-slide\" target=\"_blank\" rel=\"external\"> slide up 和 silde down</a>，大概很多人都不知道这个可以只用 CSS 实现吧！</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* slider in open state */</span></span><br><span class=\"line\"><span class=\"selector-class\">.slider</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow-y</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">500px</span>; <span class=\"comment\">/* approximate max height */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">transition-property</span>: all;</span><br><span class=\"line\">  <span class=\"attribute\">transition-duration</span>: .<span class=\"number\">5s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(0, 1, 0.5, 1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* close it with the \"closed\" class */</span></span><br><span class=\"line\"><span class=\"selector-class\">.slider</span><span class=\"selector-class\">.closed</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很聪明地使用了 <code>max-height</code> 来控制元素的展开和收缩。</p>\n<ul>\n<li><a href=\"https://davidwalsh.name/demo/css-slide.php\" target=\"_blank\" rel=\"external\">Demo</a></li>\n</ul>\n<h1 id=\"CSS-Counters\"><a href=\"#CSS-Counters\" class=\"headerlink\" title=\"CSS Counters\"></a><a href=\"https://davidwalsh.name/css-counters\" target=\"_blank\" rel=\"external\">CSS Counters</a></h1><p>我们不禁地问，“counter” 在网上意味着什么呢？但是 <code>CSS Counters</code> 就是另外一回事了。这个特性可以把一个 counter 加到元素中，通过 <code>:before</code> 或 <code>:after</code> ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* initialize the counter */</span></span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-class\">.slides</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-reset</span>: slideNum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* increment the counter */</span></span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-class\">.slides</span> &gt; <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-increment</span>: slideNum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* display the counter value */</span></span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-class\">.slides</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"[\"</span> <span class=\"built_in\">counter</span>(slideNum) <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通常这个会在一些模块或是列表中用到。</p>\n<ul>\n<li><a href=\"https://davidwalsh.name/demo/css-counters.php\" target=\"_blank\" rel=\"external\">Demo</a></li>\n</ul>\n<h1 id=\"Unicode-CSS-Classes\"><a href=\"#Unicode-CSS-Classes\" class=\"headerlink\" title=\"Unicode CSS Classes\"></a><a href=\"https://davidwalsh.name/unicode-css-classes\" target=\"_blank\" rel=\"external\">Unicode CSS Classes</a></h1><p>有大量的文章说明，去教你如何对 CSS 的类命名。但你应该不知道会有这样的文档，去教你<a href=\"https://davidwalsh.name/unicode-css-classes\" target=\"_blank\" rel=\"external\">用特殊字符命名你的 css 类</a>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.ಠ_ಠ &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.❤ &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但请不要这么使用。</p>\n<ul>\n<li><a href=\"https://davidwalsh.name/demo/unicode-css-classes.php\" target=\"_blank\" rel=\"external\">Demo</a></li>\n</ul>\n<h1 id=\"CSS-Circles\"><a href=\"#CSS-Circles\" class=\"headerlink\" title=\"CSS Circles\"></a><a href=\"https://davidwalsh.name/css-circles\" target=\"_blank\" rel=\"external\">CSS Circles</a></h1><p><a href=\"https://davidwalsh.name/css-circles\" target=\"_blank\" rel=\"external\">CSS 中的圆形</a> 与 <a href=\"https://davidwalsh.name/css-triangles\" target=\"_blank\" rel=\"external\">CSS 中的三角形</a>一样。通过使用 <code>border-radius</code> 就能创建一个完美的圆形！</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* width and height can be anything, as long as they're equal */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你也可以给圆形添加一些渐变效果，甚至可以添加动画。CSS 拥有更多<a href=\"http://alistapart.com/article/css-shapes-101\" target=\"_blank\" rel=\"external\">对于图形统一的 API</a>，当然现在你可以使用 hack 创建一个圆形。</p>\n<ul>\n<li><a href=\"https://davidwalsh.name/demo/css-circles.php\" target=\"_blank\" rel=\"external\">Demo</a></li>\n</ul>\n<p>就是这些：你可能不知道的 7 个关于 CSS 的事，一部分是临界的情况，其他一部分还是非常实用的。那么就大胆地去用它们吧！</p>\n<p><a href=\"https://davidwalsh.name/css-facts\" target=\"_blank\" rel=\"external\"><strong>原文链接</strong></a></p>\n","excerpt":"<p>无论你信不信，JavaScript 和 CSS 已经开始重叠，并为 CSS 增加了更多的功能。当我在写 <a href=\"https://davidwalsh.name/ways-css-javascript-interact\">CSS 与 JavaScript 交互中你可能不知道的 5 种方式</a>的时候，读者对于 CSS 与 JavaScript 已经重叠的事感到很惊讶。那么今天，我会着重为你介绍 7 个可以通过 CSS 完成的任务 —— 不使用 JavaScript 或图像处理！</p>\n<h1 id=\"CSS-supports\"><a href=\"#CSS-supports\" class=\"headerlink\" title=\"CSS @supports\"></a><a href=\"https://davidwalsh.name/css-supports\">CSS @supports</a></h1><p>每个优秀的前端工程师都会在使用某个特性前测试一下，确保是否在浏览器中可以使用。而这类测试通常是由 JavaScript 完成的，当然，也有很多人用 Modernizr（拥有很多很好功能的测试工具）来测试特性。那么现在有一个 CSS 新的 API 可以让你去做特性测试：<a href=\"https://davidwalsh.name/css-supports\">@supports</a>，下面的例子将简单地教你如何使用：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* basic usage */</span><br><span class=\"line\">@supports(prop:value) &#123;</span><br><span class=\"line\">  /* more styles */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* real usage */</span><br><span class=\"line\">@supports (display: flex) &#123;</span><br><span class=\"line\">  div &#123; display: flex; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* testing prefixes too */</span><br><span class=\"line\">@supports (display: -webkit-flex) or</span><br><span class=\"line\">          (display: -moz-flex) or</span><br><span class=\"line\">          (display: flex) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    section &#123;</span><br><span class=\"line\">      display: -webkit-flex;</span><br><span class=\"line\">      display: -moz-flex;</span><br><span class=\"line\">      display: flex;</span><br><span class=\"line\">      float: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>@supports 这个新的特性也有一个相对应的 JavaScript 方式，但这个特性还在实验阶段，希望我们可以很快用到！</p>\n<h1 id=\"CSS-Filters\"><a href=\"#CSS-Filters\" class=\"headerlink\" title=\"CSS Filters\"></a><a href=\"https://davidwalsh.name/css-filters\">CSS Filters</a></h1><p>你可以写一个服务去修改图片的颜色，同时还可以把它卖给 Facebook 获得大量的钱！当然，写一个图片过滤器功能只是一个简单化的实现，并非一门科学。在 Mozilla 的第一周，我写了一个<a href=\"https://github.com/darkwing/fotofilter\">小的应用</a>（这让我赢了比赛，BTW…就说说而已），这个应用使用了一些 JS-base 的数学方法并使用 canvas 去做图片过滤器。这很麻烦，但是现在我们可以<a href=\"https://davidwalsh.name/css-filters\">用 CSS 的特性去完成这一功能</a>！</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* simple filter */</span></span><br><span class=\"line\"><span class=\"selector-class\">.myElement</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">blur</span>(2px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* advanced filter */</span></span><br><span class=\"line\"><span class=\"selector-class\">.myElement</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">blur</span>(2px) grayscale (.<span class=\"number\">5</span>) <span class=\"built_in\">opacity</span>(0.8) <span class=\"built_in\">hue-rotate</span>(120deg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这类的过滤功能只是创建一个图片的原型，并且不会保存和导出来完成过滤器的功能。这对于图片管理或想处理任何一张图片来说很方便！</p>\n<ul>\n<li><a href=\"https://davidwalsh.name/demo/css-filters.php\">Demo</a></li>\n</ul>\n<h1 id=\"Pointer-Events-和点击事件\"><a href=\"#Pointer-Events-和点击事件\" class=\"headerlink\" title=\"Pointer Events 和点击事件\"></a><a href=\"https://davidwalsh.name/pointer-events\">Pointer Events 和点击事件</a></h1><p><a href=\"https://davidwalsh.name/pointer-events\">CSS 特性中的 <code>pointer-events</code></a> 提供了一个方法，能使一个元素 disable，即在用户点击某个元素时，不触发它在 JavaScript 中写的点击事件：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* do nothing when clicked or activated */</span></span><br><span class=\"line\"><span class=\"selector-class\">.disabled</span> &#123; <span class=\"attribute\">pointer-events</span>: none; &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* this will _not_ fire because of the pointer-events: none application */</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"disabled-element\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"Clicked!\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在上述的例子中，由于 <code>pointer-events</code> 的值是 <code>none</code>，而使点击事件不被触发。大有用处的是，让你不必到处去检查类名或属性，来确认哪一个是 disabled 的了。</p>\n<ul>\n<li><a href=\"https://davidwalsh.name/demo/pointer-events.php\">Demo</a></li>\n</ul>\n<h1 id=\"Slide-Down-amp-Slide-Up\"><a href=\"#Slide-Down-amp-Slide-Up\" class=\"headerlink\" title=\"Slide Down &amp; Slide Up\"></a><a href=\"https://davidwalsh.name/css-slide\">Slide Down &amp; Slide Up</a></h1><p>CSS 使我们能够创建转换和动画，但通常我们需要一个 JavaScript 库帮助我们实现。例如一个比较流行的动画效果<a href=\"https://davidwalsh.name/css-slide\"> slide up 和 silde down</a>，大概很多人都不知道这个可以只用 CSS 实现吧！</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* slider in open state */</span></span><br><span class=\"line\"><span class=\"selector-class\">.slider</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow-y</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">500px</span>; <span class=\"comment\">/* approximate max height */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">transition-property</span>: all;</span><br><span class=\"line\">  <span class=\"attribute\">transition-duration</span>: .<span class=\"number\">5s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(0, 1, 0.5, 1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* close it with the \"closed\" class */</span></span><br><span class=\"line\"><span class=\"selector-class\">.slider</span><span class=\"selector-class\">.closed</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很聪明地使用了 <code>max-height</code> 来控制元素的展开和收缩。</p>\n<ul>\n<li><a href=\"https://davidwalsh.name/demo/css-slide.php\">Demo</a></li>\n</ul>\n<h1 id=\"CSS-Counters\"><a href=\"#CSS-Counters\" class=\"headerlink\" title=\"CSS Counters\"></a><a href=\"https://davidwalsh.name/css-counters\">CSS Counters</a></h1><p>我们不禁地问，“counter” 在网上意味着什么呢？但是 <code>CSS Counters</code> 就是另外一回事了。这个特性可以把一个 counter 加到元素中，通过 <code>:before</code> 或 <code>:after</code> ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* initialize the counter */</span></span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-class\">.slides</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-reset</span>: slideNum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* increment the counter */</span></span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-class\">.slides</span> &gt; <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-increment</span>: slideNum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* display the counter value */</span></span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-class\">.slides</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"[\"</span> <span class=\"built_in\">counter</span>(slideNum) <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通常这个会在一些模块或是列表中用到。</p>\n<ul>\n<li><a href=\"https://davidwalsh.name/demo/css-counters.php\">Demo</a></li>\n</ul>\n<h1 id=\"Unicode-CSS-Classes\"><a href=\"#Unicode-CSS-Classes\" class=\"headerlink\" title=\"Unicode CSS Classes\"></a><a href=\"https://davidwalsh.name/unicode-css-classes\">Unicode CSS Classes</a></h1><p>有大量的文章说明，去教你如何对 CSS 的类命名。但你应该不知道会有这样的文档，去教你<a href=\"https://davidwalsh.name/unicode-css-classes\">用特殊字符命名你的 css 类</a>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.ಠ_ಠ &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.❤ &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但请不要这么使用。</p>\n<ul>\n<li><a href=\"https://davidwalsh.name/demo/unicode-css-classes.php\">Demo</a></li>\n</ul>\n<h1 id=\"CSS-Circles\"><a href=\"#CSS-Circles\" class=\"headerlink\" title=\"CSS Circles\"></a><a href=\"https://davidwalsh.name/css-circles\">CSS Circles</a></h1><p><a href=\"https://davidwalsh.name/css-circles\">CSS 中的圆形</a> 与 <a href=\"https://davidwalsh.name/css-triangles\">CSS 中的三角形</a>一样。通过使用 <code>border-radius</code> 就能创建一个完美的圆形！</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* width and height can be anything, as long as they're equal */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你也可以给圆形添加一些渐变效果，甚至可以添加动画。CSS 拥有更多<a href=\"http://alistapart.com/article/css-shapes-101\">对于图形统一的 API</a>，当然现在你可以使用 hack 创建一个圆形。</p>\n<ul>\n<li><a href=\"https://davidwalsh.name/demo/css-circles.php\">Demo</a></li>\n</ul>\n<p>就是这些：你可能不知道的 7 个关于 CSS 的事，一部分是临界的情况，其他一部分还是非常实用的。那么就大胆地去用它们吧！</p>\n<p><a href=\"https://davidwalsh.name/css-facts\"><strong>原文链接</strong></a></p>","sticky":0},{"title":"React 测试驱动教程","date":"2016-01-21T10:19:35.000Z","_content":"\n测试是开发周期中的一个重要组成部分。没有测试的代码被称为：遗留代码。对于我而言，第一次学习 React 和 JavaScript 的时候，感到很有压力。如果你也是刚开始学习 JS/React，并加入他们的社区，那么也可能会有相同的感觉。想到的会是：\n\n * 我应该用哪一个构建工具？\n * 哪一个测试框架比较好？\n * 我应该学习哪种流模式？\n * 我需要用到流吗？\n\n为了解决这些烦恼，我决定写这篇文章。经过几个小时的博客文章阅读，查阅 JS 开发者的源码，还有参加 Florida 的 JSConf，终于让我找到了自己的测试“槽”。开始让我觉得没有经过测试的 React 程序代码是如此的不标准和凌乱。我想活在一个没有这种感觉的世界，但后来想想，这是不对的。\n\n本教程所有的代码都可以在我的 [github 仓库](https://github.com/SpencerCDixon/react-testing-starter-kit)中找到。\n\n让我们开始吧！\n\n<!-- more -->\n\n## 设置 Webpack\n本教程不是一个教如何使用 webpack，所以我不会详细说，但重要的是要了解基本的东西。\nWebpack 就像 Rails 中的 Assets Pipeline 一样。在基础层面上而言，在运行 react 应用时，\n会在处理你的代码和服务的前后，只生成一个 `bundle.js` 在客户端。\n\n因为它是一个非常强大的工具，所以我们会常常用到。在开始，Webpack 的功能可能会吓到你，\n但我建议你坚持使用下去，一旦你了解了其中的原理，就会觉得得心应手。而你只需给它一个机会去表现。\n\n通常我们不会喜欢那些我们不会的，或是害怕的。然而，一旦你克服初始不适并开始理解它，总会变得很有趣。事实上，这正是我对测试的感受。当开始时讨厌它，在熟悉后喜欢它 :-)\n\n如果感兴趣，这里有一些资源来更多地了解关于 webpack：\n\n1.  [Webpack Cookbook](https://christianalfoni.github.io/react-webpack-cookbook/Getting-started.html)（使用的是 Babel 5，但对于学习 Webpack 的基本原理而言还是很有用的）\n2.  [Webpack 初学者可以看这篇文章](http://blog.madewithlove.be/post/webpack-your-bags/)\n3.  [Pete Hunts 所写的 Webpack How-to](https://github.com/petehunt/webpack-howto)\n\n> **注意**：如果要持续随本教程实验，建议使用 Node 版本为 `v5.1.0`。当然版本 `>4` 的也是可以的。\n\n首先，安装所有关于 webpack 和 babel 的依赖。Babel 是一个转译器，允许你在开发时使用 ES6（es2015）和 ES7 的特性，然后将这些代码转译成浏览器可以识别的 ES5 代码。\n\n```\nmkdir tdd_react\ncd tdd_react\nnpm init        # follow along with normal npm init to set up project\n\nnpm i babel-loader babel-core webpack --save-dev\n```\n\n> `npm i` 是 npm install 的别名。\n\n接下来，让我们设置项目的路径和创建一个 `webpack.config.js` 文件：\n\n```\nmkdir src                  # where all our source code will live\ntouch src/main.js          # this will be the entry point for our webpack bundling\nmkdir test                 # place to store all our tests\nmkdir dist                 # this is where the bundled javascript from webpack will go\ntouch webpack.config.js    # our webpack configuration file\n```\n\n初始化的 webpack config 会很小。阅读这些注释，理解下发生了什么：\n\n```\n// our webpack.config.js file located in project root\n\nvar webpack = require('webpack');\nvar path = require('path');                // a useful node path helper library\n\nvar config = {\n  entry: ['./src/main.js'],                // the entry point for our app\n  output: {\n    path: path.resolve(__dirname, 'dist'), // store the bundled output in dist/bundle.js\n    filename: 'bundle.js'                  // specifying file name for our compiled assets\n  },\n  module: {\n    loaders: [\n      // telling webpack which loaders we want to use.  For now just run the\n      // code through the babel-loader.  'babel' is an alias for babel-loader\n      { test: /\\.js$/, loaders: ['babel'], exclude: /node_modules/ }\n    ]\n  }\n}\n\nmodule.exports = config;\n```\n\n为了让 babel 更好地工作，我们需要定义哪个 `presets` 是我们需要用到的。让我们继续，并且安装 React 和 ES6 预处理所需的东西：\n\n```\nnpm i babel-preset-react babel-preset-es2015 --save-dev\n```\n\n现在我们有一些选项。在 webpack config 文件中，会告诉你哪一块是做 bebel 预处理的：\n\n```\nloaders: [\n  {\n    test: /\\.js$/,\n    loaders: ['babel'],\n    exclude: /node_modules/,\n    query: {\n      presets: ['react', 'es2015']\n    }\n  }\n]\n```\n\n另外的方法是将他们存在 `.babelrc` 文件中，这也用在我的项目中。将 babel 预处理存储在 `.babelrc` 中，对于以后的开发者而言，更容易去找到哪个 babel 预处理是可用的。此外，当我们将 Karma 设置到 webpack 之后，因为 `.babelrc` 文件的存在，我们就不再需要其他的预处理配置了。\n\n```\n# inside our project root\ntouch .babelrc\n```\n\n将下面这段粘贴到预处理文件中：\n\n```\n# .babelrc\n{\n  \"presets\": [\"react\", \"es2015\"]\n}\n```\n\n为了确认它能否工作，让我们在 `main.js` 中加入一些 react 代码，并看看所有的包是否正常。接着安装 React 和 React DOM：\n\n```\nnpm i react react-dom -S\n```\n\n> 使用 `-S` 是 `--save` 的别名。\n\n创建第一个 React 组件：\n\n```\n# src/main.js\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass Root extends Component {\n  render() {\n    return <h1> Hello World </h1>;\n  }\n}\n\nrender(<Root />, document.getElementById('root'));\n```\n\n聪明的读者就会察觉我们并没有在根部创建一个 `index.html` 文件。让我们继续，当 `bundle.js` 编译后，将其放到 `/dist` 文件夹中：\n\n```html\n# /dist/index.html\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\"/>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n```\n\n非常棒，让我们继续。最后，我们可以运行 webpack，看看一切是否正常。如果你没有全局安装 webpack（`npm i webpack -g`），你也可以用 node modules 方式进行启动：\n\n```\n./node_modules/.bin/webpack\n```\n\nWebpack 将默认情况下寻找一个配置名称为 `webpack.config.js`。如果你高兴，也可以通过不同 webpack config 作为参数传入。\n\n在 package.json 中创建一个别名，来完成构建工作：\n\n```\n# package.json\n... other stuff\n\"scripts\": {\n  \"build\": \"webpack\"\n}\n```\n\n接下来让 `webpack-dev-server` 提升开发体验：\n\n```\nnpm i webpack-dev-server --save-dev\n```\n\n将 webpack dev server 的入口加入到 `webpack.config.js` 中：\n\n```\n... rest of config\n  entry: [\n    'webpack/hot/dev-server',\n    'webpack-dev-server/client?http://localhost:3000',\n    './src/main.js'\n  ],\n... rest of config\n```\n\n让 script 运行在开发服务器上：\n\n```\n# package.json\n... other stuff\nscripts: {\n  \"dev\": \"webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist\",\n  \"build\": \"webpack\"\n}\n```\n\n在 script 中使用了 `--content-base` 标记，告诉 webpack 我们想服务于 `/dist` 文件夹。我们还定义了 3000 端口，使得更像是 Rails 开发的体验。\n\n最后，在 webpack 配置文件中添加一个 resolve 标记，使进口文件看起来更直观。下面就是配置文件最终的样子：\n\n```\nvar webpack = require('webpack');\nvar path = require('path');\n\nvar config = {\n  entry: [\n    'webpack/hot/dev-server',\n    'webpack-dev-server/client?http://localhost:3000',\n    './src/main.js'\n  ],\n  resolve: {\n    root: [\n      // allows us to import modules as if /src was the root.\n      // so I can do: import Comment from 'components/Comment'\n      // instead of:  import Comment from '../components/Comment' or whatever relative path would be\n      path.resolve(__dirname, './src')\n    ],\n    // allows you to require without the .js at end of filenames\n    // import Component from 'component' vs. import Component from 'component.js'\n    extensions: ['', '.js', '.json', '.jsx']\n  },\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js?$/,\n        // dont run node_modules or bower_components through babel loader\n        exclude: /(node_modules|bower_components)/,\n        // babel is alias for babel-loader\n        // npm i babel-core babel-loader --save-dev\n        loader: 'babel'\n      }\n    ],\n  }\n}\n\nmodule.exports = config;\n```\n\n为确保一切工作正常，让我们运行开发服务器，并且确认我们在屏幕上看到 “Hello World”。\n\n```\nnpm run dev\nopen http://localhost:3000\n```\n\n你应该看到的是这样的：\n\n![Hello World Image](http://i.imgur.com/rYTjH77.png?1)\n\n## 设置 Mocha，Chai，Sinon 和 Enzyme\n\n**Mocha**：将用于运行我们的测试。\n**Chai**：是我们期待的库。应用非常广泛，允许使用 RSpec 一样的语法。\n**Sinon**：将服务于 mocks/stubs/spies.\n**Enzyme**：将用于测试我们的 React components。AirBnB 写的一个很漂亮的测试库。\n\n安装这些包：\n\n```\nnpm i mocha chai sinon --save-dev\n```\n\n如果我们希望能够使用 ES6 编写测试，那么我们需要在运行前对代码进行转译。那么我们需要安装 babel-register：\n\n```\nnpm i babel-register --save-dev\n```\n\n加一些 npm scripts 到 `package.json` 中，让测试更简单：\n\n```\n# ./package.json\n... rest of package.json\n  \"scripts\": {\n    \"test\": \"mocha --compilers js:babel-register --recursive\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"build\": \"webpack\",\n    \"dev\": \"webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist\",\n  },\n\n```\n\n我们的测试脚本要运行 mocha，并使用 `babel-register` 进行转译，然后递归地查看 `/test` 目录。\n\n最终，我们需要设置 Karma，因此 npm script 会变得无效，但如果不设置，它将会正常工作。`npm run test:watch` 将会监视程序，并在文件发生修改时重新运行。多么高效！\n\n确认它能工作，创建一个 hello world 测试 `/tests/helloWorld.spec.js`：\n\n```\n# /test/helloWorld.spec.js\nimport { expect } from 'chai';\n\ndescribe('hello world', () => {\n  it('works!', () => {\n    expect(true).to.be.true;\n  });\n});\n```\n\n哇...看起来很像 RSpec！\n\n如果每一个测试都要引入 `expect`，这将变得很麻烦，因此让我们新建一个 `test_helper` 文件来保存这些东西：\n\n```\n# /test/test_helper.js\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\nglobal.expect = expect;\nglobal.sinon = sinon;\n```\n\n然后把它包括到 npm 脚本的运行套件中，并通过 `--require ./test/test_helper.js` 来声明：\n\n```\n# package.json script section\n  \"test\": \"mocha --compilers js:babel-register --require ./test/test_helper.js --recursive\",\n```\n\n我也添加了 sinon，因此它也可以全局可用。现在无论什么时候，我们在写一个新的测试时，都不需要手动引入 `expect` 和 `sinon`。\n\n### Enzyme\n现在我们所需的“普通”测试工具都已经设置好了（mocha，chai，sinon），接着让我们安装 Enzyme，并且开始测试 React component！\n\n安装这个包：\n\n```\nnpm i enzyme react-addons-test-utils --save-dev\n```\n\nEnzyme 的重要文档可以[在这里找到](http://airbnb.io/enzyme/)。如果有时间，我推荐阅读 Shallow Rendering 部分。\n> **你会问，什么是 Shallow Rendering？**\n\n对我们来说是一种组件调用 render 方法，得到我们可以断言的 React 元素，而无需实际安装组件到 DOM 上。更多的 React 元素[请看这](https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html)。\n\nEnzyme 会将 shallow rendered 组件包裹进一个特殊的 `wrapper` 中，进而让我们可以测试。如果你用过 Rails，这看起来像是 Capybara 中的 `page` 对象。\n\n让我们为一些合适的 `<Root />` 组件进行 TDD 的驱动开发。\n\n这个 Root 组件会是一个 `container`，意味着在应用中它可以控制 state 的处理。学习 React 中“智能”和“笨拙”组件之间的差异，对于应用程序体系结构是很重要的。[这篇文章很好地解释了它们](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.8cnl19w8l)。\n\n```\n# /tests/containers/Root.spec.js\n\nimport React from 'react';                     // required to get test to work.  we can get around this later with more configuration\nimport { shallow } from 'enzyme';              // method from enzyme which allows us to do shallow render\nimport Root from '../../src/containers/Root';  // import our soon to be component\n\ndescribe('(Container) Root', () => {\n  it('renders as a <div>', () => {\n    const wrapper = shallow(<Root />);\n    expect(wrapper.type()).to.eql('div');\n  });\n\n  it('has style with height 100%', () => {\n    const wrapper = shallow(<Root />);\n    const expectedStyles = {\n      height: '100%',\n      background: '#333'\n    }\n    expect(wrapper.prop('style')).to.eql(expectedStyles);\n  });\n\n  it('contains a header explaining the app', () => {\n    const wrapper = shallow(<Root />);\n    expect(wrapper.find('.welcome-header')).to.have.length(1);\n  });\n});\n```\n\n如果我们用 `npm test` 运行测试，这会失败。因为我们没有在适当的位置创建一个根组件。因此我们可以这样做：\n\n> 如果在任何时候你想看到这段代码的源代码，可以在 [github 仓库](https://github.com/SpencerCDixon/react-testing-starter-kit) 中找到\n\n```\n# /src/containers/Root.js\nimport React, { Component } from 'react';\n\nconst styles = {\n  height: '100%',\n  background: '#333'\n}\n\nclass Root extends Component {\n  render() {\n    return (\n      <div style={styles}>\n        <h1 className='welcome-header'>Welcome to testing React!</h1>\n      </div>\n    )\n  }\n}\n\nexport default Root;\n```\n重新运行测试就可以了。\n\n在我们的测试中有很多重复的东西，因此我们还需要回去做一些重构。由于我们没有给 `Root` 传入任何的 props，那么我们可以 shallow render 它一次，然后就在一个 wrapper 中结束了我们所有的断言。很多时候给定一个特定的 props 后，我发现自己包装的部分测试会在 “sub” describe 块中，然后给一堆断言也有这些 props。如果你用过 RSpec，就类似于使用 “context” 块。\n\n```\ndescribe('(Container) Root', () => {\n  const wrapper = shallow(<Root />);\n\n  it('renders as a <div>', () => {\n    expect(wrapper.type()).to.eql('div');\n  });\n\n  it('has style with height 100%', () => {\n    const expectedStyles = {\n      height: '100%',\n      background: '#333'\n    }\n    expect(wrapper.prop('style')).to.eql(expectedStyles);\n  });\n\n  it('contains a header explaining the app', () => {\n    expect(wrapper.find('.welcome-header')).to.have.length(1);\n  });\n});\n```\n\n尽可能地在你的测试中使用 `shallow`，但偶尔也可能不用。例如，如果你要测试 React 生命周期的方法时，就需要真正地将组件安装出来。\n\n接下来让我们测试一个组件的安装和调用函数，当它安装时，我们可以得到一些暴露在 `sinon` 上的信息和正在使用的 spies。\n\n我们可以假装 `Root` 组件有一个子组件叫 `CommentList`，在安装后将调用任意的回调。当通过给定 props 组件安装时，函数被调用，因此我们就可以测试这个场景。在组件渲染时给评论列表一些 style，然后我们就可以知道 shallow render 是如何处理这些样式的了。`CommentList` 会在一个组件文件夹的 `/src/components/CommentList.js` 中。因为它不处理数据，因此完全取决于 props，换句话说它是一个**纯**（**笨拙**）组件：\n\n```\nimport React from 'react';\n\n// Once we set up Karma to run our tests through webpack\n// we will no longer need to have these long relative paths\nimport CommentList from '../../src/components/CommentList';\nimport {\n  describeWithDOM,\n  mount,\n  shallow,\n  spyLifecycle\n} from 'enzyme';\n\ndescribe('(Component) CommentList', () => {\n\n  // using special describeWithDOM helper that enzyme\n  // provides so if other devs on my team don't have JSDom set up\n  // properly or are using old version of node it won't bork their test suite\n  //\n  // All of our tests that depend on mounting should go inside one of these\n  // special describe blocks\n  describeWithDOM('Lifecycle methods', () => {\n    it('calls componentDidMount', () => {\n      spyLifecyle(CommentList);\n\n      const props = {\n        onMount: () => {},  // an anonymous function in ES6 arrow syntax\n        isActive: false\n      }\n\n      // using destructuring to pass props down\n      // easily and then mounting the component\n      mount(<CommentList {...props} />);\n\n      // CommentList's componentDidMount should have been\n      // called once.  spyLifecyle attaches sinon spys so we can\n      // make this assertion\n      expect(\n        CommentList.prototype.componentDidMount.calledOnce\n      ).to.be.true;\n    });\n\n    it('calls onMount prop once it mounts', () => {\n      // create a spy for the onMount function\n      const props = { onMount: sinon.spy() };\n\n      // mount our component\n      mount(<CommentList {...props} />);\n\n      // expect that onMount was called\n      expect(props.onMount.calledOnce).to.be.true;\n    });\n  });\n});\n```\n\n还有很多，阅读这些注释可以帮助你更好地理解。看看这些实践，让测试可以通过，然后再回头看看这些测试，验证下你所理解的东西。\n\n```\n# /src/components/CommentList.js\nimport React, { Component, PropTypes } from 'react';\n\nconst propTypes = {\n  onMount: PropTypes.func.isRequired,\n  isActive: PropTypes.bool\n};\n\nclass CommentList extends Component {\n  componentDidMount() {\n    this.props.onMount();\n  }\n\n  render() {\n    return (\n      <ul>\n        <li> Comment One </li>\n      </ul>\n    )\n  }\n}\n\nCommentList.propTypes = propTypes;\nexport default CommentList;\n```\n\n运行 `npm test` ，现在这些套件应该可以通过测试了。\n\n接下来让我们添加一些 shallow rendered 测试，当给定一个 `isActive` 的 props 时，来确保我们的组件使用了适当的 CSS class。\n\n```\n... previous tests\n\n  it('should render as a <ul>', () => {\n    const props = { onMount: () => {} };\n    const wrapper = shallow(<CommentList  {...props} />);\n    expect(wrapper.type()).to.eql('ul');\n  });\n\n  describe('when active...', () => {\n    const wrapper = shallow(\n      // just passing isActive is an alias for true\n      <CommentList onMount={() => {}} isActive />\n    )\n    it('should render with className active-list', () => {\n      expect(wrapper.prop('className')).to.eql('active-list');\n    });\n  });\n\n  describe('when inactive...', () => {\n    const wrapper = shallow(\n      <CommentList onMount={() => {}} isActive={false} />\n    )\n    it('should render with className inactive-list', () => {\n      expect(wrapper.prop('className')).to.eql('inactive-list');\n    });\n  });\n});\n```\n\n让它们通过测试：\n\n```\nclass CommentList extends Component {\n  componentDidMount() {\n    this.props.onMount();\n  }\n\n  render() {\n    const { isActive } = this.props;\n    const className = isActive ? 'active-list' : 'inactive-list';\n\n    return (\n      <ul className={className}>\n        <li> Comment One </li>\n      </ul>\n    )\n  }\n}\n```\n\n此时你应该对如何测试 react 组件已经有了一个很好的理解了。记得去阅读 Enzyme 文档来获得更多的灵感。\n\n## 设置 Karma\n设置 Karma 可能会有些困难。坦白讲，这对我而言也是一件痛苦的工作。通常，当我开发 React 应用时，我会选择使用已经构建好的 starter kit，方便省事。[我非常推荐开发时用的 starter kit](https://github.com/davezuko/react-redux-starter-kit)。\n\n使用 Karma 的价值在于快速测试重载，可以多浏览器测试和最重要的是 webpack 预处理。一旦我们将 Karma 设置好了，在我们运行测试程序时，不仅是只有 `babel-loader`，而是整个 webpack config。这为我们提供了很多便利，使得我们的测试环境与开发环境相同。\n\n让我们开始吧...\n\n```\nnpm i karma karma-chai karma-mocha karma-webpack --save-dev\nnpm i karma-sourcemap-loader karma-phantomjs-launcher --save-dev\nnpm i karma-spec-reporter --save-dev\nnpm i phantomjs --save-dev\n\n# The polyfills arn't required but will help with browser support issues\n# and are easy enough to include in our karma config that I figured why not\nnpm i babel-polyfill phantomjs-polyfill --save-dev\n```\n\n很多包，我知道。相信我完成这个是非常值得的。\n\n对于我们的示例而言，我们将使用 [PhantomJS](http://phantomjs.org/)。没有别的什么原因，这我在 starter kit 中已经用到了。可以按照自己的喜好使用 Chrome，Firefox 或是 Safari，甚至在 PhantomJS 之上。（这是用 Karma 的一件很酷的事）\n\n在配置 karma 之前先安装 `yargs`，它能让你使用命令行参数来定制 Karma 的配置。\n\n```\nnpm i yargs -S\n```\n\n现在我们可以通过创建一个 Karma config 文件去监视我们的文件，当文件发生修改时重新运行并很快地保存。\n\n**Karma Config**：\n```\ntouch karma.config.js\n```\n\n```\n// ./karma.config.js\n\nvar argv = require('yargs').argv;\nvar path = require('path');\n\nmodule.exports = function(config) {\n  config.set({\n    // only use PhantomJS for our 'test' browser\n    browsers: ['PhantomJS'],\n\n    // just run once by default unless --watch flag is passed\n    singleRun: !argv.watch,\n\n    // which karma frameworks do we want integrated\n    frameworks: ['mocha', 'chai'],\n\n    // displays tests in a nice readable format\n    reporters: ['spec'],\n\n    // include some polyfills for babel and phantomjs\n    files: [\n      'node_modules/babel-polyfill/dist/polyfill.js',\n      './node_modules/phantomjs-polyfill/bind-polyfill.js',\n      './test/**/*.js' // specify files to watch for tests\n    ],\n    preprocessors: {\n      // these files we want to be precompiled with webpack\n      // also run tests throug sourcemap for easier debugging\n      ['./test/**/*.js']: ['webpack', 'sourcemap']\n    },\n    // A lot of people will reuse the same webpack config that they use\n    // in development for karma but remove any production plugins like UglifyJS etc.\n    // I chose to just re-write the config so readers can see what it needs to have\n    webpack: {\n       devtool: 'inline-source-map',\n       resolve: {\n        // allow us to import components in tests like:\n        // import Example from 'components/Example';\n        root: path.resolve(__dirname, './src'),\n\n        // allow us to avoid including extension name\n        extensions: ['', '.js', '.jsx'],\n\n        // required for enzyme to work properly\n        alias: {\n          'sinon': 'sinon/pkg/sinon'\n        }\n      },\n      module: {\n        // don't run babel-loader through the sinon module\n        noParse: [\n          /node_modules\\/sinon\\//\n        ],\n        // run babel loader for our tests\n        loaders: [\n          { test: /\\.js?$/, exclude: /node_modules/, loader: 'babel' },\n        ],\n      },\n      // required for enzyme to work properly\n      externals: {\n        'jsdom': 'window',\n        'cheerio': 'window',\n        'react/lib/ExecutionEnvironment': true,\n        'react/lib/ReactContext': 'window'\n      },\n    },\n    webpackMiddleware: {\n      noInfo: true\n    },\n    // tell karma all the plugins we're going to be using to prevent warnings\n    plugins: [\n      'karma-mocha',\n      'karma-chai',\n      'karma-webpack',\n      'karma-phantomjs-launcher',\n      'karma-spec-reporter',\n      'karma-sourcemap-loader'\n    ]\n  });\n};\n```\n阅读所有的注释一次或两次有助于理解这个 config 是做什么的。使用 Webpack 的一大好处是全部都是普通的 JavaScript 代码，并且我们可以“重构”配置文件。事实上，这正是绝大多数 starter kit 所做的！\n\n随着 Karma 设置完成，为运行测试，最后一件事就是要去更新我们的 package.json：\n\n```\n# package.json\n  \"scripts\" {\n    \"test\": \"node_modules/.bin/karma start karma.config.js\",\n    \"test:dev\": \"npm run test -- --watch\",\n    \"old_test\": \"mocha --compilers js:babel-register --require ./test/test_helper.js --recursive\",\n    \"old_test:watch\": \"npm test -- --watch\"\n  }\n```\n\n我建议重命名旧的测试 scripts 的前缀，用 'old_' 表示。\n\n最终的 `package.json` 是这样的：\n\n```\n{\n  \"name\": \"react-testing-starter-kit\",\n  \"version\": \"0.1.0\",\n  \"description\": \"React starter kit with nice testing environment set up.\",\n  \"main\": \"src/main.js\",\n  \"directories\": {\n    \"test\": \"tests\",\n    \"src\": \"src\",\n    \"dist\": \"dist\"\n  },\n  \"dependencies\": {\n    \"react\": \"^0.14.6\",\n    \"react-dom\": \"^0.14.6\",\n    \"yargs\": \"^3.31.0\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.4.0\",\n    \"babel-loader\": \"^6.2.1\",\n    \"babel-polyfill\": \"^6.3.14\",\n    \"babel-preset-es2015\": \"^6.3.13\",\n    \"babel-preset-react\": \"^6.3.13\",\n    \"babel-register\": \"^6.3.13\",\n    \"chai\": \"^3.4.1\",\n    \"enzyme\": \"^1.2.0\",\n    \"json-loader\": \"^0.5.4\",\n    \"karma\": \"^0.13.19\",\n    \"karma-chai\": \"^0.1.0\",\n    \"karma-mocha\": \"^0.2.1\",\n    \"karma-phantomjs-launcher\": \"^0.2.3\",\n    \"karma-sourcemap-loader\": \"^0.3.6\",\n    \"karma-spec-reporter\": \"0.0.23\",\n    \"karma-webpack\": \"^1.7.0\",\n    \"mocha\": \"^2.3.4\",\n    \"phantomjs\": \"^1.9.19\",\n    \"phantomjs-polyfill\": \"0.0.1\",\n    \"react-addons-test-utils\": \"^0.14.6\",\n    \"sinon\": \"^1.17.2\",\n    \"webpack\": \"^1.12.11\",\n    \"webpack-dev-server\": \"^1.14.1\"\n  },\n  \"scripts\": {\n    \"test\": \"node_modules/.bin/karma start karma.config.js\",\n    \"test:dev\": \"npm run test -- --watch\",\n    \"build\": \"webpack\",\n    \"dev\": \"webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist\",\n    \"old_test\": \"mocha --compilers js:babel-register --require ./test/test_helper.js --recursive\",\n    \"old_test:watch\": \"npm test -- --watch\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"tbd\"\n  },\n  \"author\": \"Spencer Dixon\",\n  \"license\": \"ISC\"\n}\n```\n\n在测试套件中外加 webpack 预处理，我们现在可以删除那些在测试内烦人的相对路径声明：\n\n```\n// test/containers/Root.spec.js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport Root from 'containers/Root';               // new import statement\n// import Root from '../../src/containers/Root';  // old import statement\n\n// test/components/CommentList.spec.js\nimport React from 'react';\nimport CommentList from 'components/CommentList';               // new import statement\n// import CommentList from '../../src/components/CommentList';  // old import statement\n\nimport {\n  describeWithDOM,\n  mount,\n  shallow,\n  spyLifecycle\n} from 'enzyme';\n\n```\n\n现在使用这个 starter kit 开发，你需要输入以下这些命令去运行程序：\n\n```\nnpm run dev         # note the addition of run\nnpm run test:dev    # note the addition of run\n```\n\n[如果还有什么不清楚的地方，可以在 github 上查看该源码](https://github.com/SpencerCDixon/react-testing-starter-kit)。\n\n### 结论\n\n我们已经建立了一个坚实的测试环境，可以根据你的项目具体需求去改变和发展。在下一次的文章中，我将花更多的时间在特殊场景的测试，还有如何测试 Redux，我更喜欢 flux 的实现。\n\n虽然我只使用 React 开发了数月，但我已经爱上它了。我希望本教程可以帮助你更深入地理解一些 React 测试的最佳实践。有任何问题或评论随时联系我。测试是我们的好朋友！\n\n[**原文链接**](http://spencerdixon.com/blog/test-driven-react-tutorial.html?utm_campaign=Front%2BEnd%2BNewsletter&utm_medium=email&utm_source=Front_End_Newsletter_2)\n","source":"_posts/article-17.md","raw":"title: React 测试驱动教程\ndate: 2016-01-21 18:19:35\ncategories:\n  - 好文分享\ntags:\n  - 译文\n  - React\n  - Tutorial\n  - Testing\n  - JavaScript\n---\n\n测试是开发周期中的一个重要组成部分。没有测试的代码被称为：遗留代码。对于我而言，第一次学习 React 和 JavaScript 的时候，感到很有压力。如果你也是刚开始学习 JS/React，并加入他们的社区，那么也可能会有相同的感觉。想到的会是：\n\n * 我应该用哪一个构建工具？\n * 哪一个测试框架比较好？\n * 我应该学习哪种流模式？\n * 我需要用到流吗？\n\n为了解决这些烦恼，我决定写这篇文章。经过几个小时的博客文章阅读，查阅 JS 开发者的源码，还有参加 Florida 的 JSConf，终于让我找到了自己的测试“槽”。开始让我觉得没有经过测试的 React 程序代码是如此的不标准和凌乱。我想活在一个没有这种感觉的世界，但后来想想，这是不对的。\n\n本教程所有的代码都可以在我的 [github 仓库](https://github.com/SpencerCDixon/react-testing-starter-kit)中找到。\n\n让我们开始吧！\n\n<!-- more -->\n\n## 设置 Webpack\n本教程不是一个教如何使用 webpack，所以我不会详细说，但重要的是要了解基本的东西。\nWebpack 就像 Rails 中的 Assets Pipeline 一样。在基础层面上而言，在运行 react 应用时，\n会在处理你的代码和服务的前后，只生成一个 `bundle.js` 在客户端。\n\n因为它是一个非常强大的工具，所以我们会常常用到。在开始，Webpack 的功能可能会吓到你，\n但我建议你坚持使用下去，一旦你了解了其中的原理，就会觉得得心应手。而你只需给它一个机会去表现。\n\n通常我们不会喜欢那些我们不会的，或是害怕的。然而，一旦你克服初始不适并开始理解它，总会变得很有趣。事实上，这正是我对测试的感受。当开始时讨厌它，在熟悉后喜欢它 :-)\n\n如果感兴趣，这里有一些资源来更多地了解关于 webpack：\n\n1.  [Webpack Cookbook](https://christianalfoni.github.io/react-webpack-cookbook/Getting-started.html)（使用的是 Babel 5，但对于学习 Webpack 的基本原理而言还是很有用的）\n2.  [Webpack 初学者可以看这篇文章](http://blog.madewithlove.be/post/webpack-your-bags/)\n3.  [Pete Hunts 所写的 Webpack How-to](https://github.com/petehunt/webpack-howto)\n\n> **注意**：如果要持续随本教程实验，建议使用 Node 版本为 `v5.1.0`。当然版本 `>4` 的也是可以的。\n\n首先，安装所有关于 webpack 和 babel 的依赖。Babel 是一个转译器，允许你在开发时使用 ES6（es2015）和 ES7 的特性，然后将这些代码转译成浏览器可以识别的 ES5 代码。\n\n```\nmkdir tdd_react\ncd tdd_react\nnpm init        # follow along with normal npm init to set up project\n\nnpm i babel-loader babel-core webpack --save-dev\n```\n\n> `npm i` 是 npm install 的别名。\n\n接下来，让我们设置项目的路径和创建一个 `webpack.config.js` 文件：\n\n```\nmkdir src                  # where all our source code will live\ntouch src/main.js          # this will be the entry point for our webpack bundling\nmkdir test                 # place to store all our tests\nmkdir dist                 # this is where the bundled javascript from webpack will go\ntouch webpack.config.js    # our webpack configuration file\n```\n\n初始化的 webpack config 会很小。阅读这些注释，理解下发生了什么：\n\n```\n// our webpack.config.js file located in project root\n\nvar webpack = require('webpack');\nvar path = require('path');                // a useful node path helper library\n\nvar config = {\n  entry: ['./src/main.js'],                // the entry point for our app\n  output: {\n    path: path.resolve(__dirname, 'dist'), // store the bundled output in dist/bundle.js\n    filename: 'bundle.js'                  // specifying file name for our compiled assets\n  },\n  module: {\n    loaders: [\n      // telling webpack which loaders we want to use.  For now just run the\n      // code through the babel-loader.  'babel' is an alias for babel-loader\n      { test: /\\.js$/, loaders: ['babel'], exclude: /node_modules/ }\n    ]\n  }\n}\n\nmodule.exports = config;\n```\n\n为了让 babel 更好地工作，我们需要定义哪个 `presets` 是我们需要用到的。让我们继续，并且安装 React 和 ES6 预处理所需的东西：\n\n```\nnpm i babel-preset-react babel-preset-es2015 --save-dev\n```\n\n现在我们有一些选项。在 webpack config 文件中，会告诉你哪一块是做 bebel 预处理的：\n\n```\nloaders: [\n  {\n    test: /\\.js$/,\n    loaders: ['babel'],\n    exclude: /node_modules/,\n    query: {\n      presets: ['react', 'es2015']\n    }\n  }\n]\n```\n\n另外的方法是将他们存在 `.babelrc` 文件中，这也用在我的项目中。将 babel 预处理存储在 `.babelrc` 中，对于以后的开发者而言，更容易去找到哪个 babel 预处理是可用的。此外，当我们将 Karma 设置到 webpack 之后，因为 `.babelrc` 文件的存在，我们就不再需要其他的预处理配置了。\n\n```\n# inside our project root\ntouch .babelrc\n```\n\n将下面这段粘贴到预处理文件中：\n\n```\n# .babelrc\n{\n  \"presets\": [\"react\", \"es2015\"]\n}\n```\n\n为了确认它能否工作，让我们在 `main.js` 中加入一些 react 代码，并看看所有的包是否正常。接着安装 React 和 React DOM：\n\n```\nnpm i react react-dom -S\n```\n\n> 使用 `-S` 是 `--save` 的别名。\n\n创建第一个 React 组件：\n\n```\n# src/main.js\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass Root extends Component {\n  render() {\n    return <h1> Hello World </h1>;\n  }\n}\n\nrender(<Root />, document.getElementById('root'));\n```\n\n聪明的读者就会察觉我们并没有在根部创建一个 `index.html` 文件。让我们继续，当 `bundle.js` 编译后，将其放到 `/dist` 文件夹中：\n\n```html\n# /dist/index.html\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\"/>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n```\n\n非常棒，让我们继续。最后，我们可以运行 webpack，看看一切是否正常。如果你没有全局安装 webpack（`npm i webpack -g`），你也可以用 node modules 方式进行启动：\n\n```\n./node_modules/.bin/webpack\n```\n\nWebpack 将默认情况下寻找一个配置名称为 `webpack.config.js`。如果你高兴，也可以通过不同 webpack config 作为参数传入。\n\n在 package.json 中创建一个别名，来完成构建工作：\n\n```\n# package.json\n... other stuff\n\"scripts\": {\n  \"build\": \"webpack\"\n}\n```\n\n接下来让 `webpack-dev-server` 提升开发体验：\n\n```\nnpm i webpack-dev-server --save-dev\n```\n\n将 webpack dev server 的入口加入到 `webpack.config.js` 中：\n\n```\n... rest of config\n  entry: [\n    'webpack/hot/dev-server',\n    'webpack-dev-server/client?http://localhost:3000',\n    './src/main.js'\n  ],\n... rest of config\n```\n\n让 script 运行在开发服务器上：\n\n```\n# package.json\n... other stuff\nscripts: {\n  \"dev\": \"webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist\",\n  \"build\": \"webpack\"\n}\n```\n\n在 script 中使用了 `--content-base` 标记，告诉 webpack 我们想服务于 `/dist` 文件夹。我们还定义了 3000 端口，使得更像是 Rails 开发的体验。\n\n最后，在 webpack 配置文件中添加一个 resolve 标记，使进口文件看起来更直观。下面就是配置文件最终的样子：\n\n```\nvar webpack = require('webpack');\nvar path = require('path');\n\nvar config = {\n  entry: [\n    'webpack/hot/dev-server',\n    'webpack-dev-server/client?http://localhost:3000',\n    './src/main.js'\n  ],\n  resolve: {\n    root: [\n      // allows us to import modules as if /src was the root.\n      // so I can do: import Comment from 'components/Comment'\n      // instead of:  import Comment from '../components/Comment' or whatever relative path would be\n      path.resolve(__dirname, './src')\n    ],\n    // allows you to require without the .js at end of filenames\n    // import Component from 'component' vs. import Component from 'component.js'\n    extensions: ['', '.js', '.json', '.jsx']\n  },\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js?$/,\n        // dont run node_modules or bower_components through babel loader\n        exclude: /(node_modules|bower_components)/,\n        // babel is alias for babel-loader\n        // npm i babel-core babel-loader --save-dev\n        loader: 'babel'\n      }\n    ],\n  }\n}\n\nmodule.exports = config;\n```\n\n为确保一切工作正常，让我们运行开发服务器，并且确认我们在屏幕上看到 “Hello World”。\n\n```\nnpm run dev\nopen http://localhost:3000\n```\n\n你应该看到的是这样的：\n\n![Hello World Image](http://i.imgur.com/rYTjH77.png?1)\n\n## 设置 Mocha，Chai，Sinon 和 Enzyme\n\n**Mocha**：将用于运行我们的测试。\n**Chai**：是我们期待的库。应用非常广泛，允许使用 RSpec 一样的语法。\n**Sinon**：将服务于 mocks/stubs/spies.\n**Enzyme**：将用于测试我们的 React components。AirBnB 写的一个很漂亮的测试库。\n\n安装这些包：\n\n```\nnpm i mocha chai sinon --save-dev\n```\n\n如果我们希望能够使用 ES6 编写测试，那么我们需要在运行前对代码进行转译。那么我们需要安装 babel-register：\n\n```\nnpm i babel-register --save-dev\n```\n\n加一些 npm scripts 到 `package.json` 中，让测试更简单：\n\n```\n# ./package.json\n... rest of package.json\n  \"scripts\": {\n    \"test\": \"mocha --compilers js:babel-register --recursive\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"build\": \"webpack\",\n    \"dev\": \"webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist\",\n  },\n\n```\n\n我们的测试脚本要运行 mocha，并使用 `babel-register` 进行转译，然后递归地查看 `/test` 目录。\n\n最终，我们需要设置 Karma，因此 npm script 会变得无效，但如果不设置，它将会正常工作。`npm run test:watch` 将会监视程序，并在文件发生修改时重新运行。多么高效！\n\n确认它能工作，创建一个 hello world 测试 `/tests/helloWorld.spec.js`：\n\n```\n# /test/helloWorld.spec.js\nimport { expect } from 'chai';\n\ndescribe('hello world', () => {\n  it('works!', () => {\n    expect(true).to.be.true;\n  });\n});\n```\n\n哇...看起来很像 RSpec！\n\n如果每一个测试都要引入 `expect`，这将变得很麻烦，因此让我们新建一个 `test_helper` 文件来保存这些东西：\n\n```\n# /test/test_helper.js\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\nglobal.expect = expect;\nglobal.sinon = sinon;\n```\n\n然后把它包括到 npm 脚本的运行套件中，并通过 `--require ./test/test_helper.js` 来声明：\n\n```\n# package.json script section\n  \"test\": \"mocha --compilers js:babel-register --require ./test/test_helper.js --recursive\",\n```\n\n我也添加了 sinon，因此它也可以全局可用。现在无论什么时候，我们在写一个新的测试时，都不需要手动引入 `expect` 和 `sinon`。\n\n### Enzyme\n现在我们所需的“普通”测试工具都已经设置好了（mocha，chai，sinon），接着让我们安装 Enzyme，并且开始测试 React component！\n\n安装这个包：\n\n```\nnpm i enzyme react-addons-test-utils --save-dev\n```\n\nEnzyme 的重要文档可以[在这里找到](http://airbnb.io/enzyme/)。如果有时间，我推荐阅读 Shallow Rendering 部分。\n> **你会问，什么是 Shallow Rendering？**\n\n对我们来说是一种组件调用 render 方法，得到我们可以断言的 React 元素，而无需实际安装组件到 DOM 上。更多的 React 元素[请看这](https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html)。\n\nEnzyme 会将 shallow rendered 组件包裹进一个特殊的 `wrapper` 中，进而让我们可以测试。如果你用过 Rails，这看起来像是 Capybara 中的 `page` 对象。\n\n让我们为一些合适的 `<Root />` 组件进行 TDD 的驱动开发。\n\n这个 Root 组件会是一个 `container`，意味着在应用中它可以控制 state 的处理。学习 React 中“智能”和“笨拙”组件之间的差异，对于应用程序体系结构是很重要的。[这篇文章很好地解释了它们](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.8cnl19w8l)。\n\n```\n# /tests/containers/Root.spec.js\n\nimport React from 'react';                     // required to get test to work.  we can get around this later with more configuration\nimport { shallow } from 'enzyme';              // method from enzyme which allows us to do shallow render\nimport Root from '../../src/containers/Root';  // import our soon to be component\n\ndescribe('(Container) Root', () => {\n  it('renders as a <div>', () => {\n    const wrapper = shallow(<Root />);\n    expect(wrapper.type()).to.eql('div');\n  });\n\n  it('has style with height 100%', () => {\n    const wrapper = shallow(<Root />);\n    const expectedStyles = {\n      height: '100%',\n      background: '#333'\n    }\n    expect(wrapper.prop('style')).to.eql(expectedStyles);\n  });\n\n  it('contains a header explaining the app', () => {\n    const wrapper = shallow(<Root />);\n    expect(wrapper.find('.welcome-header')).to.have.length(1);\n  });\n});\n```\n\n如果我们用 `npm test` 运行测试，这会失败。因为我们没有在适当的位置创建一个根组件。因此我们可以这样做：\n\n> 如果在任何时候你想看到这段代码的源代码，可以在 [github 仓库](https://github.com/SpencerCDixon/react-testing-starter-kit) 中找到\n\n```\n# /src/containers/Root.js\nimport React, { Component } from 'react';\n\nconst styles = {\n  height: '100%',\n  background: '#333'\n}\n\nclass Root extends Component {\n  render() {\n    return (\n      <div style={styles}>\n        <h1 className='welcome-header'>Welcome to testing React!</h1>\n      </div>\n    )\n  }\n}\n\nexport default Root;\n```\n重新运行测试就可以了。\n\n在我们的测试中有很多重复的东西，因此我们还需要回去做一些重构。由于我们没有给 `Root` 传入任何的 props，那么我们可以 shallow render 它一次，然后就在一个 wrapper 中结束了我们所有的断言。很多时候给定一个特定的 props 后，我发现自己包装的部分测试会在 “sub” describe 块中，然后给一堆断言也有这些 props。如果你用过 RSpec，就类似于使用 “context” 块。\n\n```\ndescribe('(Container) Root', () => {\n  const wrapper = shallow(<Root />);\n\n  it('renders as a <div>', () => {\n    expect(wrapper.type()).to.eql('div');\n  });\n\n  it('has style with height 100%', () => {\n    const expectedStyles = {\n      height: '100%',\n      background: '#333'\n    }\n    expect(wrapper.prop('style')).to.eql(expectedStyles);\n  });\n\n  it('contains a header explaining the app', () => {\n    expect(wrapper.find('.welcome-header')).to.have.length(1);\n  });\n});\n```\n\n尽可能地在你的测试中使用 `shallow`，但偶尔也可能不用。例如，如果你要测试 React 生命周期的方法时，就需要真正地将组件安装出来。\n\n接下来让我们测试一个组件的安装和调用函数，当它安装时，我们可以得到一些暴露在 `sinon` 上的信息和正在使用的 spies。\n\n我们可以假装 `Root` 组件有一个子组件叫 `CommentList`，在安装后将调用任意的回调。当通过给定 props 组件安装时，函数被调用，因此我们就可以测试这个场景。在组件渲染时给评论列表一些 style，然后我们就可以知道 shallow render 是如何处理这些样式的了。`CommentList` 会在一个组件文件夹的 `/src/components/CommentList.js` 中。因为它不处理数据，因此完全取决于 props，换句话说它是一个**纯**（**笨拙**）组件：\n\n```\nimport React from 'react';\n\n// Once we set up Karma to run our tests through webpack\n// we will no longer need to have these long relative paths\nimport CommentList from '../../src/components/CommentList';\nimport {\n  describeWithDOM,\n  mount,\n  shallow,\n  spyLifecycle\n} from 'enzyme';\n\ndescribe('(Component) CommentList', () => {\n\n  // using special describeWithDOM helper that enzyme\n  // provides so if other devs on my team don't have JSDom set up\n  // properly or are using old version of node it won't bork their test suite\n  //\n  // All of our tests that depend on mounting should go inside one of these\n  // special describe blocks\n  describeWithDOM('Lifecycle methods', () => {\n    it('calls componentDidMount', () => {\n      spyLifecyle(CommentList);\n\n      const props = {\n        onMount: () => {},  // an anonymous function in ES6 arrow syntax\n        isActive: false\n      }\n\n      // using destructuring to pass props down\n      // easily and then mounting the component\n      mount(<CommentList {...props} />);\n\n      // CommentList's componentDidMount should have been\n      // called once.  spyLifecyle attaches sinon spys so we can\n      // make this assertion\n      expect(\n        CommentList.prototype.componentDidMount.calledOnce\n      ).to.be.true;\n    });\n\n    it('calls onMount prop once it mounts', () => {\n      // create a spy for the onMount function\n      const props = { onMount: sinon.spy() };\n\n      // mount our component\n      mount(<CommentList {...props} />);\n\n      // expect that onMount was called\n      expect(props.onMount.calledOnce).to.be.true;\n    });\n  });\n});\n```\n\n还有很多，阅读这些注释可以帮助你更好地理解。看看这些实践，让测试可以通过，然后再回头看看这些测试，验证下你所理解的东西。\n\n```\n# /src/components/CommentList.js\nimport React, { Component, PropTypes } from 'react';\n\nconst propTypes = {\n  onMount: PropTypes.func.isRequired,\n  isActive: PropTypes.bool\n};\n\nclass CommentList extends Component {\n  componentDidMount() {\n    this.props.onMount();\n  }\n\n  render() {\n    return (\n      <ul>\n        <li> Comment One </li>\n      </ul>\n    )\n  }\n}\n\nCommentList.propTypes = propTypes;\nexport default CommentList;\n```\n\n运行 `npm test` ，现在这些套件应该可以通过测试了。\n\n接下来让我们添加一些 shallow rendered 测试，当给定一个 `isActive` 的 props 时，来确保我们的组件使用了适当的 CSS class。\n\n```\n... previous tests\n\n  it('should render as a <ul>', () => {\n    const props = { onMount: () => {} };\n    const wrapper = shallow(<CommentList  {...props} />);\n    expect(wrapper.type()).to.eql('ul');\n  });\n\n  describe('when active...', () => {\n    const wrapper = shallow(\n      // just passing isActive is an alias for true\n      <CommentList onMount={() => {}} isActive />\n    )\n    it('should render with className active-list', () => {\n      expect(wrapper.prop('className')).to.eql('active-list');\n    });\n  });\n\n  describe('when inactive...', () => {\n    const wrapper = shallow(\n      <CommentList onMount={() => {}} isActive={false} />\n    )\n    it('should render with className inactive-list', () => {\n      expect(wrapper.prop('className')).to.eql('inactive-list');\n    });\n  });\n});\n```\n\n让它们通过测试：\n\n```\nclass CommentList extends Component {\n  componentDidMount() {\n    this.props.onMount();\n  }\n\n  render() {\n    const { isActive } = this.props;\n    const className = isActive ? 'active-list' : 'inactive-list';\n\n    return (\n      <ul className={className}>\n        <li> Comment One </li>\n      </ul>\n    )\n  }\n}\n```\n\n此时你应该对如何测试 react 组件已经有了一个很好的理解了。记得去阅读 Enzyme 文档来获得更多的灵感。\n\n## 设置 Karma\n设置 Karma 可能会有些困难。坦白讲，这对我而言也是一件痛苦的工作。通常，当我开发 React 应用时，我会选择使用已经构建好的 starter kit，方便省事。[我非常推荐开发时用的 starter kit](https://github.com/davezuko/react-redux-starter-kit)。\n\n使用 Karma 的价值在于快速测试重载，可以多浏览器测试和最重要的是 webpack 预处理。一旦我们将 Karma 设置好了，在我们运行测试程序时，不仅是只有 `babel-loader`，而是整个 webpack config。这为我们提供了很多便利，使得我们的测试环境与开发环境相同。\n\n让我们开始吧...\n\n```\nnpm i karma karma-chai karma-mocha karma-webpack --save-dev\nnpm i karma-sourcemap-loader karma-phantomjs-launcher --save-dev\nnpm i karma-spec-reporter --save-dev\nnpm i phantomjs --save-dev\n\n# The polyfills arn't required but will help with browser support issues\n# and are easy enough to include in our karma config that I figured why not\nnpm i babel-polyfill phantomjs-polyfill --save-dev\n```\n\n很多包，我知道。相信我完成这个是非常值得的。\n\n对于我们的示例而言，我们将使用 [PhantomJS](http://phantomjs.org/)。没有别的什么原因，这我在 starter kit 中已经用到了。可以按照自己的喜好使用 Chrome，Firefox 或是 Safari，甚至在 PhantomJS 之上。（这是用 Karma 的一件很酷的事）\n\n在配置 karma 之前先安装 `yargs`，它能让你使用命令行参数来定制 Karma 的配置。\n\n```\nnpm i yargs -S\n```\n\n现在我们可以通过创建一个 Karma config 文件去监视我们的文件，当文件发生修改时重新运行并很快地保存。\n\n**Karma Config**：\n```\ntouch karma.config.js\n```\n\n```\n// ./karma.config.js\n\nvar argv = require('yargs').argv;\nvar path = require('path');\n\nmodule.exports = function(config) {\n  config.set({\n    // only use PhantomJS for our 'test' browser\n    browsers: ['PhantomJS'],\n\n    // just run once by default unless --watch flag is passed\n    singleRun: !argv.watch,\n\n    // which karma frameworks do we want integrated\n    frameworks: ['mocha', 'chai'],\n\n    // displays tests in a nice readable format\n    reporters: ['spec'],\n\n    // include some polyfills for babel and phantomjs\n    files: [\n      'node_modules/babel-polyfill/dist/polyfill.js',\n      './node_modules/phantomjs-polyfill/bind-polyfill.js',\n      './test/**/*.js' // specify files to watch for tests\n    ],\n    preprocessors: {\n      // these files we want to be precompiled with webpack\n      // also run tests throug sourcemap for easier debugging\n      ['./test/**/*.js']: ['webpack', 'sourcemap']\n    },\n    // A lot of people will reuse the same webpack config that they use\n    // in development for karma but remove any production plugins like UglifyJS etc.\n    // I chose to just re-write the config so readers can see what it needs to have\n    webpack: {\n       devtool: 'inline-source-map',\n       resolve: {\n        // allow us to import components in tests like:\n        // import Example from 'components/Example';\n        root: path.resolve(__dirname, './src'),\n\n        // allow us to avoid including extension name\n        extensions: ['', '.js', '.jsx'],\n\n        // required for enzyme to work properly\n        alias: {\n          'sinon': 'sinon/pkg/sinon'\n        }\n      },\n      module: {\n        // don't run babel-loader through the sinon module\n        noParse: [\n          /node_modules\\/sinon\\//\n        ],\n        // run babel loader for our tests\n        loaders: [\n          { test: /\\.js?$/, exclude: /node_modules/, loader: 'babel' },\n        ],\n      },\n      // required for enzyme to work properly\n      externals: {\n        'jsdom': 'window',\n        'cheerio': 'window',\n        'react/lib/ExecutionEnvironment': true,\n        'react/lib/ReactContext': 'window'\n      },\n    },\n    webpackMiddleware: {\n      noInfo: true\n    },\n    // tell karma all the plugins we're going to be using to prevent warnings\n    plugins: [\n      'karma-mocha',\n      'karma-chai',\n      'karma-webpack',\n      'karma-phantomjs-launcher',\n      'karma-spec-reporter',\n      'karma-sourcemap-loader'\n    ]\n  });\n};\n```\n阅读所有的注释一次或两次有助于理解这个 config 是做什么的。使用 Webpack 的一大好处是全部都是普通的 JavaScript 代码，并且我们可以“重构”配置文件。事实上，这正是绝大多数 starter kit 所做的！\n\n随着 Karma 设置完成，为运行测试，最后一件事就是要去更新我们的 package.json：\n\n```\n# package.json\n  \"scripts\" {\n    \"test\": \"node_modules/.bin/karma start karma.config.js\",\n    \"test:dev\": \"npm run test -- --watch\",\n    \"old_test\": \"mocha --compilers js:babel-register --require ./test/test_helper.js --recursive\",\n    \"old_test:watch\": \"npm test -- --watch\"\n  }\n```\n\n我建议重命名旧的测试 scripts 的前缀，用 'old_' 表示。\n\n最终的 `package.json` 是这样的：\n\n```\n{\n  \"name\": \"react-testing-starter-kit\",\n  \"version\": \"0.1.0\",\n  \"description\": \"React starter kit with nice testing environment set up.\",\n  \"main\": \"src/main.js\",\n  \"directories\": {\n    \"test\": \"tests\",\n    \"src\": \"src\",\n    \"dist\": \"dist\"\n  },\n  \"dependencies\": {\n    \"react\": \"^0.14.6\",\n    \"react-dom\": \"^0.14.6\",\n    \"yargs\": \"^3.31.0\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.4.0\",\n    \"babel-loader\": \"^6.2.1\",\n    \"babel-polyfill\": \"^6.3.14\",\n    \"babel-preset-es2015\": \"^6.3.13\",\n    \"babel-preset-react\": \"^6.3.13\",\n    \"babel-register\": \"^6.3.13\",\n    \"chai\": \"^3.4.1\",\n    \"enzyme\": \"^1.2.0\",\n    \"json-loader\": \"^0.5.4\",\n    \"karma\": \"^0.13.19\",\n    \"karma-chai\": \"^0.1.0\",\n    \"karma-mocha\": \"^0.2.1\",\n    \"karma-phantomjs-launcher\": \"^0.2.3\",\n    \"karma-sourcemap-loader\": \"^0.3.6\",\n    \"karma-spec-reporter\": \"0.0.23\",\n    \"karma-webpack\": \"^1.7.0\",\n    \"mocha\": \"^2.3.4\",\n    \"phantomjs\": \"^1.9.19\",\n    \"phantomjs-polyfill\": \"0.0.1\",\n    \"react-addons-test-utils\": \"^0.14.6\",\n    \"sinon\": \"^1.17.2\",\n    \"webpack\": \"^1.12.11\",\n    \"webpack-dev-server\": \"^1.14.1\"\n  },\n  \"scripts\": {\n    \"test\": \"node_modules/.bin/karma start karma.config.js\",\n    \"test:dev\": \"npm run test -- --watch\",\n    \"build\": \"webpack\",\n    \"dev\": \"webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist\",\n    \"old_test\": \"mocha --compilers js:babel-register --require ./test/test_helper.js --recursive\",\n    \"old_test:watch\": \"npm test -- --watch\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"tbd\"\n  },\n  \"author\": \"Spencer Dixon\",\n  \"license\": \"ISC\"\n}\n```\n\n在测试套件中外加 webpack 预处理，我们现在可以删除那些在测试内烦人的相对路径声明：\n\n```\n// test/containers/Root.spec.js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport Root from 'containers/Root';               // new import statement\n// import Root from '../../src/containers/Root';  // old import statement\n\n// test/components/CommentList.spec.js\nimport React from 'react';\nimport CommentList from 'components/CommentList';               // new import statement\n// import CommentList from '../../src/components/CommentList';  // old import statement\n\nimport {\n  describeWithDOM,\n  mount,\n  shallow,\n  spyLifecycle\n} from 'enzyme';\n\n```\n\n现在使用这个 starter kit 开发，你需要输入以下这些命令去运行程序：\n\n```\nnpm run dev         # note the addition of run\nnpm run test:dev    # note the addition of run\n```\n\n[如果还有什么不清楚的地方，可以在 github 上查看该源码](https://github.com/SpencerCDixon/react-testing-starter-kit)。\n\n### 结论\n\n我们已经建立了一个坚实的测试环境，可以根据你的项目具体需求去改变和发展。在下一次的文章中，我将花更多的时间在特殊场景的测试，还有如何测试 Redux，我更喜欢 flux 的实现。\n\n虽然我只使用 React 开发了数月，但我已经爱上它了。我希望本教程可以帮助你更深入地理解一些 React 测试的最佳实践。有任何问题或评论随时联系我。测试是我们的好朋友！\n\n[**原文链接**](http://spencerdixon.com/blog/test-driven-react-tutorial.html?utm_campaign=Front%2BEnd%2BNewsletter&utm_medium=email&utm_source=Front_End_Newsletter_2)\n","slug":"article-17","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7emn000kwnprqo8lxvm7","content":"<p>测试是开发周期中的一个重要组成部分。没有测试的代码被称为：遗留代码。对于我而言，第一次学习 React 和 JavaScript 的时候，感到很有压力。如果你也是刚开始学习 JS/React，并加入他们的社区，那么也可能会有相同的感觉。想到的会是：</p>\n<ul>\n<li>我应该用哪一个构建工具？</li>\n<li>哪一个测试框架比较好？</li>\n<li>我应该学习哪种流模式？</li>\n<li>我需要用到流吗？</li>\n</ul>\n<p>为了解决这些烦恼，我决定写这篇文章。经过几个小时的博客文章阅读，查阅 JS 开发者的源码，还有参加 Florida 的 JSConf，终于让我找到了自己的测试“槽”。开始让我觉得没有经过测试的 React 程序代码是如此的不标准和凌乱。我想活在一个没有这种感觉的世界，但后来想想，这是不对的。</p>\n<p>本教程所有的代码都可以在我的 <a href=\"https://github.com/SpencerCDixon/react-testing-starter-kit\" target=\"_blank\" rel=\"external\">github 仓库</a>中找到。</p>\n<p>让我们开始吧！</p>\n<a id=\"more\"></a>\n<h2 id=\"设置-Webpack\"><a href=\"#设置-Webpack\" class=\"headerlink\" title=\"设置 Webpack\"></a>设置 Webpack</h2><p>本教程不是一个教如何使用 webpack，所以我不会详细说，但重要的是要了解基本的东西。<br>Webpack 就像 Rails 中的 Assets Pipeline 一样。在基础层面上而言，在运行 react 应用时，<br>会在处理你的代码和服务的前后，只生成一个 <code>bundle.js</code> 在客户端。</p>\n<p>因为它是一个非常强大的工具，所以我们会常常用到。在开始，Webpack 的功能可能会吓到你，<br>但我建议你坚持使用下去，一旦你了解了其中的原理，就会觉得得心应手。而你只需给它一个机会去表现。</p>\n<p>通常我们不会喜欢那些我们不会的，或是害怕的。然而，一旦你克服初始不适并开始理解它，总会变得很有趣。事实上，这正是我对测试的感受。当开始时讨厌它，在熟悉后喜欢它 :-)</p>\n<p>如果感兴趣，这里有一些资源来更多地了解关于 webpack：</p>\n<ol>\n<li><a href=\"https://christianalfoni.github.io/react-webpack-cookbook/Getting-started.html\" target=\"_blank\" rel=\"external\">Webpack Cookbook</a>（使用的是 Babel 5，但对于学习 Webpack 的基本原理而言还是很有用的）</li>\n<li><a href=\"http://blog.madewithlove.be/post/webpack-your-bags/\" target=\"_blank\" rel=\"external\">Webpack 初学者可以看这篇文章</a></li>\n<li><a href=\"https://github.com/petehunt/webpack-howto\" target=\"_blank\" rel=\"external\">Pete Hunts 所写的 Webpack How-to</a></li>\n</ol>\n<blockquote>\n<p><strong>注意</strong>：如果要持续随本教程实验，建议使用 Node 版本为 <code>v5.1.0</code>。当然版本 <code>&gt;4</code> 的也是可以的。</p>\n</blockquote>\n<p>首先，安装所有关于 webpack 和 babel 的依赖。Babel 是一个转译器，允许你在开发时使用 ES6（es2015）和 ES7 的特性，然后将这些代码转译成浏览器可以识别的 ES5 代码。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir tdd_react</span><br><span class=\"line\">cd tdd_react</span><br><span class=\"line\">npm init        # follow along with <span class=\"built-in\">normal</span> npm init to <span class=\"keyword\">set</span> up <span class=\"comment\">project</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm <span class=\"comment\">i babel-loader babel-core webpack --save-dev</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>npm i</code> 是 npm install 的别名。</p>\n</blockquote>\n<p>接下来，让我们设置项目的路径和创建一个 <code>webpack.config.js</code> 文件：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mkdir</span> src                  <span class=\"comment\"># where all our source code will live</span></span><br><span class=\"line\">touch src/main.js          <span class=\"comment\"># this will be the entry point for our webpack bundling</span></span><br><span class=\"line\"><span class=\"keyword\">mkdir</span> test                 <span class=\"comment\"># place to store all our tests</span></span><br><span class=\"line\"><span class=\"keyword\">mkdir</span> dist                 <span class=\"comment\"># this is where the bundled javascript from webpack will go</span></span><br><span class=\"line\">touch webpack.config.js    <span class=\"comment\"># our webpack configuration file</span></span><br></pre></td></tr></table></figure>\n<p>初始化的 webpack config 会很小。阅读这些注释，理解下发生了什么：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// our webpack.config.js file located in project root</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);                <span class=\"comment\">// a useful node path helper library</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> config = &#123;</span><br><span class=\"line\">  entry: [<span class=\"string\">'./src/main.js'</span>],                <span class=\"comment\">// the entry point for our app</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>), <span class=\"comment\">// store the bundled output in dist/bundle.js</span></span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>                  <span class=\"comment\">// specifying file name for our compiled assets</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      <span class=\"comment\">// telling webpack which loaders we want to use.  For now just run the</span></span><br><span class=\"line\">      <span class=\"comment\">// code through the babel-loader.  'babel' is an alias for babel-loader</span></span><br><span class=\"line\">      &#123; test: <span class=\"regexp\">/\\.js$/</span>, loaders: [<span class=\"string\">'babel'</span>], exclude: <span class=\"regexp\">/node_modules/</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<p>为了让 babel 更好地工作，我们需要定义哪个 <code>presets</code> 是我们需要用到的。让我们继续，并且安装 React 和 ES6 预处理所需的东西：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">npm</span> i <span class=\"keyword\">babel-preset-react </span><span class=\"keyword\">babel-preset-es2015 </span>--save-dev</span><br></pre></td></tr></table></figure>\n<p>现在我们有一些选项。在 webpack config 文件中，会告诉你哪一块是做 bebel 预处理的：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader<span class=\"variable\">s:</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    tes<span class=\"variable\">t:</span> /\\.js$/,</span><br><span class=\"line\">    loader<span class=\"variable\">s:</span> [<span class=\"string\">'babel'</span>],</span><br><span class=\"line\">    exclude: /node_modules/,</span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">      preset<span class=\"variable\">s:</span> [<span class=\"string\">'react'</span>, <span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>另外的方法是将他们存在 <code>.babelrc</code> 文件中，这也用在我的项目中。将 babel 预处理存储在 <code>.babelrc</code> 中，对于以后的开发者而言，更容易去找到哪个 babel 预处理是可用的。此外，当我们将 Karma 设置到 webpack 之后，因为 <code>.babelrc</code> 文件的存在，我们就不再需要其他的预处理配置了。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># inside our project root</span></span><br><span class=\"line\"><span class=\"attribute\">touch</span> .babelrc</span><br></pre></td></tr></table></figure>\n<p>将下面这段粘贴到预处理文件中：</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># .babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"react\"</span>, <span class=\"string\">\"es2015\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了确认它能否工作，让我们在 <code>main.js</code> 中加入一些 react 代码，并看看所有的包是否正常。接着安装 React 和 React DOM：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> react react-dom -S</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <code>-S</code> 是 <code>--save</code> 的别名。</p>\n</blockquote>\n<p>创建第一个 React 组件：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># src/main.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123; <span class=\"type\">Component</span> &#125; from <span class=\"symbol\">'reac</span>t';</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; from <span class=\"symbol\">'react</span>-dom';</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Root</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt; <span class=\"type\">Hello</span> <span class=\"type\">World</span> &lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;<span class=\"type\">Root</span> /&gt;, document.getElementById(<span class=\"symbol\">'roo</span>t'));</span><br></pre></td></tr></table></figure>\n<p>聪明的读者就会察觉我们并没有在根部创建一个 <code>index.html</code> 文件。让我们继续，当 <code>bundle.js</code> 编译后，将其放到 <code>/dist</code> 文件夹中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /dist/index.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>非常棒，让我们继续。最后，我们可以运行 webpack，看看一切是否正常。如果你没有全局安装 webpack（<code>npm i webpack -g</code>），你也可以用 node modules 方式进行启动：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"regexp\">/node_modules/</span>.bin/webpack</span><br></pre></td></tr></table></figure>\n<p>Webpack 将默认情况下寻找一个配置名称为 <code>webpack.config.js</code>。如果你高兴，也可以通过不同 webpack config 作为参数传入。</p>\n<p>在 package.json 中创建一个别名，来完成构建工作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># package.json</span></span><br><span class=\"line\"><span class=\"meta\">... </span>other stuff</span><br><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来让 <code>webpack-dev-server</code> 提升开发体验：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-<span class=\"built_in\">dev</span>-server --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>将 webpack dev server 的入口加入到 <code>webpack.config.js</code> 中：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... rest <span class=\"keyword\">of</span> config</span><br><span class=\"line\">  <span class=\"keyword\">entry</span>: [</span><br><span class=\"line\">    <span class=\"symbol\">'webpack</span>/hot/dev-server',</span><br><span class=\"line\">    <span class=\"symbol\">'webpack</span>-dev-server/client?http://localhost:<span class=\"number\">3000</span>',</span><br><span class=\"line\">    './src/main.js'</span><br><span class=\"line\">  ],</span><br><span class=\"line\">... rest <span class=\"keyword\">of</span> config</span><br></pre></td></tr></table></figure>\n<p>让 script 运行在开发服务器上：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># package.json</span></span><br><span class=\"line\">... other stuff</span><br><span class=\"line\"><span class=\"symbol\">scripts:</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 script 中使用了 <code>--content-base</code> 标记，告诉 webpack 我们想服务于 <code>/dist</code> 文件夹。我们还定义了 3000 端口，使得更像是 Rails 开发的体验。</p>\n<p>最后，在 webpack 配置文件中添加一个 resolve 标记，使进口文件看起来更直观。下面就是配置文件最终的样子：</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\">var path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var config = &#123;</span><br><span class=\"line\">  <span class=\"name\">entry</span>: [</span><br><span class=\"line\">    <span class=\"string\">'webpack/hot/dev-server'</span>,</span><br><span class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"name\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"name\">root</span>: [</span><br><span class=\"line\">      // allows us to <span class=\"keyword\">import</span> modules as <span class=\"keyword\">if</span> /src was the root.</span><br><span class=\"line\">      // so I can <span class=\"name\">do</span>: <span class=\"keyword\">import</span> Comment <span class=\"keyword\">from</span> <span class=\"string\">'components/Comment'</span></span><br><span class=\"line\">      // instead <span class=\"name\">of</span>:  <span class=\"keyword\">import</span> Comment <span class=\"keyword\">from</span> <span class=\"string\">'../components/Comment'</span> <span class=\"keyword\">or</span> whatever relative path would be</span><br><span class=\"line\">      path.resolve(__dirname, <span class=\"string\">'./src'</span>)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    // allows you to <span class=\"built_in\">require</span> without the .js at end of filenames</span><br><span class=\"line\">    // <span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">'component'</span> vs. <span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">'component.js'</span></span><br><span class=\"line\">    <span class=\"name\">extensions</span>: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.jsx'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"name\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"name\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    <span class=\"name\">filename</span>: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"name\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"name\">loaders</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"name\">test</span>: /\\.js?$/,</span><br><span class=\"line\">        // dont run node_modules <span class=\"keyword\">or</span> bower_components through babel loader</span><br><span class=\"line\">        <span class=\"name\">exclude</span>: /(node_modules|bower_components)/,</span><br><span class=\"line\">        // babel is alias <span class=\"keyword\">for</span> babel-loader</span><br><span class=\"line\">        // npm i babel-core babel-loader <span class=\"comment\">--save-dev</span></span><br><span class=\"line\">        <span class=\"name\">loader</span>: <span class=\"string\">'babel'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<p>为确保一切工作正常，让我们运行开发服务器，并且确认我们在屏幕上看到 “Hello World”。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">run</span> dev</span><br><span class=\"line\"><span class=\"built_in\">open</span> http:<span class=\"comment\">//localhost:3000</span></span><br></pre></td></tr></table></figure>\n<p>你应该看到的是这样的：</p>\n<p><img src=\"http://i.imgur.com/rYTjH77.png?1\" alt=\"Hello World Image\"></p>\n<h2 id=\"设置-Mocha，Chai，Sinon-和-Enzyme\"><a href=\"#设置-Mocha，Chai，Sinon-和-Enzyme\" class=\"headerlink\" title=\"设置 Mocha，Chai，Sinon 和 Enzyme\"></a>设置 Mocha，Chai，Sinon 和 Enzyme</h2><p><strong>Mocha</strong>：将用于运行我们的测试。<br><strong>Chai</strong>：是我们期待的库。应用非常广泛，允许使用 RSpec 一样的语法。<br><strong>Sinon</strong>：将服务于 mocks/stubs/spies.<br><strong>Enzyme</strong>：将用于测试我们的 React components。AirBnB 写的一个很漂亮的测试库。</p>\n<p>安装这些包：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mocha chai sinon --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>如果我们希望能够使用 ES6 编写测试，那么我们需要在运行前对代码进行转译。那么我们需要安装 babel-register：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-register --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>加一些 npm scripts 到 <code>package.json</code> 中，让测试更简单：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ./<span class=\"keyword\">package</span>.json</span><br><span class=\"line\">... rest <span class=\"keyword\">of</span> <span class=\"keyword\">package</span>.json</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --compilers js:babel-register --recursive\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test:watch\"</span>: <span class=\"string\">\"npm test -- --watch\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist\"</span>,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>我们的测试脚本要运行 mocha，并使用 <code>babel-register</code> 进行转译，然后递归地查看 <code>/test</code> 目录。</p>\n<p>最终，我们需要设置 Karma，因此 npm script 会变得无效，但如果不设置，它将会正常工作。<code>npm run test:watch</code> 将会监视程序，并在文件发生修改时重新运行。多么高效！</p>\n<p>确认它能工作，创建一个 hello world 测试 <code>/tests/helloWorld.spec.js</code>：</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /test/helloWorld.spec.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'hello world'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'works!'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"literal\">true</span>).to.be.<span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>哇…看起来很像 RSpec！</p>\n<p>如果每一个测试都要引入 <code>expect</code>，这将变得很麻烦，因此让我们新建一个 <code>test_helper</code> 文件来保存这些东西：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /test/test_helper.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sinon <span class=\"keyword\">from</span> <span class=\"string\">'sinon'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">global</span>.expect = expect;</span><br><span class=\"line\"><span class=\"built_in\">global</span>.sinon = sinon;</span><br></pre></td></tr></table></figure>\n<p>然后把它包括到 npm 脚本的运行套件中，并通过 <code>--require ./test/test_helper.js</code> 来声明：</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># package.json script section</span></span><br><span class=\"line\">  <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --compilers js:babel-register --require ./test/test_helper.js --recursive\"</span>,</span><br></pre></td></tr></table></figure>\n<p>我也添加了 sinon，因此它也可以全局可用。现在无论什么时候，我们在写一个新的测试时，都不需要手动引入 <code>expect</code> 和 <code>sinon</code>。</p>\n<h3 id=\"Enzyme\"><a href=\"#Enzyme\" class=\"headerlink\" title=\"Enzyme\"></a>Enzyme</h3><p>现在我们所需的“普通”测试工具都已经设置好了（mocha，chai，sinon），接着让我们安装 Enzyme，并且开始测试 React component！</p>\n<p>安装这个包：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i enzyme react-addons-test-utils --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>Enzyme 的重要文档可以<a href=\"http://airbnb.io/enzyme/\" target=\"_blank\" rel=\"external\">在这里找到</a>。如果有时间，我推荐阅读 Shallow Rendering 部分。</p>\n<blockquote>\n<p><strong>你会问，什么是 Shallow Rendering？</strong></p>\n</blockquote>\n<p>对我们来说是一种组件调用 render 方法，得到我们可以断言的 React 元素，而无需实际安装组件到 DOM 上。更多的 React 元素<a href=\"https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html\" target=\"_blank\" rel=\"external\">请看这</a>。</p>\n<p>Enzyme 会将 shallow rendered 组件包裹进一个特殊的 <code>wrapper</code> 中，进而让我们可以测试。如果你用过 Rails，这看起来像是 Capybara 中的 <code>page</code> 对象。</p>\n<p>让我们为一些合适的 <code>&lt;Root /&gt;</code> 组件进行 TDD 的驱动开发。</p>\n<p>这个 Root 组件会是一个 <code>container</code>，意味着在应用中它可以控制 state 的处理。学习 React 中“智能”和“笨拙”组件之间的差异，对于应用程序体系结构是很重要的。<a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.8cnl19w8l\" target=\"_blank\" rel=\"external\">这篇文章很好地解释了它们</a>。</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /tests/containers/Root.spec.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;                     // required to get test to work.  we can get around this later with more configuration</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallow &#125; <span class=\"keyword\">from</span> <span class=\"string\">'enzyme'</span>;              // method <span class=\"keyword\">from</span> enzyme which allows us to <span class=\"keyword\">do</span> shallow render</span><br><span class=\"line\"><span class=\"keyword\">import</span> Root <span class=\"keyword\">from</span> <span class=\"string\">'../../src/containers/Root'</span>;  // <span class=\"keyword\">import</span> our soon to be component</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'(Container) Root'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'renders as a &lt;div&gt;'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    const wrapper = shallow(&lt;Root /&gt;);</span><br><span class=\"line\">    expect(wrapper.<span class=\"built_in\">type</span>()).to.eql(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'has style with height 100%'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    const wrapper = shallow(&lt;Root /&gt;);</span><br><span class=\"line\">    const expectedStyles = &#123;</span><br><span class=\"line\">      <span class=\"name\">height</span>: <span class=\"string\">'100%'</span>,</span><br><span class=\"line\">      <span class=\"name\">background</span>: <span class=\"string\">'#333'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    expect(wrapper.prop(<span class=\"string\">'style'</span>)).to.eql(expectedStyles);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'contains a header explaining the app'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    const wrapper = shallow(&lt;Root /&gt;);</span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.welcome-header'</span>)).to.have.length(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果我们用 <code>npm test</code> 运行测试，这会失败。因为我们没有在适当的位置创建一个根组件。因此我们可以这样做：</p>\n<blockquote>\n<p>如果在任何时候你想看到这段代码的源代码，可以在 <a href=\"https://github.com/SpencerCDixon/react-testing-starter-kit\" target=\"_blank\" rel=\"external\">github 仓库</a> 中找到</p>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /src/containers/<span class=\"type\">Root</span>.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123; <span class=\"type\">Component</span> &#125; from <span class=\"symbol\">'reac</span>t';</span><br><span class=\"line\"></span><br><span class=\"line\">const styles = &#123;</span><br><span class=\"line\">  height: <span class=\"symbol\">'100</span>%',</span><br><span class=\"line\">  background: '#<span class=\"number\">333</span>'</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Root</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div style=&#123;styles&#125;&gt;</span><br><span class=\"line\">        &lt;h1 className=<span class=\"symbol\">'welcome</span>-header'&gt;<span class=\"type\">Welcome</span> to testing <span class=\"type\">React</span>!&lt;/h1&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"type\">Root</span>;</span><br></pre></td></tr></table></figure>\n<p>重新运行测试就可以了。</p>\n<p>在我们的测试中有很多重复的东西，因此我们还需要回去做一些重构。由于我们没有给 <code>Root</code> 传入任何的 props，那么我们可以 shallow render 它一次，然后就在一个 wrapper 中结束了我们所有的断言。很多时候给定一个特定的 props 后，我发现自己包装的部分测试会在 “sub” describe 块中，然后给一堆断言也有这些 props。如果你用过 RSpec，就类似于使用 “context” 块。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe('(Container) Root', () =&gt; &#123;</span><br><span class=\"line\">  const wrapper = shallow(<span class=\"name\">&lt;Root</span> /&gt;)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  it('renders as a &lt;div&gt;', () =&gt; &#123;</span><br><span class=\"line\">    expect(<span class=\"name\">wrapper</span>.type()).to.eql('div')<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  it('has style with height <span class=\"number\">100</span>%', () =&gt; &#123;</span><br><span class=\"line\">    const expectedStyles = &#123;</span><br><span class=\"line\">      height: '<span class=\"number\">100</span>%',</span><br><span class=\"line\">      background: '#333'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    expect(<span class=\"name\">wrapper</span>.prop('style')).to.eql(<span class=\"name\">expectedStyles</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  it('contains a header explaining the app', () =&gt; &#123;</span><br><span class=\"line\">    expect(<span class=\"name\">wrapper</span>.find('.welcome-header')).to.have.length(<span class=\"number\">1</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>尽可能地在你的测试中使用 <code>shallow</code>，但偶尔也可能不用。例如，如果你要测试 React 生命周期的方法时，就需要真正地将组件安装出来。</p>\n<p>接下来让我们测试一个组件的安装和调用函数，当它安装时，我们可以得到一些暴露在 <code>sinon</code> 上的信息和正在使用的 spies。</p>\n<p>我们可以假装 <code>Root</code> 组件有一个子组件叫 <code>CommentList</code>，在安装后将调用任意的回调。当通过给定 props 组件安装时，函数被调用，因此我们就可以测试这个场景。在组件渲染时给评论列表一些 style，然后我们就可以知道 shallow render 是如何处理这些样式的了。<code>CommentList</code> 会在一个组件文件夹的 <code>/src/components/CommentList.js</code> 中。因为它不处理数据，因此完全取决于 props，换句话说它是一个<strong>纯</strong>（<strong>笨拙</strong>）组件：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React from <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Once we set up Karma to run our tests through webpack</span></span><br><span class=\"line\"><span class=\"comment\">// we will no longer need to have these long relative paths</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> CommentList from <span class=\"string\">'../../src/components/CommentList'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  describeWithDOM,</span><br><span class=\"line\">  mount,</span><br><span class=\"line\">  shallow,</span><br><span class=\"line\">  spyLifecycle</span><br><span class=\"line\">&#125; from <span class=\"string\">'enzyme'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'(Component) CommentList'</span>, () =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// using special describeWithDOM helper that enzyme</span></span><br><span class=\"line\">  <span class=\"comment\">// provides so if other devs on my team don't have JSDom set up</span></span><br><span class=\"line\">  <span class=\"comment\">// properly or are using old version of node it won't bork their test suite</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// All of our tests that depend on mounting should go inside one of these</span></span><br><span class=\"line\">  <span class=\"comment\">// special describe blocks</span></span><br><span class=\"line\">  describeWithDOM(<span class=\"string\">'Lifecycle methods'</span>, () =&gt; &#123;</span><br><span class=\"line\">    it(<span class=\"string\">'calls componentDidMount'</span>, () =&gt; &#123;</span><br><span class=\"line\">      spyLifecyle(CommentList);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> props = &#123;</span><br><span class=\"line\">        onMount: () =&gt; &#123;&#125;,  <span class=\"comment\">// an anonymous function in ES6 arrow syntax</span></span><br><span class=\"line\">        isActive: <span class=\"keyword\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// using destructuring to pass props down</span></span><br><span class=\"line\">      <span class=\"comment\">// easily and then mounting the component</span></span><br><span class=\"line\">      mount(&lt;CommentList &#123;...props&#125; /&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// CommentList's componentDidMount should have been</span></span><br><span class=\"line\">      <span class=\"comment\">// called once.  spyLifecyle attaches sinon spys so we can</span></span><br><span class=\"line\">      <span class=\"comment\">// make this assertion</span></span><br><span class=\"line\">      expect(</span><br><span class=\"line\">        CommentList.prototype.componentDidMount.calledOnce</span><br><span class=\"line\">      ).to.be.<span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'calls onMount prop once it mounts'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create a spy for the onMount function</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> props = &#123; onMount: sinon.spy() &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// mount our component</span></span><br><span class=\"line\">      mount(&lt;CommentList &#123;...props&#125; /&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// expect that onMount was called</span></span><br><span class=\"line\">      expect(props.onMount.calledOnce).to.be.<span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>还有很多，阅读这些注释可以帮助你更好地理解。看看这些实践，让测试可以通过，然后再回头看看这些测试，验证下你所理解的东西。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /src/components/<span class=\"type\">CommentList</span>.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123; <span class=\"type\">Component</span>, <span class=\"type\">PropTypes</span> &#125; from <span class=\"symbol\">'reac</span>t';</span><br><span class=\"line\"></span><br><span class=\"line\">const propTypes = &#123;</span><br><span class=\"line\">  onMount: <span class=\"type\">PropTypes</span>.func.isRequired,</span><br><span class=\"line\">  isActive: <span class=\"type\">PropTypes</span>.bool</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommentList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onMount();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">        &lt;li&gt; <span class=\"type\">Comment</span> <span class=\"type\">One</span> &lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">CommentList</span>.propTypes = propTypes;</span><br><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"type\">CommentList</span>;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>npm test</code> ，现在这些套件应该可以通过测试了。</p>\n<p>接下来让我们添加一些 shallow rendered 测试，当给定一个 <code>isActive</code> 的 props 时，来确保我们的组件使用了适当的 CSS class。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... previous tests</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'should render as a &lt;ul&gt;'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    const props = &#123; onMount: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125; &#125;;</span><br><span class=\"line\">    const wrapper = shallow(&lt;CommentList  &#123;...props&#125; /&gt;);</span><br><span class=\"line\">    expect(wrapper.type()).to.eql(<span class=\"string\">'ul'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'when active...'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    const wrapper = shallow(</span><br><span class=\"line\">      <span class=\"regexp\">//</span> just passing isActive <span class=\"keyword\">is</span> an alias <span class=\"keyword\">for</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      &lt;CommentList onMount=&#123;() =&gt; &#123;&#125;&#125; isActive /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    it(<span class=\"string\">'should render with className active-list'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      expect(wrapper.prop(<span class=\"string\">'className'</span>)).to.eql(<span class=\"string\">'active-list'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'when inactive...'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    const wrapper = shallow(</span><br><span class=\"line\">      &lt;CommentList onMount=&#123;() =&gt; &#123;&#125;&#125; isActive=&#123;<span class=\"literal\">false</span>&#125; /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    it(<span class=\"string\">'should render with className inactive-list'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      expect(wrapper.prop(<span class=\"string\">'className'</span>)).to.eql(<span class=\"string\">'inactive-list'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>让它们通过测试：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommentList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onMount();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123; isActive &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    const className = isActive ? <span class=\"symbol\">'active</span>-list' : <span class=\"symbol\">'inactive</span>-list';</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;ul className=&#123;className&#125;&gt;</span><br><span class=\"line\">        &lt;li&gt; <span class=\"type\">Comment</span> <span class=\"type\">One</span> &lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时你应该对如何测试 react 组件已经有了一个很好的理解了。记得去阅读 Enzyme 文档来获得更多的灵感。</p>\n<h2 id=\"设置-Karma\"><a href=\"#设置-Karma\" class=\"headerlink\" title=\"设置 Karma\"></a>设置 Karma</h2><p>设置 Karma 可能会有些困难。坦白讲，这对我而言也是一件痛苦的工作。通常，当我开发 React 应用时，我会选择使用已经构建好的 starter kit，方便省事。<a href=\"https://github.com/davezuko/react-redux-starter-kit\" target=\"_blank\" rel=\"external\">我非常推荐开发时用的 starter kit</a>。</p>\n<p>使用 Karma 的价值在于快速测试重载，可以多浏览器测试和最重要的是 webpack 预处理。一旦我们将 Karma 设置好了，在我们运行测试程序时，不仅是只有 <code>babel-loader</code>，而是整个 webpack config。这为我们提供了很多便利，使得我们的测试环境与开发环境相同。</p>\n<p>让我们开始吧…</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i karma karma-chai karma-mocha karma-webpack <span class=\"comment\">--save-dev</span></span><br><span class=\"line\">npm i karma-sourcemap-loader karma-phantomjs-launcher <span class=\"comment\">--save-dev</span></span><br><span class=\"line\">npm i karma-spec-reporter <span class=\"comment\">--save-dev</span></span><br><span class=\"line\">npm i phantomjs <span class=\"comment\">--save-dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The polyfills arn't required but will help with browser support issues</span></span><br><span class=\"line\"><span class=\"comment\"># and are easy enough to include in our karma config that I figured why not</span></span><br><span class=\"line\">npm i babel-polyfill phantomjs-polyfill <span class=\"comment\">--save-dev</span></span><br></pre></td></tr></table></figure>\n<p>很多包，我知道。相信我完成这个是非常值得的。</p>\n<p>对于我们的示例而言，我们将使用 <a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"external\">PhantomJS</a>。没有别的什么原因，这我在 starter kit 中已经用到了。可以按照自己的喜好使用 Chrome，Firefox 或是 Safari，甚至在 PhantomJS 之上。（这是用 Karma 的一件很酷的事）</p>\n<p>在配置 karma 之前先安装 <code>yargs</code>，它能让你使用命令行参数来定制 Karma 的配置。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> yargs -S</span><br></pre></td></tr></table></figure>\n<p>现在我们可以通过创建一个 Karma config 文件去监视我们的文件，当文件发生修改时重新运行并很快地保存。</p>\n<p><strong>Karma Config</strong>：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch karma<span class=\"selector-class\">.config</span><span class=\"selector-class\">.js</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./karma.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> argv = <span class=\"built_in\">require</span>(<span class=\"string\">'yargs'</span>).argv;</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.set(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// only use PhantomJS for our 'test' browser</span></span><br><span class=\"line\">    browsers: [<span class=\"string\">'PhantomJS'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// just run once by default unless --watch flag is passed</span></span><br><span class=\"line\">    singleRun: !argv.watch,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// which karma frameworks do we want integrated</span></span><br><span class=\"line\">    frameworks: [<span class=\"string\">'mocha'</span>, <span class=\"string\">'chai'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// displays tests in a nice readable format</span></span><br><span class=\"line\">    reporters: [<span class=\"string\">'spec'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// include some polyfills for babel and phantomjs</span></span><br><span class=\"line\">    files: [</span><br><span class=\"line\">      <span class=\"string\">'node_modules/babel-polyfill/dist/polyfill.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'./node_modules/phantomjs-polyfill/bind-polyfill.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'./test/**/*.js'</span> <span class=\"comment\">// specify files to watch for tests</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    preprocessors: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// these files we want to be precompiled with webpack</span></span><br><span class=\"line\">      <span class=\"comment\">// also run tests throug sourcemap for easier debugging</span></span><br><span class=\"line\">      [<span class=\"string\">'./test/**/*.js'</span>]: [<span class=\"string\">'webpack'</span>, <span class=\"string\">'sourcemap'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// A lot of people will reuse the same webpack config that they use</span></span><br><span class=\"line\">    <span class=\"comment\">// in development for karma but remove any production plugins like UglifyJS etc.</span></span><br><span class=\"line\">    <span class=\"comment\">// I chose to just re-write the config so readers can see what it needs to have</span></span><br><span class=\"line\">    webpack: &#123;</span><br><span class=\"line\">       devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">       resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// allow us to import components in tests like:</span></span><br><span class=\"line\">        <span class=\"comment\">// import Example from 'components/Example';</span></span><br><span class=\"line\">        root: path.resolve(__dirname, <span class=\"string\">'./src'</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// allow us to avoid including extension name</span></span><br><span class=\"line\">        extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// required for enzyme to work properly</span></span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">          <span class=\"string\">'sinon'</span>: <span class=\"string\">'sinon/pkg/sinon'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// don't run babel-loader through the sinon module</span></span><br><span class=\"line\">        noParse: [</span><br><span class=\"line\">          <span class=\"regexp\">/node_modules\\/sinon\\//</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"comment\">// run babel loader for our tests</span></span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">          &#123; test: <span class=\"regexp\">/\\.js?$/</span>, exclude: <span class=\"regexp\">/node_modules/</span>, loader: <span class=\"string\">'babel'</span> &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// required for enzyme to work properly</span></span><br><span class=\"line\">      externals: &#123;</span><br><span class=\"line\">        <span class=\"string\">'jsdom'</span>: <span class=\"string\">'window'</span>,</span><br><span class=\"line\">        <span class=\"string\">'cheerio'</span>: <span class=\"string\">'window'</span>,</span><br><span class=\"line\">        <span class=\"string\">'react/lib/ExecutionEnvironment'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'react/lib/ReactContext'</span>: <span class=\"string\">'window'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    webpackMiddleware: &#123;</span><br><span class=\"line\">      noInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// tell karma all the plugins we're going to be using to prevent warnings</span></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"string\">'karma-mocha'</span>,</span><br><span class=\"line\">      <span class=\"string\">'karma-chai'</span>,</span><br><span class=\"line\">      <span class=\"string\">'karma-webpack'</span>,</span><br><span class=\"line\">      <span class=\"string\">'karma-phantomjs-launcher'</span>,</span><br><span class=\"line\">      <span class=\"string\">'karma-spec-reporter'</span>,</span><br><span class=\"line\">      <span class=\"string\">'karma-sourcemap-loader'</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>阅读所有的注释一次或两次有助于理解这个 config 是做什么的。使用 Webpack 的一大好处是全部都是普通的 JavaScript 代码，并且我们可以“重构”配置文件。事实上，这正是绝大多数 starter kit 所做的！</p>\n<p>随着 Karma 设置完成，为运行测试，最后一件事就是要去更新我们的 package.json：</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># package.json</span></span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"node_modules/.bin/karma start karma.config.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test:dev\"</span>: <span class=\"string\">\"npm run test -- --watch\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"old_test\"</span>: <span class=\"string\">\"mocha --compilers js:babel-register --require ./test/test_helper.js --recursive\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"old_test:watch\"</span>: <span class=\"string\">\"npm test -- --watch\"</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>我建议重命名旧的测试 scripts 的前缀，用 ‘old_’ 表示。</p>\n<p>最终的 <code>package.json</code> 是这样的：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"react-testing-starter-kit\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"React starter kit with nice testing environment set up.\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"src/main.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"directories\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"tests\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"src\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"dist\"</span>: <span class=\"string\">\"dist\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^0.14.6\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^0.14.6\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"yargs\"</span>: <span class=\"string\">\"^3.31.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.4.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-polyfill\"</span>: <span class=\"string\">\"^6.3.14\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.3.13\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.3.13\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-register\"</span>: <span class=\"string\">\"^6.3.13\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"chai\"</span>: <span class=\"string\">\"^3.4.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"enzyme\"</span>: <span class=\"string\">\"^1.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"json-loader\"</span>: <span class=\"string\">\"^0.5.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma\"</span>: <span class=\"string\">\"^0.13.19\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma-chai\"</span>: <span class=\"string\">\"^0.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma-mocha\"</span>: <span class=\"string\">\"^0.2.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma-phantomjs-launcher\"</span>: <span class=\"string\">\"^0.2.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma-sourcemap-loader\"</span>: <span class=\"string\">\"^0.3.6\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma-spec-reporter\"</span>: <span class=\"string\">\"0.0.23\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma-webpack\"</span>: <span class=\"string\">\"^1.7.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mocha\"</span>: <span class=\"string\">\"^2.3.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"phantomjs\"</span>: <span class=\"string\">\"^1.9.19\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"phantomjs-polyfill\"</span>: <span class=\"string\">\"0.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-addons-test-utils\"</span>: <span class=\"string\">\"^0.14.6\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sinon\"</span>: <span class=\"string\">\"^1.17.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.12.11\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.14.1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"node_modules/.bin/karma start karma.config.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"test:dev\"</span>: <span class=\"string\">\"npm run test -- --watch\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"old_test\"</span>: <span class=\"string\">\"mocha --compilers js:babel-register --require ./test/test_helper.js --recursive\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"old_test:watch\"</span>: <span class=\"string\">\"npm test -- --watch\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"repository\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"tbd\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"Spencer Dixon\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在测试套件中外加 webpack 预处理，我们现在可以删除那些在测试内烦人的相对路径声明：</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test/containers/Root.spec.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallow &#125; <span class=\"keyword\">from</span> <span class=\"string\">'enzyme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Root <span class=\"keyword\">from</span> <span class=\"string\">'containers/Root'</span>;               // new <span class=\"keyword\">import</span> statement</span><br><span class=\"line\">// <span class=\"keyword\">import</span> Root <span class=\"keyword\">from</span> <span class=\"string\">'../../src/containers/Root'</span>;  // old <span class=\"keyword\">import</span> statement</span><br><span class=\"line\"></span><br><span class=\"line\">// test/components/CommentList.spec.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> CommentList <span class=\"keyword\">from</span> <span class=\"string\">'components/CommentList'</span>;               // new <span class=\"keyword\">import</span> statement</span><br><span class=\"line\">// <span class=\"keyword\">import</span> CommentList <span class=\"keyword\">from</span> <span class=\"string\">'../../src/components/CommentList'</span>;  // old <span class=\"keyword\">import</span> statement</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  describeWithDOM,</span><br><span class=\"line\">  mount,</span><br><span class=\"line\">  shallow,</span><br><span class=\"line\">  spyLifecycle</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'enzyme'</span>;</span><br></pre></td></tr></table></figure>\n<p>现在使用这个 starter kit 开发，你需要输入以下这些命令去运行程序：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">run</span> dev         # <span class=\"keyword\">note</span> the addition of <span class=\"keyword\">run</span></span><br><span class=\"line\">npm <span class=\"keyword\">run</span> <span class=\"keyword\">test</span>:dev    # <span class=\"keyword\">note</span> the addition of <span class=\"keyword\">run</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/SpencerCDixon/react-testing-starter-kit\" target=\"_blank\" rel=\"external\">如果还有什么不清楚的地方，可以在 github 上查看该源码</a>。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>我们已经建立了一个坚实的测试环境，可以根据你的项目具体需求去改变和发展。在下一次的文章中，我将花更多的时间在特殊场景的测试，还有如何测试 Redux，我更喜欢 flux 的实现。</p>\n<p>虽然我只使用 React 开发了数月，但我已经爱上它了。我希望本教程可以帮助你更深入地理解一些 React 测试的最佳实践。有任何问题或评论随时联系我。测试是我们的好朋友！</p>\n<p><a href=\"http://spencerdixon.com/blog/test-driven-react-tutorial.html?utm_campaign=Front%2BEnd%2BNewsletter&amp;utm_medium=email&amp;utm_source=Front_End_Newsletter_2\" target=\"_blank\" rel=\"external\"><strong>原文链接</strong></a></p>\n","excerpt":"<p>测试是开发周期中的一个重要组成部分。没有测试的代码被称为：遗留代码。对于我而言，第一次学习 React 和 JavaScript 的时候，感到很有压力。如果你也是刚开始学习 JS/React，并加入他们的社区，那么也可能会有相同的感觉。想到的会是：</p>\n<ul>\n<li>我应该用哪一个构建工具？</li>\n<li>哪一个测试框架比较好？</li>\n<li>我应该学习哪种流模式？</li>\n<li>我需要用到流吗？</li>\n</ul>\n<p>为了解决这些烦恼，我决定写这篇文章。经过几个小时的博客文章阅读，查阅 JS 开发者的源码，还有参加 Florida 的 JSConf，终于让我找到了自己的测试“槽”。开始让我觉得没有经过测试的 React 程序代码是如此的不标准和凌乱。我想活在一个没有这种感觉的世界，但后来想想，这是不对的。</p>\n<p>本教程所有的代码都可以在我的 <a href=\"https://github.com/SpencerCDixon/react-testing-starter-kit\">github 仓库</a>中找到。</p>\n<p>让我们开始吧！</p>","more":"<h2 id=\"设置-Webpack\"><a href=\"#设置-Webpack\" class=\"headerlink\" title=\"设置 Webpack\"></a>设置 Webpack</h2><p>本教程不是一个教如何使用 webpack，所以我不会详细说，但重要的是要了解基本的东西。<br>Webpack 就像 Rails 中的 Assets Pipeline 一样。在基础层面上而言，在运行 react 应用时，<br>会在处理你的代码和服务的前后，只生成一个 <code>bundle.js</code> 在客户端。</p>\n<p>因为它是一个非常强大的工具，所以我们会常常用到。在开始，Webpack 的功能可能会吓到你，<br>但我建议你坚持使用下去，一旦你了解了其中的原理，就会觉得得心应手。而你只需给它一个机会去表现。</p>\n<p>通常我们不会喜欢那些我们不会的，或是害怕的。然而，一旦你克服初始不适并开始理解它，总会变得很有趣。事实上，这正是我对测试的感受。当开始时讨厌它，在熟悉后喜欢它 :-)</p>\n<p>如果感兴趣，这里有一些资源来更多地了解关于 webpack：</p>\n<ol>\n<li><a href=\"https://christianalfoni.github.io/react-webpack-cookbook/Getting-started.html\">Webpack Cookbook</a>（使用的是 Babel 5，但对于学习 Webpack 的基本原理而言还是很有用的）</li>\n<li><a href=\"http://blog.madewithlove.be/post/webpack-your-bags/\">Webpack 初学者可以看这篇文章</a></li>\n<li><a href=\"https://github.com/petehunt/webpack-howto\">Pete Hunts 所写的 Webpack How-to</a></li>\n</ol>\n<blockquote>\n<p><strong>注意</strong>：如果要持续随本教程实验，建议使用 Node 版本为 <code>v5.1.0</code>。当然版本 <code>&gt;4</code> 的也是可以的。</p>\n</blockquote>\n<p>首先，安装所有关于 webpack 和 babel 的依赖。Babel 是一个转译器，允许你在开发时使用 ES6（es2015）和 ES7 的特性，然后将这些代码转译成浏览器可以识别的 ES5 代码。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir tdd_react</span><br><span class=\"line\">cd tdd_react</span><br><span class=\"line\">npm init        # follow along with <span class=\"built-in\">normal</span> npm init to <span class=\"keyword\">set</span> up <span class=\"comment\">project</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm <span class=\"comment\">i babel-loader babel-core webpack --save-dev</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>npm i</code> 是 npm install 的别名。</p>\n</blockquote>\n<p>接下来，让我们设置项目的路径和创建一个 <code>webpack.config.js</code> 文件：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mkdir</span> src                  <span class=\"comment\"># where all our source code will live</span></span><br><span class=\"line\">touch src/main.js          <span class=\"comment\"># this will be the entry point for our webpack bundling</span></span><br><span class=\"line\"><span class=\"keyword\">mkdir</span> test                 <span class=\"comment\"># place to store all our tests</span></span><br><span class=\"line\"><span class=\"keyword\">mkdir</span> dist                 <span class=\"comment\"># this is where the bundled javascript from webpack will go</span></span><br><span class=\"line\">touch webpack.config.js    <span class=\"comment\"># our webpack configuration file</span></span><br></pre></td></tr></table></figure>\n<p>初始化的 webpack config 会很小。阅读这些注释，理解下发生了什么：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// our webpack.config.js file located in project root</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);                <span class=\"comment\">// a useful node path helper library</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> config = &#123;</span><br><span class=\"line\">  entry: [<span class=\"string\">'./src/main.js'</span>],                <span class=\"comment\">// the entry point for our app</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>), <span class=\"comment\">// store the bundled output in dist/bundle.js</span></span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>                  <span class=\"comment\">// specifying file name for our compiled assets</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      <span class=\"comment\">// telling webpack which loaders we want to use.  For now just run the</span></span><br><span class=\"line\">      <span class=\"comment\">// code through the babel-loader.  'babel' is an alias for babel-loader</span></span><br><span class=\"line\">      &#123; test: <span class=\"regexp\">/\\.js$/</span>, loaders: [<span class=\"string\">'babel'</span>], exclude: <span class=\"regexp\">/node_modules/</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<p>为了让 babel 更好地工作，我们需要定义哪个 <code>presets</code> 是我们需要用到的。让我们继续，并且安装 React 和 ES6 预处理所需的东西：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">npm</span> i <span class=\"keyword\">babel-preset-react </span><span class=\"keyword\">babel-preset-es2015 </span>--save-dev</span><br></pre></td></tr></table></figure>\n<p>现在我们有一些选项。在 webpack config 文件中，会告诉你哪一块是做 bebel 预处理的：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader<span class=\"variable\">s:</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    tes<span class=\"variable\">t:</span> /\\.js$/,</span><br><span class=\"line\">    loader<span class=\"variable\">s:</span> [<span class=\"string\">'babel'</span>],</span><br><span class=\"line\">    exclude: /node_modules/,</span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">      preset<span class=\"variable\">s:</span> [<span class=\"string\">'react'</span>, <span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>另外的方法是将他们存在 <code>.babelrc</code> 文件中，这也用在我的项目中。将 babel 预处理存储在 <code>.babelrc</code> 中，对于以后的开发者而言，更容易去找到哪个 babel 预处理是可用的。此外，当我们将 Karma 设置到 webpack 之后，因为 <code>.babelrc</code> 文件的存在，我们就不再需要其他的预处理配置了。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># inside our project root</span></span><br><span class=\"line\"><span class=\"attribute\">touch</span> .babelrc</span><br></pre></td></tr></table></figure>\n<p>将下面这段粘贴到预处理文件中：</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># .babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"react\"</span>, <span class=\"string\">\"es2015\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了确认它能否工作，让我们在 <code>main.js</code> 中加入一些 react 代码，并看看所有的包是否正常。接着安装 React 和 React DOM：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> react react-dom -S</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <code>-S</code> 是 <code>--save</code> 的别名。</p>\n</blockquote>\n<p>创建第一个 React 组件：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># src/main.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123; <span class=\"type\">Component</span> &#125; from <span class=\"symbol\">'reac</span>t';</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; from <span class=\"symbol\">'react</span>-dom';</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Root</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt; <span class=\"type\">Hello</span> <span class=\"type\">World</span> &lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;<span class=\"type\">Root</span> /&gt;, document.getElementById(<span class=\"symbol\">'roo</span>t'));</span><br></pre></td></tr></table></figure>\n<p>聪明的读者就会察觉我们并没有在根部创建一个 <code>index.html</code> 文件。让我们继续，当 <code>bundle.js</code> 编译后，将其放到 <code>/dist</code> 文件夹中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /dist/index.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>非常棒，让我们继续。最后，我们可以运行 webpack，看看一切是否正常。如果你没有全局安装 webpack（<code>npm i webpack -g</code>），你也可以用 node modules 方式进行启动：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"regexp\">/node_modules/</span>.bin/webpack</span><br></pre></td></tr></table></figure>\n<p>Webpack 将默认情况下寻找一个配置名称为 <code>webpack.config.js</code>。如果你高兴，也可以通过不同 webpack config 作为参数传入。</p>\n<p>在 package.json 中创建一个别名，来完成构建工作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># package.json</span></span><br><span class=\"line\"><span class=\"meta\">... </span>other stuff</span><br><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来让 <code>webpack-dev-server</code> 提升开发体验：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-<span class=\"built_in\">dev</span>-server --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>将 webpack dev server 的入口加入到 <code>webpack.config.js</code> 中：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... rest <span class=\"keyword\">of</span> config</span><br><span class=\"line\">  <span class=\"keyword\">entry</span>: [</span><br><span class=\"line\">    <span class=\"symbol\">'webpack</span>/hot/dev-server',</span><br><span class=\"line\">    <span class=\"symbol\">'webpack</span>-dev-server/client?http://localhost:<span class=\"number\">3000</span>',</span><br><span class=\"line\">    './src/main.js'</span><br><span class=\"line\">  ],</span><br><span class=\"line\">... rest <span class=\"keyword\">of</span> config</span><br></pre></td></tr></table></figure>\n<p>让 script 运行在开发服务器上：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># package.json</span></span><br><span class=\"line\">... other stuff</span><br><span class=\"line\"><span class=\"symbol\">scripts:</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 script 中使用了 <code>--content-base</code> 标记，告诉 webpack 我们想服务于 <code>/dist</code> 文件夹。我们还定义了 3000 端口，使得更像是 Rails 开发的体验。</p>\n<p>最后，在 webpack 配置文件中添加一个 resolve 标记，使进口文件看起来更直观。下面就是配置文件最终的样子：</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\">var path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var config = &#123;</span><br><span class=\"line\">  <span class=\"name\">entry</span>: [</span><br><span class=\"line\">    <span class=\"string\">'webpack/hot/dev-server'</span>,</span><br><span class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"name\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"name\">root</span>: [</span><br><span class=\"line\">      // allows us to <span class=\"keyword\">import</span> modules as <span class=\"keyword\">if</span> /src was the root.</span><br><span class=\"line\">      // so I can <span class=\"name\">do</span>: <span class=\"keyword\">import</span> Comment <span class=\"keyword\">from</span> <span class=\"string\">'components/Comment'</span></span><br><span class=\"line\">      // instead <span class=\"name\">of</span>:  <span class=\"keyword\">import</span> Comment <span class=\"keyword\">from</span> <span class=\"string\">'../components/Comment'</span> <span class=\"keyword\">or</span> whatever relative path would be</span><br><span class=\"line\">      path.resolve(__dirname, <span class=\"string\">'./src'</span>)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    // allows you to <span class=\"built_in\">require</span> without the .js at end of filenames</span><br><span class=\"line\">    // <span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">'component'</span> vs. <span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">'component.js'</span></span><br><span class=\"line\">    <span class=\"name\">extensions</span>: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.jsx'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"name\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"name\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    <span class=\"name\">filename</span>: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"name\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"name\">loaders</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"name\">test</span>: /\\.js?$/,</span><br><span class=\"line\">        // dont run node_modules <span class=\"keyword\">or</span> bower_components through babel loader</span><br><span class=\"line\">        <span class=\"name\">exclude</span>: /(node_modules|bower_components)/,</span><br><span class=\"line\">        // babel is alias <span class=\"keyword\">for</span> babel-loader</span><br><span class=\"line\">        // npm i babel-core babel-loader <span class=\"comment\">--save-dev</span></span><br><span class=\"line\">        <span class=\"name\">loader</span>: <span class=\"string\">'babel'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<p>为确保一切工作正常，让我们运行开发服务器，并且确认我们在屏幕上看到 “Hello World”。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">run</span> dev</span><br><span class=\"line\"><span class=\"built_in\">open</span> http:<span class=\"comment\">//localhost:3000</span></span><br></pre></td></tr></table></figure>\n<p>你应该看到的是这样的：</p>\n<p><img src=\"http://i.imgur.com/rYTjH77.png?1\" alt=\"Hello World Image\"></p>\n<h2 id=\"设置-Mocha，Chai，Sinon-和-Enzyme\"><a href=\"#设置-Mocha，Chai，Sinon-和-Enzyme\" class=\"headerlink\" title=\"设置 Mocha，Chai，Sinon 和 Enzyme\"></a>设置 Mocha，Chai，Sinon 和 Enzyme</h2><p><strong>Mocha</strong>：将用于运行我们的测试。<br><strong>Chai</strong>：是我们期待的库。应用非常广泛，允许使用 RSpec 一样的语法。<br><strong>Sinon</strong>：将服务于 mocks/stubs/spies.<br><strong>Enzyme</strong>：将用于测试我们的 React components。AirBnB 写的一个很漂亮的测试库。</p>\n<p>安装这些包：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mocha chai sinon --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>如果我们希望能够使用 ES6 编写测试，那么我们需要在运行前对代码进行转译。那么我们需要安装 babel-register：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-register --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>加一些 npm scripts 到 <code>package.json</code> 中，让测试更简单：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ./<span class=\"keyword\">package</span>.json</span><br><span class=\"line\">... rest <span class=\"keyword\">of</span> <span class=\"keyword\">package</span>.json</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --compilers js:babel-register --recursive\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test:watch\"</span>: <span class=\"string\">\"npm test -- --watch\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist\"</span>,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>我们的测试脚本要运行 mocha，并使用 <code>babel-register</code> 进行转译，然后递归地查看 <code>/test</code> 目录。</p>\n<p>最终，我们需要设置 Karma，因此 npm script 会变得无效，但如果不设置，它将会正常工作。<code>npm run test:watch</code> 将会监视程序，并在文件发生修改时重新运行。多么高效！</p>\n<p>确认它能工作，创建一个 hello world 测试 <code>/tests/helloWorld.spec.js</code>：</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /test/helloWorld.spec.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'hello world'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'works!'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"literal\">true</span>).to.be.<span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>哇…看起来很像 RSpec！</p>\n<p>如果每一个测试都要引入 <code>expect</code>，这将变得很麻烦，因此让我们新建一个 <code>test_helper</code> 文件来保存这些东西：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /test/test_helper.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sinon <span class=\"keyword\">from</span> <span class=\"string\">'sinon'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">global</span>.expect = expect;</span><br><span class=\"line\"><span class=\"built_in\">global</span>.sinon = sinon;</span><br></pre></td></tr></table></figure>\n<p>然后把它包括到 npm 脚本的运行套件中，并通过 <code>--require ./test/test_helper.js</code> 来声明：</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># package.json script section</span></span><br><span class=\"line\">  <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --compilers js:babel-register --require ./test/test_helper.js --recursive\"</span>,</span><br></pre></td></tr></table></figure>\n<p>我也添加了 sinon，因此它也可以全局可用。现在无论什么时候，我们在写一个新的测试时，都不需要手动引入 <code>expect</code> 和 <code>sinon</code>。</p>\n<h3 id=\"Enzyme\"><a href=\"#Enzyme\" class=\"headerlink\" title=\"Enzyme\"></a>Enzyme</h3><p>现在我们所需的“普通”测试工具都已经设置好了（mocha，chai，sinon），接着让我们安装 Enzyme，并且开始测试 React component！</p>\n<p>安装这个包：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i enzyme react-addons-test-utils --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>Enzyme 的重要文档可以<a href=\"http://airbnb.io/enzyme/\">在这里找到</a>。如果有时间，我推荐阅读 Shallow Rendering 部分。</p>\n<blockquote>\n<p><strong>你会问，什么是 Shallow Rendering？</strong></p>\n</blockquote>\n<p>对我们来说是一种组件调用 render 方法，得到我们可以断言的 React 元素，而无需实际安装组件到 DOM 上。更多的 React 元素<a href=\"https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html\">请看这</a>。</p>\n<p>Enzyme 会将 shallow rendered 组件包裹进一个特殊的 <code>wrapper</code> 中，进而让我们可以测试。如果你用过 Rails，这看起来像是 Capybara 中的 <code>page</code> 对象。</p>\n<p>让我们为一些合适的 <code>&lt;Root /&gt;</code> 组件进行 TDD 的驱动开发。</p>\n<p>这个 Root 组件会是一个 <code>container</code>，意味着在应用中它可以控制 state 的处理。学习 React 中“智能”和“笨拙”组件之间的差异，对于应用程序体系结构是很重要的。<a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.8cnl19w8l\">这篇文章很好地解释了它们</a>。</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /tests/containers/Root.spec.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;                     // required to get test to work.  we can get around this later with more configuration</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallow &#125; <span class=\"keyword\">from</span> <span class=\"string\">'enzyme'</span>;              // method <span class=\"keyword\">from</span> enzyme which allows us to <span class=\"keyword\">do</span> shallow render</span><br><span class=\"line\"><span class=\"keyword\">import</span> Root <span class=\"keyword\">from</span> <span class=\"string\">'../../src/containers/Root'</span>;  // <span class=\"keyword\">import</span> our soon to be component</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'(Container) Root'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'renders as a &lt;div&gt;'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    const wrapper = shallow(&lt;Root /&gt;);</span><br><span class=\"line\">    expect(wrapper.<span class=\"built_in\">type</span>()).to.eql(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'has style with height 100%'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    const wrapper = shallow(&lt;Root /&gt;);</span><br><span class=\"line\">    const expectedStyles = &#123;</span><br><span class=\"line\">      <span class=\"name\">height</span>: <span class=\"string\">'100%'</span>,</span><br><span class=\"line\">      <span class=\"name\">background</span>: <span class=\"string\">'#333'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    expect(wrapper.prop(<span class=\"string\">'style'</span>)).to.eql(expectedStyles);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'contains a header explaining the app'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    const wrapper = shallow(&lt;Root /&gt;);</span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.welcome-header'</span>)).to.have.length(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果我们用 <code>npm test</code> 运行测试，这会失败。因为我们没有在适当的位置创建一个根组件。因此我们可以这样做：</p>\n<blockquote>\n<p>如果在任何时候你想看到这段代码的源代码，可以在 <a href=\"https://github.com/SpencerCDixon/react-testing-starter-kit\">github 仓库</a> 中找到</p>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /src/containers/<span class=\"type\">Root</span>.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123; <span class=\"type\">Component</span> &#125; from <span class=\"symbol\">'reac</span>t';</span><br><span class=\"line\"></span><br><span class=\"line\">const styles = &#123;</span><br><span class=\"line\">  height: <span class=\"symbol\">'100</span>%',</span><br><span class=\"line\">  background: '#<span class=\"number\">333</span>'</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Root</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div style=&#123;styles&#125;&gt;</span><br><span class=\"line\">        &lt;h1 className=<span class=\"symbol\">'welcome</span>-header'&gt;<span class=\"type\">Welcome</span> to testing <span class=\"type\">React</span>!&lt;/h1&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"type\">Root</span>;</span><br></pre></td></tr></table></figure>\n<p>重新运行测试就可以了。</p>\n<p>在我们的测试中有很多重复的东西，因此我们还需要回去做一些重构。由于我们没有给 <code>Root</code> 传入任何的 props，那么我们可以 shallow render 它一次，然后就在一个 wrapper 中结束了我们所有的断言。很多时候给定一个特定的 props 后，我发现自己包装的部分测试会在 “sub” describe 块中，然后给一堆断言也有这些 props。如果你用过 RSpec，就类似于使用 “context” 块。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe('(Container) Root', () =&gt; &#123;</span><br><span class=\"line\">  const wrapper = shallow(<span class=\"name\">&lt;Root</span> /&gt;)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  it('renders as a &lt;div&gt;', () =&gt; &#123;</span><br><span class=\"line\">    expect(<span class=\"name\">wrapper</span>.type()).to.eql('div')<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  it('has style with height <span class=\"number\">100</span>%', () =&gt; &#123;</span><br><span class=\"line\">    const expectedStyles = &#123;</span><br><span class=\"line\">      height: '<span class=\"number\">100</span>%',</span><br><span class=\"line\">      background: '#333'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    expect(<span class=\"name\">wrapper</span>.prop('style')).to.eql(<span class=\"name\">expectedStyles</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  it('contains a header explaining the app', () =&gt; &#123;</span><br><span class=\"line\">    expect(<span class=\"name\">wrapper</span>.find('.welcome-header')).to.have.length(<span class=\"number\">1</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">  &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>尽可能地在你的测试中使用 <code>shallow</code>，但偶尔也可能不用。例如，如果你要测试 React 生命周期的方法时，就需要真正地将组件安装出来。</p>\n<p>接下来让我们测试一个组件的安装和调用函数，当它安装时，我们可以得到一些暴露在 <code>sinon</code> 上的信息和正在使用的 spies。</p>\n<p>我们可以假装 <code>Root</code> 组件有一个子组件叫 <code>CommentList</code>，在安装后将调用任意的回调。当通过给定 props 组件安装时，函数被调用，因此我们就可以测试这个场景。在组件渲染时给评论列表一些 style，然后我们就可以知道 shallow render 是如何处理这些样式的了。<code>CommentList</code> 会在一个组件文件夹的 <code>/src/components/CommentList.js</code> 中。因为它不处理数据，因此完全取决于 props，换句话说它是一个<strong>纯</strong>（<strong>笨拙</strong>）组件：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React from <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Once we set up Karma to run our tests through webpack</span></span><br><span class=\"line\"><span class=\"comment\">// we will no longer need to have these long relative paths</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> CommentList from <span class=\"string\">'../../src/components/CommentList'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  describeWithDOM,</span><br><span class=\"line\">  mount,</span><br><span class=\"line\">  shallow,</span><br><span class=\"line\">  spyLifecycle</span><br><span class=\"line\">&#125; from <span class=\"string\">'enzyme'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'(Component) CommentList'</span>, () =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// using special describeWithDOM helper that enzyme</span></span><br><span class=\"line\">  <span class=\"comment\">// provides so if other devs on my team don't have JSDom set up</span></span><br><span class=\"line\">  <span class=\"comment\">// properly or are using old version of node it won't bork their test suite</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// All of our tests that depend on mounting should go inside one of these</span></span><br><span class=\"line\">  <span class=\"comment\">// special describe blocks</span></span><br><span class=\"line\">  describeWithDOM(<span class=\"string\">'Lifecycle methods'</span>, () =&gt; &#123;</span><br><span class=\"line\">    it(<span class=\"string\">'calls componentDidMount'</span>, () =&gt; &#123;</span><br><span class=\"line\">      spyLifecyle(CommentList);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> props = &#123;</span><br><span class=\"line\">        onMount: () =&gt; &#123;&#125;,  <span class=\"comment\">// an anonymous function in ES6 arrow syntax</span></span><br><span class=\"line\">        isActive: <span class=\"keyword\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// using destructuring to pass props down</span></span><br><span class=\"line\">      <span class=\"comment\">// easily and then mounting the component</span></span><br><span class=\"line\">      mount(&lt;CommentList &#123;...props&#125; /&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// CommentList's componentDidMount should have been</span></span><br><span class=\"line\">      <span class=\"comment\">// called once.  spyLifecyle attaches sinon spys so we can</span></span><br><span class=\"line\">      <span class=\"comment\">// make this assertion</span></span><br><span class=\"line\">      expect(</span><br><span class=\"line\">        CommentList.prototype.componentDidMount.calledOnce</span><br><span class=\"line\">      ).to.be.<span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'calls onMount prop once it mounts'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create a spy for the onMount function</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> props = &#123; onMount: sinon.spy() &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// mount our component</span></span><br><span class=\"line\">      mount(&lt;CommentList &#123;...props&#125; /&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// expect that onMount was called</span></span><br><span class=\"line\">      expect(props.onMount.calledOnce).to.be.<span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>还有很多，阅读这些注释可以帮助你更好地理解。看看这些实践，让测试可以通过，然后再回头看看这些测试，验证下你所理解的东西。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /src/components/<span class=\"type\">CommentList</span>.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123; <span class=\"type\">Component</span>, <span class=\"type\">PropTypes</span> &#125; from <span class=\"symbol\">'reac</span>t';</span><br><span class=\"line\"></span><br><span class=\"line\">const propTypes = &#123;</span><br><span class=\"line\">  onMount: <span class=\"type\">PropTypes</span>.func.isRequired,</span><br><span class=\"line\">  isActive: <span class=\"type\">PropTypes</span>.bool</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommentList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onMount();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">        &lt;li&gt; <span class=\"type\">Comment</span> <span class=\"type\">One</span> &lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">CommentList</span>.propTypes = propTypes;</span><br><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"type\">CommentList</span>;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>npm test</code> ，现在这些套件应该可以通过测试了。</p>\n<p>接下来让我们添加一些 shallow rendered 测试，当给定一个 <code>isActive</code> 的 props 时，来确保我们的组件使用了适当的 CSS class。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... previous tests</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'should render as a &lt;ul&gt;'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    const props = &#123; onMount: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125; &#125;;</span><br><span class=\"line\">    const wrapper = shallow(&lt;CommentList  &#123;...props&#125; /&gt;);</span><br><span class=\"line\">    expect(wrapper.type()).to.eql(<span class=\"string\">'ul'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'when active...'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    const wrapper = shallow(</span><br><span class=\"line\">      <span class=\"regexp\">//</span> just passing isActive <span class=\"keyword\">is</span> an alias <span class=\"keyword\">for</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      &lt;CommentList onMount=&#123;() =&gt; &#123;&#125;&#125; isActive /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    it(<span class=\"string\">'should render with className active-list'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      expect(wrapper.prop(<span class=\"string\">'className'</span>)).to.eql(<span class=\"string\">'active-list'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'when inactive...'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    const wrapper = shallow(</span><br><span class=\"line\">      &lt;CommentList onMount=&#123;() =&gt; &#123;&#125;&#125; isActive=&#123;<span class=\"literal\">false</span>&#125; /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    it(<span class=\"string\">'should render with className inactive-list'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      expect(wrapper.prop(<span class=\"string\">'className'</span>)).to.eql(<span class=\"string\">'inactive-list'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>让它们通过测试：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommentList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.onMount();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123; isActive &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    const className = isActive ? <span class=\"symbol\">'active</span>-list' : <span class=\"symbol\">'inactive</span>-list';</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;ul className=&#123;className&#125;&gt;</span><br><span class=\"line\">        &lt;li&gt; <span class=\"type\">Comment</span> <span class=\"type\">One</span> &lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时你应该对如何测试 react 组件已经有了一个很好的理解了。记得去阅读 Enzyme 文档来获得更多的灵感。</p>\n<h2 id=\"设置-Karma\"><a href=\"#设置-Karma\" class=\"headerlink\" title=\"设置 Karma\"></a>设置 Karma</h2><p>设置 Karma 可能会有些困难。坦白讲，这对我而言也是一件痛苦的工作。通常，当我开发 React 应用时，我会选择使用已经构建好的 starter kit，方便省事。<a href=\"https://github.com/davezuko/react-redux-starter-kit\">我非常推荐开发时用的 starter kit</a>。</p>\n<p>使用 Karma 的价值在于快速测试重载，可以多浏览器测试和最重要的是 webpack 预处理。一旦我们将 Karma 设置好了，在我们运行测试程序时，不仅是只有 <code>babel-loader</code>，而是整个 webpack config。这为我们提供了很多便利，使得我们的测试环境与开发环境相同。</p>\n<p>让我们开始吧…</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i karma karma-chai karma-mocha karma-webpack <span class=\"comment\">--save-dev</span></span><br><span class=\"line\">npm i karma-sourcemap-loader karma-phantomjs-launcher <span class=\"comment\">--save-dev</span></span><br><span class=\"line\">npm i karma-spec-reporter <span class=\"comment\">--save-dev</span></span><br><span class=\"line\">npm i phantomjs <span class=\"comment\">--save-dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The polyfills arn't required but will help with browser support issues</span></span><br><span class=\"line\"><span class=\"comment\"># and are easy enough to include in our karma config that I figured why not</span></span><br><span class=\"line\">npm i babel-polyfill phantomjs-polyfill <span class=\"comment\">--save-dev</span></span><br></pre></td></tr></table></figure>\n<p>很多包，我知道。相信我完成这个是非常值得的。</p>\n<p>对于我们的示例而言，我们将使用 <a href=\"http://phantomjs.org/\">PhantomJS</a>。没有别的什么原因，这我在 starter kit 中已经用到了。可以按照自己的喜好使用 Chrome，Firefox 或是 Safari，甚至在 PhantomJS 之上。（这是用 Karma 的一件很酷的事）</p>\n<p>在配置 karma 之前先安装 <code>yargs</code>，它能让你使用命令行参数来定制 Karma 的配置。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> yargs -S</span><br></pre></td></tr></table></figure>\n<p>现在我们可以通过创建一个 Karma config 文件去监视我们的文件，当文件发生修改时重新运行并很快地保存。</p>\n<p><strong>Karma Config</strong>：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch karma<span class=\"selector-class\">.config</span><span class=\"selector-class\">.js</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./karma.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> argv = <span class=\"built_in\">require</span>(<span class=\"string\">'yargs'</span>).argv;</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.set(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// only use PhantomJS for our 'test' browser</span></span><br><span class=\"line\">    browsers: [<span class=\"string\">'PhantomJS'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// just run once by default unless --watch flag is passed</span></span><br><span class=\"line\">    singleRun: !argv.watch,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// which karma frameworks do we want integrated</span></span><br><span class=\"line\">    frameworks: [<span class=\"string\">'mocha'</span>, <span class=\"string\">'chai'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// displays tests in a nice readable format</span></span><br><span class=\"line\">    reporters: [<span class=\"string\">'spec'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// include some polyfills for babel and phantomjs</span></span><br><span class=\"line\">    files: [</span><br><span class=\"line\">      <span class=\"string\">'node_modules/babel-polyfill/dist/polyfill.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'./node_modules/phantomjs-polyfill/bind-polyfill.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'./test/**/*.js'</span> <span class=\"comment\">// specify files to watch for tests</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    preprocessors: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// these files we want to be precompiled with webpack</span></span><br><span class=\"line\">      <span class=\"comment\">// also run tests throug sourcemap for easier debugging</span></span><br><span class=\"line\">      [<span class=\"string\">'./test/**/*.js'</span>]: [<span class=\"string\">'webpack'</span>, <span class=\"string\">'sourcemap'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// A lot of people will reuse the same webpack config that they use</span></span><br><span class=\"line\">    <span class=\"comment\">// in development for karma but remove any production plugins like UglifyJS etc.</span></span><br><span class=\"line\">    <span class=\"comment\">// I chose to just re-write the config so readers can see what it needs to have</span></span><br><span class=\"line\">    webpack: &#123;</span><br><span class=\"line\">       devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">       resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// allow us to import components in tests like:</span></span><br><span class=\"line\">        <span class=\"comment\">// import Example from 'components/Example';</span></span><br><span class=\"line\">        root: path.resolve(__dirname, <span class=\"string\">'./src'</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// allow us to avoid including extension name</span></span><br><span class=\"line\">        extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// required for enzyme to work properly</span></span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">          <span class=\"string\">'sinon'</span>: <span class=\"string\">'sinon/pkg/sinon'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// don't run babel-loader through the sinon module</span></span><br><span class=\"line\">        noParse: [</span><br><span class=\"line\">          <span class=\"regexp\">/node_modules\\/sinon\\//</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"comment\">// run babel loader for our tests</span></span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">          &#123; test: <span class=\"regexp\">/\\.js?$/</span>, exclude: <span class=\"regexp\">/node_modules/</span>, loader: <span class=\"string\">'babel'</span> &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// required for enzyme to work properly</span></span><br><span class=\"line\">      externals: &#123;</span><br><span class=\"line\">        <span class=\"string\">'jsdom'</span>: <span class=\"string\">'window'</span>,</span><br><span class=\"line\">        <span class=\"string\">'cheerio'</span>: <span class=\"string\">'window'</span>,</span><br><span class=\"line\">        <span class=\"string\">'react/lib/ExecutionEnvironment'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'react/lib/ReactContext'</span>: <span class=\"string\">'window'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    webpackMiddleware: &#123;</span><br><span class=\"line\">      noInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// tell karma all the plugins we're going to be using to prevent warnings</span></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"string\">'karma-mocha'</span>,</span><br><span class=\"line\">      <span class=\"string\">'karma-chai'</span>,</span><br><span class=\"line\">      <span class=\"string\">'karma-webpack'</span>,</span><br><span class=\"line\">      <span class=\"string\">'karma-phantomjs-launcher'</span>,</span><br><span class=\"line\">      <span class=\"string\">'karma-spec-reporter'</span>,</span><br><span class=\"line\">      <span class=\"string\">'karma-sourcemap-loader'</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>阅读所有的注释一次或两次有助于理解这个 config 是做什么的。使用 Webpack 的一大好处是全部都是普通的 JavaScript 代码，并且我们可以“重构”配置文件。事实上，这正是绝大多数 starter kit 所做的！</p>\n<p>随着 Karma 设置完成，为运行测试，最后一件事就是要去更新我们的 package.json：</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># package.json</span></span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"node_modules/.bin/karma start karma.config.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test:dev\"</span>: <span class=\"string\">\"npm run test -- --watch\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"old_test\"</span>: <span class=\"string\">\"mocha --compilers js:babel-register --require ./test/test_helper.js --recursive\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"old_test:watch\"</span>: <span class=\"string\">\"npm test -- --watch\"</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>我建议重命名旧的测试 scripts 的前缀，用 ‘old_’ 表示。</p>\n<p>最终的 <code>package.json</code> 是这样的：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"react-testing-starter-kit\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"React starter kit with nice testing environment set up.\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"src/main.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"directories\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"tests\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"src\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"dist\"</span>: <span class=\"string\">\"dist\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^0.14.6\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^0.14.6\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"yargs\"</span>: <span class=\"string\">\"^3.31.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.4.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-polyfill\"</span>: <span class=\"string\">\"^6.3.14\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.3.13\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.3.13\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-register\"</span>: <span class=\"string\">\"^6.3.13\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"chai\"</span>: <span class=\"string\">\"^3.4.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"enzyme\"</span>: <span class=\"string\">\"^1.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"json-loader\"</span>: <span class=\"string\">\"^0.5.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma\"</span>: <span class=\"string\">\"^0.13.19\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma-chai\"</span>: <span class=\"string\">\"^0.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma-mocha\"</span>: <span class=\"string\">\"^0.2.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma-phantomjs-launcher\"</span>: <span class=\"string\">\"^0.2.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma-sourcemap-loader\"</span>: <span class=\"string\">\"^0.3.6\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma-spec-reporter\"</span>: <span class=\"string\">\"0.0.23\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"karma-webpack\"</span>: <span class=\"string\">\"^1.7.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mocha\"</span>: <span class=\"string\">\"^2.3.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"phantomjs\"</span>: <span class=\"string\">\"^1.9.19\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"phantomjs-polyfill\"</span>: <span class=\"string\">\"0.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-addons-test-utils\"</span>: <span class=\"string\">\"^0.14.6\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sinon\"</span>: <span class=\"string\">\"^1.17.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.12.11\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.14.1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"node_modules/.bin/karma start karma.config.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"test:dev\"</span>: <span class=\"string\">\"npm run test -- --watch\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"old_test\"</span>: <span class=\"string\">\"mocha --compilers js:babel-register --require ./test/test_helper.js --recursive\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"old_test:watch\"</span>: <span class=\"string\">\"npm test -- --watch\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"repository\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"tbd\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"Spencer Dixon\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在测试套件中外加 webpack 预处理，我们现在可以删除那些在测试内烦人的相对路径声明：</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test/containers/Root.spec.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallow &#125; <span class=\"keyword\">from</span> <span class=\"string\">'enzyme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Root <span class=\"keyword\">from</span> <span class=\"string\">'containers/Root'</span>;               // new <span class=\"keyword\">import</span> statement</span><br><span class=\"line\">// <span class=\"keyword\">import</span> Root <span class=\"keyword\">from</span> <span class=\"string\">'../../src/containers/Root'</span>;  // old <span class=\"keyword\">import</span> statement</span><br><span class=\"line\"></span><br><span class=\"line\">// test/components/CommentList.spec.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> CommentList <span class=\"keyword\">from</span> <span class=\"string\">'components/CommentList'</span>;               // new <span class=\"keyword\">import</span> statement</span><br><span class=\"line\">// <span class=\"keyword\">import</span> CommentList <span class=\"keyword\">from</span> <span class=\"string\">'../../src/components/CommentList'</span>;  // old <span class=\"keyword\">import</span> statement</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  describeWithDOM,</span><br><span class=\"line\">  mount,</span><br><span class=\"line\">  shallow,</span><br><span class=\"line\">  spyLifecycle</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'enzyme'</span>;</span><br></pre></td></tr></table></figure>\n<p>现在使用这个 starter kit 开发，你需要输入以下这些命令去运行程序：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">run</span> dev         # <span class=\"keyword\">note</span> the addition of <span class=\"keyword\">run</span></span><br><span class=\"line\">npm <span class=\"keyword\">run</span> <span class=\"keyword\">test</span>:dev    # <span class=\"keyword\">note</span> the addition of <span class=\"keyword\">run</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/SpencerCDixon/react-testing-starter-kit\">如果还有什么不清楚的地方，可以在 github 上查看该源码</a>。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>我们已经建立了一个坚实的测试环境，可以根据你的项目具体需求去改变和发展。在下一次的文章中，我将花更多的时间在特殊场景的测试，还有如何测试 Redux，我更喜欢 flux 的实现。</p>\n<p>虽然我只使用 React 开发了数月，但我已经爱上它了。我希望本教程可以帮助你更深入地理解一些 React 测试的最佳实践。有任何问题或评论随时联系我。测试是我们的好朋友！</p>\n<p><a href=\"http://spencerdixon.com/blog/test-driven-react-tutorial.html?utm_campaign=Front%2BEnd%2BNewsletter&amp;utm_medium=email&amp;utm_source=Front_End_Newsletter_2\"><strong>原文链接</strong></a></p>","sticky":0},{"title":"React 入门实践","date":"2016-01-26T01:43:59.000Z","_content":"\n> 在写这篇文章之前，我已经接触 React 有大半年了。在初步学习 React 之后就正式应用到项目中，当时就想把自己的一些想法写出来分享一下，无奈不太会写文章，再则时间不是很充裕，所以也就搁下了。\n本篇文章比较基础，没有深入的分析，大神们轻看。废话就不多说了，那么让我们来进入正题。\n\n# 简介\n首先想要介绍的是 React，看到这篇文章的朋友想必都有一些关于 React 的了解了，但对于刚接触的新人而言，在这就要简要地介绍一下了。然后就是关于使用 React 构建一个简单单页应用（下文用 SPA 代替，Single Page Application）的一些介绍和讲解。\n\n## 关于 React\nReact 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。（[更多相关介绍请看这](http://baike.baidu.com/item/react/18077599#viewPageContent)）\n\n特点：\n* **仅仅只是 UI**\n* **虚拟 DOM**：最大限度减少与 DOM 的交互（类似于使用 jQuery 操作 DOM）\n* **单向数据流**：很大程度减少了重复代码的使用\n\n组件化：\n* 可组合（Composeable）：一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部。如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件\n* 可重用（Reusable）：每个组件都是具有独立功能的，它可以被使用在多个UI场景\n* 可维护（Maintainable）：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护\n\n<!-- more -->\n\n生命周期：\n* Mounting：已插入真实 DOM\n* Updating：正在被重新渲染\n* Unmounting：已移出真实 DOM\n\nReact 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。\n* componentWillMount()\n* componentDidMount()\n* componentWillUpdate(object nextProps, object nextState)\n* componentDidUpdate(object prevProps, object prevState)\n* componentWillUnmount()\n\n此外，React 还提供两种特殊状态的处理函数。\n* componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用\n* shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用\n\n# 正题\n那么进入正题，花了点时间去写一个简单的 SPA，也算是一个比较完整 React 骨架，但不包括测试（测试的教程可以看[这个](http://www.jianshu.com/p/6c74c96148c9)），相关源码可以查看 [react-start-kit](https://github.com/jovey-zheng/react-start-kit)。\n\n接下来看看我们这个项目的构建需要用到些什么：\n * react\n * redux\n * webpack\n * react-router\n * ant design\n * babel\n ...\n\n还有一些没有列举出来，具体可以看仓库源码的 [`package.json`](https://github.com/jovey-zheng/react-start-kit/blob/master/package.json)。其中的详细介绍会在文尾列出一些我所看过的文章或是官方介绍。\n\n## 配置项\n### Webpack\n说到 React 项目的构建就不得不提 Webpack 这个神器。构建工具有很多，例如 Grunt，Gulp，Brunch 等，相比这些构建工具，Webpack 感觉就是和 React 不谋而合，尤其是 [react-hot-loader](https://github.com/gaearon/react-hot-loader) 这样的神器（热加载），让 Webpack 成为最主流的 React 构建工具。\n\n关于 Webpack 的特性以及介绍这里就不赘述了，我们可以从下图看出 Webpack 的作用：\n![](http://cdn4.infoqstatic.com/statics_s2_20160120-0059u2/resource/articles/react-and-webpack/zh/resources/0602005.jpg)\n\n接着我们从项目代码中来看 Webpack。\n```\nentry: {\n  app: [__dirname + '/src/index'],\n},\noutput: {\n  path: __dirname + '/_dist',\n  filename: '[name]_[hash].js',\n}\n```\n这部分主要是指定入口和出口文件。`entry` 作为项目的入口文件；`output` 作为文件编译后的出口，其中 `path` 代表输出的路径，`filename` 代表文件名称，而 `[name]_[hash]` 保证了浏览器不会存在缓存（即修改文件后效果不生效）。\n\n```\nmodule: {\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel'],\n    exclude: /node_modules/,\n  }, {\n    test: /\\.css$/,\n    loaders: ['style', 'css'],\n    include: /components/,\n  }, {\n    test: /\\.(jpe?g|png|gif|svg|ico)/i,\n    loader: 'file',\n  }, {\n    test: /\\.(ttf|eot|svg|woff|woff2)/,\n    loader: 'file',\n  }, {\n    test: /\\.(pdf)/,\n    loader: 'file',\n  }, {\n    test: /\\.(swf|xap)/,\n    loader: 'file',\n  }],\n}\n```\n而这部分会帮助我们去处理不同类型的文件，其中 `test` 就是文件的后缀，`loaders` 是“转译器”，`include` 是指定文件的目录，`exclude` 是排除某个目录。我们可以看出，所有的 `.js` 文件都会通过 babel 去转译，也就是我们在项目中使用 ES6+ 语法会通过 babel 转译成浏览器可以识别的 ES5 代码。\n\n最后配置好的 config 是这样的：\n```\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: {\n    app: [__dirname + '/src/index'],\n  },\n  output: {\n    path: __dirname + '/_dist',\n    filename: '[name]_[hash].js',\n  },\n  resolve: {\n    root: [\n      __dirname + '/src',\n      __dirname + '/node_modules',\n      __dirname,\n    ],\n    extensions: ['', '.js'],\n  },\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      loaders: ['babel'],\n      exclude: /node_modules/,\n    }, {\n      test: /\\.css$/,\n      loaders: ['style', 'css'],\n      include: /components/,\n    }, {\n      test: /\\.(jpe?g|png|gif|svg|ico)/i,\n      loader: 'file',\n    }, {\n      test: /\\.(ttf|eot|svg|woff|woff2)/,\n      loader: 'file',\n    }, {\n      test: /\\.(pdf)/,\n      loader: 'file',\n    }, {\n      test: /\\.(swf|xap)/,\n      loader: 'file',\n    }],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + '/src/index.html',\n      favicon: __dirname + '/src/favicon.ico',\n      inject: false,\n    }),\n  ],\n};\n```\n### Express 服务器启动\nNode.js web 应用开发框架 Express 作为项目的 web 服务器，有 Node.js 开发经验的同学应该挺熟悉的了，这里也不多做赘述。\n\n最终的启动代码是这样的：\n```\nvar express = require('express');\nvar webpack = require('webpack');\nvar webpackConfig = require('./webpack.development');\n\nvar app = express();\nvar compiler = webpack(webpackConfig);\n\napp.use(require('webpack-dev-middleware')(compiler, {\n  stats: {\n    colors: true,\n  },\n}));\n\napp.use(require('webpack-hot-middleware')(compiler)); //热加载\n\napp.listen(process.env.PORT, function(err) { //在没有端口的情况下，会自动给出一个随机端口\n  if (err) {\n    console.log(err);\n  }\n});\n```\n为了方便我们的访问，项目使用了 `minihost` 进行启动，方便快捷。值得一提的是，使用 `h -- npm start` 命令启动时，访问的是项目文件夹的名称作为链接，例如项目叫 `myproject`，那么此时可以访问 `myproject.t.t`。\n\n## Redux\n对于复杂的 SPA，状态（state）管理非常重要。state 可能包括：服务端的响应数据、本地对响应数据的缓存、本地创建的数据（比如，表单数据）以及一些 UI 的状态信息（比如，路由、选中的 tab、是否显示下拉列表、页码控制等等）。如果 state 变化不可预测，就会难于调试（state 不易重现，很难复现一些 bug）和不易于扩展（比如，优化更新渲染、服务端渲染、路由切换时获取数据等等）。\n\n> state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行。\n\n在使用 Redux 后，state 就变得很容易维护，而且数据流非常清晰，容易解决遇到的 BUG。\n\n我们可以看下图来简要地理解 Redux：\n![](http://pic3.mojiax.com/mdimg/2016225/o_1acbp1n1r1qq9107d1enudoa15dtc.png)\n\n我们可以在项目中看到的结构是：\n```\n├─store\n├─actions\n├─reducers\n├─constants\n├─helpers\n├─components\n├─app.js\n├─favicon.ico\n├─index.html\n├─index.js\n└─routes.js\n```\n最终我们的 store 是：\n```\nimport {createStore, applyMiddleware, combineReducers, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport {reduxReactRouter} from 'redux-router';\nimport createHistory from 'history/lib/createHashHistory';\n\nimport routes from '../routes';\nimport * as reducers from '../reducers';\n\nlet middlewares = [thunk];\n\nif (process.env.NODE_ENV === 'development') { //在开发环境下可以看到 state 的 log\n  const logger = require('redux-logger');\n  middlewares = [...middlewares, logger];\n}\n\nconst finalCreateStore = compose( //组合多个函数\n  applyMiddleware(...middlewares),\n  reduxReactRouter({routes, createHistory}),\n)(createStore); //创建 store 来管理所有的 state\n\nexport default function configureStore(initialState) {\n  const reducer = combineReducers(reducers);  //把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数\n  const store = finalCreateStore(reducer, initialState);\n\n  if (process.env.NODE_ENV === 'development' && module.hot) { //开发环境下的热加载\n    module.hot.accept('../reducers', () => {\n      const nextReducers = require('../reducers');\n      const nextReducer = combineReducers(nextReducers);\n      store.replaceReducer(nextReducer);\n    });\n  }\n\n  return store;\n}\n```\n获取 state 需要在组件中调用 `connect` 函数，可以自行定义需要获取的 state。（这用于区分展示型和容器型组件）\n```\n...\n@connect(\n  state => ({\n    data: state.data\n  })\n)\nexport default class ComponentOne extends Component {\n  ...\n}\n```\n**注意**：`connect` 必须紧跟 component 的定义，不然会报错。\n\n## Router\n为项目添加路由系统，使用了 react-router 来管理路由。在开发项目的时候，比较推荐的做法是使用路由去跳转页面，并且创建 store 的同时我们就把 router 加入其中，然后我们根据路由的变化去更新视图。\n\n我们可以看看路由的源码：\n```\nimport React from 'react';\nimport Route from 'react-router/lib/Route'; //import {Route} from 'react-router';\nimport Base from 'components/base/Base';\nimport Home from 'components/home/Home';\n\nexport default (\n  <Route component={Base}>\n    <Route path=\"/\" component={Home} />\n    <Route path=\"/home\" component={Home} />\n  </Route>\n);\n```\n`path` 是跳转路径，`component` 是与路径相匹配的组件。\n\n## Ant Design\n由蚂蚁金服技术部出品的一个 UI 设计语言，也是项目中所用到的 UI 组件库。\n\n特性：\n* Designed as Ant Design，提炼和服务企业级中后台产品的交互语言和视觉风格\n* [React Component](http://react-component.github.io/badgeboard/) 上精心封装的高质量 UI 库\n* 基于 npm + webpack + babel 的工作流，支持 ES2015\n\n选择理由：\n* 有很好的技术支持\n* 简洁的样式\n* 基本涵盖常用组件\n...\n\n## 简单的 Component\n组件作为 React 渲染的一个基本组成，我们通常把它们分为两类，**容器型**和**展示型**。相较于**容器型**，**展示型**是通过**容器型**传递 props 来获取数据，而**容器型**可以直接从 store 中获取，处理并传递给下级组件。\n\n在实际应用中会发现，定义一个容器型组件负责处理数据，然后分发给下级展示型组件，当需要更新数据时，那么容器型组件发生变化会引起下级展示型组件的变化，这样就对我们业务上造成了一定的困扰（在不需要更新的部分组件上也发生了更新）。因此，我们选择在需要获取数据的组件中使用 `connect`，这样则会方便很多（感觉有些违反规则）。\n\n在项目中我们会这么定义组件：\n```\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Presentational from 'components/common/Presentational';\n\n@connect(\n  state => ({\n    data: state.data\n  })\n)\nexport default class Container extends Component {\n\n  render() {\n    const {data} = this.props;\n\n    return (\n      <Presentational data={data} />\n    )\n  }\n}\n```\n上面是可以从 store 获取数据的组件，并嵌套另一个组件，将数据传递给它。\n```\nimport React, {Component, PropTypes} from 'react';\n\nexport default class Presentational extends Component {\n\n  static propTypes = {\n    data: PropTypes.string,\n  }\n\n  render() {\n    const {data} = this.props;\n\n    return (\n      <div>\n        {data}\n      </div>\n    )\n  }\n}\n```\n获取上一个组件传递过来的数据，并展示出来。\n\n# 总结\n这是一篇科普文（哈哈~囧），并没有深入去分析各项技术的具体内容，希望能帮助刚入手 React 的新手们。实践项目的源码可以在 [react-start-kit](https://github.com/jovey-zheng/react-start-kit) 看到，你可以下载这个项目进行自己的一些探索和开发。还在努力探索中，文中有措辞不当或是疏漏，欢迎提出意见和建议。\n\n# 参考\n[react 官网](http://facebook.github.io/react/)\n[Babel 官网](https://babeljs.io/)\n[redux 介绍](http://segmentfault.com/a/1190000003503338?_ea=323420)\n[redux 中文文档](http://camsong.github.io/redux-in-chinese/)\n[Ant design 官网](http://ant.design/)\n[React 入门实例教程](http://www.ruanyifeng.com/blog/2015/03/react.html)\n[react-router 中文文档](http://react-guide.github.io/react-router-cn/)\n[Webpack 傻瓜式指南（一）](http://zhuanlan.zhihu.com/FrontendMagazine/20367175)\n[CSS Modules 详解及 React 中实践](http://zhuanlan.zhihu.com/purerender/20495964)\n[一看就懂的 ReactJs 入门教程（精华版）](http://www.cocoachina.com/webapp/20150721/12692.html)\n[深入浅出React（二）：React开发神器Webpack](http://www.infoq.com/cn/articles/react-and-webpack?utm_source=tuicool)\n","source":"_posts/article-18.md","raw":"title: React 入门实践\ndate: 2016-01-26 09:43:59\ncategories:\n  - React\ntags:\n  - React\n  - 入门\n  - 实践\n---\n\n> 在写这篇文章之前，我已经接触 React 有大半年了。在初步学习 React 之后就正式应用到项目中，当时就想把自己的一些想法写出来分享一下，无奈不太会写文章，再则时间不是很充裕，所以也就搁下了。\n本篇文章比较基础，没有深入的分析，大神们轻看。废话就不多说了，那么让我们来进入正题。\n\n# 简介\n首先想要介绍的是 React，看到这篇文章的朋友想必都有一些关于 React 的了解了，但对于刚接触的新人而言，在这就要简要地介绍一下了。然后就是关于使用 React 构建一个简单单页应用（下文用 SPA 代替，Single Page Application）的一些介绍和讲解。\n\n## 关于 React\nReact 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。（[更多相关介绍请看这](http://baike.baidu.com/item/react/18077599#viewPageContent)）\n\n特点：\n* **仅仅只是 UI**\n* **虚拟 DOM**：最大限度减少与 DOM 的交互（类似于使用 jQuery 操作 DOM）\n* **单向数据流**：很大程度减少了重复代码的使用\n\n组件化：\n* 可组合（Composeable）：一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部。如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件\n* 可重用（Reusable）：每个组件都是具有独立功能的，它可以被使用在多个UI场景\n* 可维护（Maintainable）：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护\n\n<!-- more -->\n\n生命周期：\n* Mounting：已插入真实 DOM\n* Updating：正在被重新渲染\n* Unmounting：已移出真实 DOM\n\nReact 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。\n* componentWillMount()\n* componentDidMount()\n* componentWillUpdate(object nextProps, object nextState)\n* componentDidUpdate(object prevProps, object prevState)\n* componentWillUnmount()\n\n此外，React 还提供两种特殊状态的处理函数。\n* componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用\n* shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用\n\n# 正题\n那么进入正题，花了点时间去写一个简单的 SPA，也算是一个比较完整 React 骨架，但不包括测试（测试的教程可以看[这个](http://www.jianshu.com/p/6c74c96148c9)），相关源码可以查看 [react-start-kit](https://github.com/jovey-zheng/react-start-kit)。\n\n接下来看看我们这个项目的构建需要用到些什么：\n * react\n * redux\n * webpack\n * react-router\n * ant design\n * babel\n ...\n\n还有一些没有列举出来，具体可以看仓库源码的 [`package.json`](https://github.com/jovey-zheng/react-start-kit/blob/master/package.json)。其中的详细介绍会在文尾列出一些我所看过的文章或是官方介绍。\n\n## 配置项\n### Webpack\n说到 React 项目的构建就不得不提 Webpack 这个神器。构建工具有很多，例如 Grunt，Gulp，Brunch 等，相比这些构建工具，Webpack 感觉就是和 React 不谋而合，尤其是 [react-hot-loader](https://github.com/gaearon/react-hot-loader) 这样的神器（热加载），让 Webpack 成为最主流的 React 构建工具。\n\n关于 Webpack 的特性以及介绍这里就不赘述了，我们可以从下图看出 Webpack 的作用：\n![](http://cdn4.infoqstatic.com/statics_s2_20160120-0059u2/resource/articles/react-and-webpack/zh/resources/0602005.jpg)\n\n接着我们从项目代码中来看 Webpack。\n```\nentry: {\n  app: [__dirname + '/src/index'],\n},\noutput: {\n  path: __dirname + '/_dist',\n  filename: '[name]_[hash].js',\n}\n```\n这部分主要是指定入口和出口文件。`entry` 作为项目的入口文件；`output` 作为文件编译后的出口，其中 `path` 代表输出的路径，`filename` 代表文件名称，而 `[name]_[hash]` 保证了浏览器不会存在缓存（即修改文件后效果不生效）。\n\n```\nmodule: {\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel'],\n    exclude: /node_modules/,\n  }, {\n    test: /\\.css$/,\n    loaders: ['style', 'css'],\n    include: /components/,\n  }, {\n    test: /\\.(jpe?g|png|gif|svg|ico)/i,\n    loader: 'file',\n  }, {\n    test: /\\.(ttf|eot|svg|woff|woff2)/,\n    loader: 'file',\n  }, {\n    test: /\\.(pdf)/,\n    loader: 'file',\n  }, {\n    test: /\\.(swf|xap)/,\n    loader: 'file',\n  }],\n}\n```\n而这部分会帮助我们去处理不同类型的文件，其中 `test` 就是文件的后缀，`loaders` 是“转译器”，`include` 是指定文件的目录，`exclude` 是排除某个目录。我们可以看出，所有的 `.js` 文件都会通过 babel 去转译，也就是我们在项目中使用 ES6+ 语法会通过 babel 转译成浏览器可以识别的 ES5 代码。\n\n最后配置好的 config 是这样的：\n```\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: {\n    app: [__dirname + '/src/index'],\n  },\n  output: {\n    path: __dirname + '/_dist',\n    filename: '[name]_[hash].js',\n  },\n  resolve: {\n    root: [\n      __dirname + '/src',\n      __dirname + '/node_modules',\n      __dirname,\n    ],\n    extensions: ['', '.js'],\n  },\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      loaders: ['babel'],\n      exclude: /node_modules/,\n    }, {\n      test: /\\.css$/,\n      loaders: ['style', 'css'],\n      include: /components/,\n    }, {\n      test: /\\.(jpe?g|png|gif|svg|ico)/i,\n      loader: 'file',\n    }, {\n      test: /\\.(ttf|eot|svg|woff|woff2)/,\n      loader: 'file',\n    }, {\n      test: /\\.(pdf)/,\n      loader: 'file',\n    }, {\n      test: /\\.(swf|xap)/,\n      loader: 'file',\n    }],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + '/src/index.html',\n      favicon: __dirname + '/src/favicon.ico',\n      inject: false,\n    }),\n  ],\n};\n```\n### Express 服务器启动\nNode.js web 应用开发框架 Express 作为项目的 web 服务器，有 Node.js 开发经验的同学应该挺熟悉的了，这里也不多做赘述。\n\n最终的启动代码是这样的：\n```\nvar express = require('express');\nvar webpack = require('webpack');\nvar webpackConfig = require('./webpack.development');\n\nvar app = express();\nvar compiler = webpack(webpackConfig);\n\napp.use(require('webpack-dev-middleware')(compiler, {\n  stats: {\n    colors: true,\n  },\n}));\n\napp.use(require('webpack-hot-middleware')(compiler)); //热加载\n\napp.listen(process.env.PORT, function(err) { //在没有端口的情况下，会自动给出一个随机端口\n  if (err) {\n    console.log(err);\n  }\n});\n```\n为了方便我们的访问，项目使用了 `minihost` 进行启动，方便快捷。值得一提的是，使用 `h -- npm start` 命令启动时，访问的是项目文件夹的名称作为链接，例如项目叫 `myproject`，那么此时可以访问 `myproject.t.t`。\n\n## Redux\n对于复杂的 SPA，状态（state）管理非常重要。state 可能包括：服务端的响应数据、本地对响应数据的缓存、本地创建的数据（比如，表单数据）以及一些 UI 的状态信息（比如，路由、选中的 tab、是否显示下拉列表、页码控制等等）。如果 state 变化不可预测，就会难于调试（state 不易重现，很难复现一些 bug）和不易于扩展（比如，优化更新渲染、服务端渲染、路由切换时获取数据等等）。\n\n> state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行。\n\n在使用 Redux 后，state 就变得很容易维护，而且数据流非常清晰，容易解决遇到的 BUG。\n\n我们可以看下图来简要地理解 Redux：\n![](http://pic3.mojiax.com/mdimg/2016225/o_1acbp1n1r1qq9107d1enudoa15dtc.png)\n\n我们可以在项目中看到的结构是：\n```\n├─store\n├─actions\n├─reducers\n├─constants\n├─helpers\n├─components\n├─app.js\n├─favicon.ico\n├─index.html\n├─index.js\n└─routes.js\n```\n最终我们的 store 是：\n```\nimport {createStore, applyMiddleware, combineReducers, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport {reduxReactRouter} from 'redux-router';\nimport createHistory from 'history/lib/createHashHistory';\n\nimport routes from '../routes';\nimport * as reducers from '../reducers';\n\nlet middlewares = [thunk];\n\nif (process.env.NODE_ENV === 'development') { //在开发环境下可以看到 state 的 log\n  const logger = require('redux-logger');\n  middlewares = [...middlewares, logger];\n}\n\nconst finalCreateStore = compose( //组合多个函数\n  applyMiddleware(...middlewares),\n  reduxReactRouter({routes, createHistory}),\n)(createStore); //创建 store 来管理所有的 state\n\nexport default function configureStore(initialState) {\n  const reducer = combineReducers(reducers);  //把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数\n  const store = finalCreateStore(reducer, initialState);\n\n  if (process.env.NODE_ENV === 'development' && module.hot) { //开发环境下的热加载\n    module.hot.accept('../reducers', () => {\n      const nextReducers = require('../reducers');\n      const nextReducer = combineReducers(nextReducers);\n      store.replaceReducer(nextReducer);\n    });\n  }\n\n  return store;\n}\n```\n获取 state 需要在组件中调用 `connect` 函数，可以自行定义需要获取的 state。（这用于区分展示型和容器型组件）\n```\n...\n@connect(\n  state => ({\n    data: state.data\n  })\n)\nexport default class ComponentOne extends Component {\n  ...\n}\n```\n**注意**：`connect` 必须紧跟 component 的定义，不然会报错。\n\n## Router\n为项目添加路由系统，使用了 react-router 来管理路由。在开发项目的时候，比较推荐的做法是使用路由去跳转页面，并且创建 store 的同时我们就把 router 加入其中，然后我们根据路由的变化去更新视图。\n\n我们可以看看路由的源码：\n```\nimport React from 'react';\nimport Route from 'react-router/lib/Route'; //import {Route} from 'react-router';\nimport Base from 'components/base/Base';\nimport Home from 'components/home/Home';\n\nexport default (\n  <Route component={Base}>\n    <Route path=\"/\" component={Home} />\n    <Route path=\"/home\" component={Home} />\n  </Route>\n);\n```\n`path` 是跳转路径，`component` 是与路径相匹配的组件。\n\n## Ant Design\n由蚂蚁金服技术部出品的一个 UI 设计语言，也是项目中所用到的 UI 组件库。\n\n特性：\n* Designed as Ant Design，提炼和服务企业级中后台产品的交互语言和视觉风格\n* [React Component](http://react-component.github.io/badgeboard/) 上精心封装的高质量 UI 库\n* 基于 npm + webpack + babel 的工作流，支持 ES2015\n\n选择理由：\n* 有很好的技术支持\n* 简洁的样式\n* 基本涵盖常用组件\n...\n\n## 简单的 Component\n组件作为 React 渲染的一个基本组成，我们通常把它们分为两类，**容器型**和**展示型**。相较于**容器型**，**展示型**是通过**容器型**传递 props 来获取数据，而**容器型**可以直接从 store 中获取，处理并传递给下级组件。\n\n在实际应用中会发现，定义一个容器型组件负责处理数据，然后分发给下级展示型组件，当需要更新数据时，那么容器型组件发生变化会引起下级展示型组件的变化，这样就对我们业务上造成了一定的困扰（在不需要更新的部分组件上也发生了更新）。因此，我们选择在需要获取数据的组件中使用 `connect`，这样则会方便很多（感觉有些违反规则）。\n\n在项目中我们会这么定义组件：\n```\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Presentational from 'components/common/Presentational';\n\n@connect(\n  state => ({\n    data: state.data\n  })\n)\nexport default class Container extends Component {\n\n  render() {\n    const {data} = this.props;\n\n    return (\n      <Presentational data={data} />\n    )\n  }\n}\n```\n上面是可以从 store 获取数据的组件，并嵌套另一个组件，将数据传递给它。\n```\nimport React, {Component, PropTypes} from 'react';\n\nexport default class Presentational extends Component {\n\n  static propTypes = {\n    data: PropTypes.string,\n  }\n\n  render() {\n    const {data} = this.props;\n\n    return (\n      <div>\n        {data}\n      </div>\n    )\n  }\n}\n```\n获取上一个组件传递过来的数据，并展示出来。\n\n# 总结\n这是一篇科普文（哈哈~囧），并没有深入去分析各项技术的具体内容，希望能帮助刚入手 React 的新手们。实践项目的源码可以在 [react-start-kit](https://github.com/jovey-zheng/react-start-kit) 看到，你可以下载这个项目进行自己的一些探索和开发。还在努力探索中，文中有措辞不当或是疏漏，欢迎提出意见和建议。\n\n# 参考\n[react 官网](http://facebook.github.io/react/)\n[Babel 官网](https://babeljs.io/)\n[redux 介绍](http://segmentfault.com/a/1190000003503338?_ea=323420)\n[redux 中文文档](http://camsong.github.io/redux-in-chinese/)\n[Ant design 官网](http://ant.design/)\n[React 入门实例教程](http://www.ruanyifeng.com/blog/2015/03/react.html)\n[react-router 中文文档](http://react-guide.github.io/react-router-cn/)\n[Webpack 傻瓜式指南（一）](http://zhuanlan.zhihu.com/FrontendMagazine/20367175)\n[CSS Modules 详解及 React 中实践](http://zhuanlan.zhihu.com/purerender/20495964)\n[一看就懂的 ReactJs 入门教程（精华版）](http://www.cocoachina.com/webapp/20150721/12692.html)\n[深入浅出React（二）：React开发神器Webpack](http://www.infoq.com/cn/articles/react-and-webpack?utm_source=tuicool)\n","slug":"article-18","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7emq000ownprsqsh7zag","content":"<blockquote>\n<p>在写这篇文章之前，我已经接触 React 有大半年了。在初步学习 React 之后就正式应用到项目中，当时就想把自己的一些想法写出来分享一下，无奈不太会写文章，再则时间不是很充裕，所以也就搁下了。<br>本篇文章比较基础，没有深入的分析，大神们轻看。废话就不多说了，那么让我们来进入正题。</p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>首先想要介绍的是 React，看到这篇文章的朋友想必都有一些关于 React 的了解了，但对于刚接触的新人而言，在这就要简要地介绍一下了。然后就是关于使用 React 构建一个简单单页应用（下文用 SPA 代替，Single Page Application）的一些介绍和讲解。</p>\n<h2 id=\"关于-React\"><a href=\"#关于-React\" class=\"headerlink\" title=\"关于 React\"></a>关于 React</h2><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。（<a href=\"http://baike.baidu.com/item/react/18077599#viewPageContent\" target=\"_blank\" rel=\"external\">更多相关介绍请看这</a>）</p>\n<p>特点：</p>\n<ul>\n<li><strong>仅仅只是 UI</strong></li>\n<li><strong>虚拟 DOM</strong>：最大限度减少与 DOM 的交互（类似于使用 jQuery 操作 DOM）</li>\n<li><strong>单向数据流</strong>：很大程度减少了重复代码的使用</li>\n</ul>\n<p>组件化：</p>\n<ul>\n<li>可组合（Composeable）：一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部。如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件</li>\n<li>可重用（Reusable）：每个组件都是具有独立功能的，它可以被使用在多个UI场景</li>\n<li>可维护（Maintainable）：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</li>\n</ul>\n<a id=\"more\"></a>\n<p>生命周期：</p>\n<ul>\n<li>Mounting：已插入真实 DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounting：已移出真实 DOM</li>\n</ul>\n<p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。</p>\n<ul>\n<li>componentWillMount()</li>\n<li>componentDidMount()</li>\n<li>componentWillUpdate(object nextProps, object nextState)</li>\n<li>componentDidUpdate(object prevProps, object prevState)</li>\n<li>componentWillUnmount()</li>\n</ul>\n<p>此外，React 还提供两种特殊状态的处理函数。</p>\n<ul>\n<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>\n<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>\n</ul>\n<h1 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h1><p>那么进入正题，花了点时间去写一个简单的 SPA，也算是一个比较完整 React 骨架，但不包括测试（测试的教程可以看<a href=\"http://www.jianshu.com/p/6c74c96148c9\" target=\"_blank\" rel=\"external\">这个</a>），相关源码可以查看 <a href=\"https://github.com/jovey-zheng/react-start-kit\" target=\"_blank\" rel=\"external\">react-start-kit</a>。</p>\n<p>接下来看看我们这个项目的构建需要用到些什么：</p>\n<ul>\n<li>react</li>\n<li>redux</li>\n<li>webpack</li>\n<li>react-router</li>\n<li>ant design</li>\n<li>babel<br>…</li>\n</ul>\n<p>还有一些没有列举出来，具体可以看仓库源码的 <a href=\"https://github.com/jovey-zheng/react-start-kit/blob/master/package.json\" target=\"_blank\" rel=\"external\"><code>package.json</code></a>。其中的详细介绍会在文尾列出一些我所看过的文章或是官方介绍。</p>\n<h2 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h2><h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><p>说到 React 项目的构建就不得不提 Webpack 这个神器。构建工具有很多，例如 Grunt，Gulp，Brunch 等，相比这些构建工具，Webpack 感觉就是和 React 不谋而合，尤其是 <a href=\"https://github.com/gaearon/react-hot-loader\" target=\"_blank\" rel=\"external\">react-hot-loader</a> 这样的神器（热加载），让 Webpack 成为最主流的 React 构建工具。</p>\n<p>关于 Webpack 的特性以及介绍这里就不赘述了，我们可以从下图看出 Webpack 的作用：<br><img src=\"http://cdn4.infoqstatic.com/statics_s2_20160120-0059u2/resource/articles/react-and-webpack/zh/resources/0602005.jpg\" alt=\"\"></p>\n<p>接着我们从项目代码中来看 Webpack。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">entry</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">app</span>: [__dirname + <span class=\"string\">'/src/index'</span>],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"selector-tag\">output</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">path</span>: __dirname + <span class=\"string\">'/_dist'</span>,</span><br><span class=\"line\">  filename: <span class=\"string\">'[name]_[hash].js'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这部分主要是指定入口和出口文件。<code>entry</code> 作为项目的入口文件；<code>output</code> 作为文件编译后的出口，其中 <code>path</code> 代表输出的路径，<code>filename</code> 代表文件名称，而 <code>[name]_[hash]</code> 保证了浏览器不会存在缓存（即修改文件后效果不生效）。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">loaders</span>: [&#123;</span><br><span class=\"line\">    test: /\\.js$/,</span><br><span class=\"line\">    loaders: [<span class=\"string\">'babel'</span>],</span><br><span class=\"line\">    exclude: /node_modules/,</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attribute\">test</span>: /\\.css$/,</span><br><span class=\"line\">    loaders: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>],</span><br><span class=\"line\">    include: /components/,</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attribute\">test</span>: /\\.(jpe?g|png|gif|svg|ico)/i,</span><br><span class=\"line\">    loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attribute\">test</span>: /\\.(ttf|eot|svg|woff|woff2)/,</span><br><span class=\"line\">    loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attribute\">test</span>: /\\.(pdf)/,</span><br><span class=\"line\">    loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attribute\">test</span>: /\\.(swf|xap)/,</span><br><span class=\"line\">    loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而这部分会帮助我们去处理不同类型的文件，其中 <code>test</code> 就是文件的后缀，<code>loaders</code> 是“转译器”，<code>include</code> 是指定文件的目录，<code>exclude</code> 是排除某个目录。我们可以看出，所有的 <code>.js</code> 文件都会通过 babel 去转译，也就是我们在项目中使用 ES6+ 语法会通过 babel 转译成浏览器可以识别的 ES5 代码。</p>\n<p>最后配置好的 config 是这样的：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: [__dirname + <span class=\"string\">'/src/index'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">'/_dist'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'[name]_[hash].js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    root: [</span><br><span class=\"line\">      __dirname + <span class=\"string\">'/src'</span>,</span><br><span class=\"line\">      __dirname + <span class=\"string\">'/node_modules'</span>,</span><br><span class=\"line\">      __dirname,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      loaders: [<span class=\"string\">'babel'</span>],</span><br><span class=\"line\">      exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      loaders: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>],</span><br><span class=\"line\">      include: <span class=\"regexp\">/components/</span>,</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(jpe?g|png|gif|svg|ico)/i</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(ttf|eot|svg|woff|woff2)/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(pdf)/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(swf|xap)/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: __dirname + <span class=\"string\">'/src/index.html'</span>,</span><br><span class=\"line\">      favicon: __dirname + <span class=\"string\">'/src/favicon.ico'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Express-服务器启动\"><a href=\"#Express-服务器启动\" class=\"headerlink\" title=\"Express 服务器启动\"></a>Express 服务器启动</h3><p>Node.js web 应用开发框架 Express 作为项目的 web 服务器，有 Node.js 开发经验的同学应该挺熟悉的了，这里也不多做赘述。</p>\n<p>最终的启动代码是这样的：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"keyword\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpackConfig = <span class=\"keyword\">require</span>(<span class=\"string\">'./webpack.development'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">var</span> compiler = webpack(webpackConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(<span class=\"keyword\">require</span>(<span class=\"string\">'webpack-dev-middleware'</span>)(compiler, &#123;</span><br><span class=\"line\">  stats: &#123;</span><br><span class=\"line\">    colors: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(<span class=\"keyword\">require</span>(<span class=\"string\">'webpack-hot-middleware'</span>)(compiler)); <span class=\"comment\">//热加载</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(process.env.PORT, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err)</span> </span>&#123; <span class=\"comment\">//在没有端口的情况下，会自动给出一个随机端口</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>为了方便我们的访问，项目使用了 <code>minihost</code> 进行启动，方便快捷。值得一提的是，使用 <code>h -- npm start</code> 命令启动时，访问的是项目文件夹的名称作为链接，例如项目叫 <code>myproject</code>，那么此时可以访问 <code>myproject.t.t</code>。</p>\n<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><p>对于复杂的 SPA，状态（state）管理非常重要。state 可能包括：服务端的响应数据、本地对响应数据的缓存、本地创建的数据（比如，表单数据）以及一些 UI 的状态信息（比如，路由、选中的 tab、是否显示下拉列表、页码控制等等）。如果 state 变化不可预测，就会难于调试（state 不易重现，很难复现一些 bug）和不易于扩展（比如，优化更新渲染、服务端渲染、路由切换时获取数据等等）。</p>\n<blockquote>\n<p>state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行。</p>\n</blockquote>\n<p>在使用 Redux 后，state 就变得很容易维护，而且数据流非常清晰，容易解决遇到的 BUG。</p>\n<p>我们可以看下图来简要地理解 Redux：<br><img src=\"http://pic3.mojiax.com/mdimg/2016225/o_1acbp1n1r1qq9107d1enudoa15dtc.png\" alt=\"\"></p>\n<p>我们可以在项目中看到的结构是：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─store</span><br><span class=\"line\">├─actions</span><br><span class=\"line\">├─reducers</span><br><span class=\"line\">├─constants</span><br><span class=\"line\">├─helpers</span><br><span class=\"line\">├─components</span><br><span class=\"line\">├─app<span class=\"selector-class\">.js</span></span><br><span class=\"line\">├─favicon<span class=\"selector-class\">.ico</span></span><br><span class=\"line\">├─index<span class=\"selector-class\">.html</span></span><br><span class=\"line\">├─index<span class=\"selector-class\">.js</span></span><br><span class=\"line\">└─routes.js</span><br></pre></td></tr></table></figure></p>\n<p>最终我们的 store 是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore, applyMiddleware, combineReducers, compose&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> thunk <span class=\"keyword\">from</span> <span class=\"string\">'redux-thunk'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;reduxReactRouter&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> createHistory <span class=\"keyword\">from</span> <span class=\"string\">'history/lib/createHashHistory'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">'../routes'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> reducers <span class=\"keyword\">from</span> <span class=\"string\">'../reducers'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> middlewares = [thunk];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV === <span class=\"string\">'development'</span>) &#123; <span class=\"comment\">//在开发环境下可以看到 state 的 log</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> logger = <span class=\"built_in\">require</span>(<span class=\"string\">'redux-logger'</span>);</span><br><span class=\"line\">  middlewares = [...middlewares, logger];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> finalCreateStore = compose( <span class=\"comment\">//组合多个函数</span></span><br><span class=\"line\">  applyMiddleware(...middlewares),</span><br><span class=\"line\">  reduxReactRouter(&#123;routes, createHistory&#125;),</span><br><span class=\"line\">)(createStore); <span class=\"comment\">//创建 store 来管理所有的 state</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">configureStore</span>(<span class=\"params\">initialState</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducer = combineReducers(reducers);  <span class=\"comment\">//把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = finalCreateStore(reducer, initialState);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV === <span class=\"string\">'development'</span> &amp;&amp; <span class=\"built_in\">module</span>.hot) &#123; <span class=\"comment\">//开发环境下的热加载</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.hot.accept(<span class=\"string\">'../reducers'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextReducers = <span class=\"built_in\">require</span>(<span class=\"string\">'../reducers'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextReducer = combineReducers(nextReducers);</span><br><span class=\"line\">      store.replaceReducer(nextReducer);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> store;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>获取 state 需要在组件中调用 <code>connect</code> 函数，可以自行定义需要获取的 state。（这用于区分展示型和容器型组件）<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@connect</span>(</span><br><span class=\"line\">  state =&gt; (&#123;</span><br><span class=\"line\">    data: state.data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>：<code>connect</code> 必须紧跟 component 的定义，不然会报错。</p>\n<h2 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h2><p>为项目添加路由系统，使用了 react-router 来管理路由。在开发项目的时候，比较推荐的做法是使用路由去跳转页面，并且创建 store 的同时我们就把 router 加入其中，然后我们根据路由的变化去更新视图。</p>\n<p>我们可以看看路由的源码：<br><figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Route <span class=\"keyword\">from</span> <span class=\"string\">'react-router/lib/Route'</span>; //<span class=\"keyword\">import</span> &#123;Route&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Base <span class=\"keyword\">from</span> <span class=\"string\">'components/base/Base'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'components/home/Home'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> default (</span><br><span class=\"line\">  &lt;Route component=&#123;Base&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;Home&#125; /&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/home\"</span> component=&#123;Home&#125; /&gt;</span><br><span class=\"line\">  &lt;/Route&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p><code>path</code> 是跳转路径，<code>component</code> 是与路径相匹配的组件。</p>\n<h2 id=\"Ant-Design\"><a href=\"#Ant-Design\" class=\"headerlink\" title=\"Ant Design\"></a>Ant Design</h2><p>由蚂蚁金服技术部出品的一个 UI 设计语言，也是项目中所用到的 UI 组件库。</p>\n<p>特性：</p>\n<ul>\n<li>Designed as Ant Design，提炼和服务企业级中后台产品的交互语言和视觉风格</li>\n<li><a href=\"http://react-component.github.io/badgeboard/\" target=\"_blank\" rel=\"external\">React Component</a> 上精心封装的高质量 UI 库</li>\n<li>基于 npm + webpack + babel 的工作流，支持 ES2015</li>\n</ul>\n<p>选择理由：</p>\n<ul>\n<li>有很好的技术支持</li>\n<li>简洁的样式</li>\n<li>基本涵盖常用组件<br>…</li>\n</ul>\n<h2 id=\"简单的-Component\"><a href=\"#简单的-Component\" class=\"headerlink\" title=\"简单的 Component\"></a>简单的 Component</h2><p>组件作为 React 渲染的一个基本组成，我们通常把它们分为两类，<strong>容器型</strong>和<strong>展示型</strong>。相较于<strong>容器型</strong>，<strong>展示型</strong>是通过<strong>容器型</strong>传递 props 来获取数据，而<strong>容器型</strong>可以直接从 store 中获取，处理并传递给下级组件。</p>\n<p>在实际应用中会发现，定义一个容器型组件负责处理数据，然后分发给下级展示型组件，当需要更新数据时，那么容器型组件发生变化会引起下级展示型组件的变化，这样就对我们业务上造成了一定的困扰（在不需要更新的部分组件上也发生了更新）。因此，我们选择在需要获取数据的组件中使用 <code>connect</code>，这样则会方便很多（感觉有些违反规则）。</p>\n<p>在项目中我们会这么定义组件：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123;<span class=\"type\">Component</span>&#125; from <span class=\"symbol\">'reac</span>t';</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;connect&#125; from <span class=\"symbol\">'react</span>-redux';</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">Presentational</span> from <span class=\"symbol\">'components</span>/common/<span class=\"type\">Presentational</span>';</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@connect</span>(</span><br><span class=\"line\">  state =&gt; (&#123;</span><br><span class=\"line\">    data: state.data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;data&#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;<span class=\"type\">Presentational</span> data=&#123;data&#125; /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面是可以从 store 获取数据的组件，并嵌套另一个组件，将数据传递给它。<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123;<span class=\"type\">Component</span>, <span class=\"type\">PropTypes</span>&#125; from <span class=\"symbol\">'reac</span>t';</span><br><span class=\"line\"></span><br><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presentational</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  static propTypes = &#123;</span><br><span class=\"line\">    data: <span class=\"type\">PropTypes</span>.string,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;data&#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;data&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>获取上一个组件传递过来的数据，并展示出来。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这是一篇科普文（哈哈~囧），并没有深入去分析各项技术的具体内容，希望能帮助刚入手 React 的新手们。实践项目的源码可以在 <a href=\"https://github.com/jovey-zheng/react-start-kit\" target=\"_blank\" rel=\"external\">react-start-kit</a> 看到，你可以下载这个项目进行自己的一些探索和开发。还在努力探索中，文中有措辞不当或是疏漏，欢迎提出意见和建议。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">react 官网</a><br><a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"external\">Babel 官网</a><br><a href=\"http://segmentfault.com/a/1190000003503338?_ea=323420\" target=\"_blank\" rel=\"external\">redux 介绍</a><br><a href=\"http://camsong.github.io/redux-in-chinese/\" target=\"_blank\" rel=\"external\">redux 中文文档</a><br><a href=\"http://ant.design/\" target=\"_blank\" rel=\"external\">Ant design 官网</a><br><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"external\">React 入门实例教程</a><br><a href=\"http://react-guide.github.io/react-router-cn/\" target=\"_blank\" rel=\"external\">react-router 中文文档</a><br><a href=\"http://zhuanlan.zhihu.com/FrontendMagazine/20367175\" target=\"_blank\" rel=\"external\">Webpack 傻瓜式指南（一）</a><br><a href=\"http://zhuanlan.zhihu.com/purerender/20495964\" target=\"_blank\" rel=\"external\">CSS Modules 详解及 React 中实践</a><br><a href=\"http://www.cocoachina.com/webapp/20150721/12692.html\" target=\"_blank\" rel=\"external\">一看就懂的 ReactJs 入门教程（精华版）</a><br><a href=\"http://www.infoq.com/cn/articles/react-and-webpack?utm_source=tuicool\" target=\"_blank\" rel=\"external\">深入浅出React（二）：React开发神器Webpack</a></p>\n","excerpt":"<blockquote>\n<p>在写这篇文章之前，我已经接触 React 有大半年了。在初步学习 React 之后就正式应用到项目中，当时就想把自己的一些想法写出来分享一下，无奈不太会写文章，再则时间不是很充裕，所以也就搁下了。<br>本篇文章比较基础，没有深入的分析，大神们轻看。废话就不多说了，那么让我们来进入正题。</p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>首先想要介绍的是 React，看到这篇文章的朋友想必都有一些关于 React 的了解了，但对于刚接触的新人而言，在这就要简要地介绍一下了。然后就是关于使用 React 构建一个简单单页应用（下文用 SPA 代替，Single Page Application）的一些介绍和讲解。</p>\n<h2 id=\"关于-React\"><a href=\"#关于-React\" class=\"headerlink\" title=\"关于 React\"></a>关于 React</h2><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。（<a href=\"http://baike.baidu.com/item/react/18077599#viewPageContent\">更多相关介绍请看这</a>）</p>\n<p>特点：</p>\n<ul>\n<li><strong>仅仅只是 UI</strong></li>\n<li><strong>虚拟 DOM</strong>：最大限度减少与 DOM 的交互（类似于使用 jQuery 操作 DOM）</li>\n<li><strong>单向数据流</strong>：很大程度减少了重复代码的使用</li>\n</ul>\n<p>组件化：</p>\n<ul>\n<li>可组合（Composeable）：一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部。如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件</li>\n<li>可重用（Reusable）：每个组件都是具有独立功能的，它可以被使用在多个UI场景</li>\n<li>可维护（Maintainable）：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</li>\n</ul>","more":"<p>生命周期：</p>\n<ul>\n<li>Mounting：已插入真实 DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounting：已移出真实 DOM</li>\n</ul>\n<p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。</p>\n<ul>\n<li>componentWillMount()</li>\n<li>componentDidMount()</li>\n<li>componentWillUpdate(object nextProps, object nextState)</li>\n<li>componentDidUpdate(object prevProps, object prevState)</li>\n<li>componentWillUnmount()</li>\n</ul>\n<p>此外，React 还提供两种特殊状态的处理函数。</p>\n<ul>\n<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>\n<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>\n</ul>\n<h1 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h1><p>那么进入正题，花了点时间去写一个简单的 SPA，也算是一个比较完整 React 骨架，但不包括测试（测试的教程可以看<a href=\"http://www.jianshu.com/p/6c74c96148c9\">这个</a>），相关源码可以查看 <a href=\"https://github.com/jovey-zheng/react-start-kit\">react-start-kit</a>。</p>\n<p>接下来看看我们这个项目的构建需要用到些什么：</p>\n<ul>\n<li>react</li>\n<li>redux</li>\n<li>webpack</li>\n<li>react-router</li>\n<li>ant design</li>\n<li>babel<br>…</li>\n</ul>\n<p>还有一些没有列举出来，具体可以看仓库源码的 <a href=\"https://github.com/jovey-zheng/react-start-kit/blob/master/package.json\"><code>package.json</code></a>。其中的详细介绍会在文尾列出一些我所看过的文章或是官方介绍。</p>\n<h2 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h2><h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><p>说到 React 项目的构建就不得不提 Webpack 这个神器。构建工具有很多，例如 Grunt，Gulp，Brunch 等，相比这些构建工具，Webpack 感觉就是和 React 不谋而合，尤其是 <a href=\"https://github.com/gaearon/react-hot-loader\">react-hot-loader</a> 这样的神器（热加载），让 Webpack 成为最主流的 React 构建工具。</p>\n<p>关于 Webpack 的特性以及介绍这里就不赘述了，我们可以从下图看出 Webpack 的作用：<br><img src=\"http://cdn4.infoqstatic.com/statics_s2_20160120-0059u2/resource/articles/react-and-webpack/zh/resources/0602005.jpg\" alt=\"\"></p>\n<p>接着我们从项目代码中来看 Webpack。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">entry</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">app</span>: [__dirname + <span class=\"string\">'/src/index'</span>],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"selector-tag\">output</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">path</span>: __dirname + <span class=\"string\">'/_dist'</span>,</span><br><span class=\"line\">  filename: <span class=\"string\">'[name]_[hash].js'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这部分主要是指定入口和出口文件。<code>entry</code> 作为项目的入口文件；<code>output</code> 作为文件编译后的出口，其中 <code>path</code> 代表输出的路径，<code>filename</code> 代表文件名称，而 <code>[name]_[hash]</code> 保证了浏览器不会存在缓存（即修改文件后效果不生效）。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">loaders</span>: [&#123;</span><br><span class=\"line\">    test: /\\.js$/,</span><br><span class=\"line\">    loaders: [<span class=\"string\">'babel'</span>],</span><br><span class=\"line\">    exclude: /node_modules/,</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attribute\">test</span>: /\\.css$/,</span><br><span class=\"line\">    loaders: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>],</span><br><span class=\"line\">    include: /components/,</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attribute\">test</span>: /\\.(jpe?g|png|gif|svg|ico)/i,</span><br><span class=\"line\">    loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attribute\">test</span>: /\\.(ttf|eot|svg|woff|woff2)/,</span><br><span class=\"line\">    loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attribute\">test</span>: /\\.(pdf)/,</span><br><span class=\"line\">    loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attribute\">test</span>: /\\.(swf|xap)/,</span><br><span class=\"line\">    loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而这部分会帮助我们去处理不同类型的文件，其中 <code>test</code> 就是文件的后缀，<code>loaders</code> 是“转译器”，<code>include</code> 是指定文件的目录，<code>exclude</code> 是排除某个目录。我们可以看出，所有的 <code>.js</code> 文件都会通过 babel 去转译，也就是我们在项目中使用 ES6+ 语法会通过 babel 转译成浏览器可以识别的 ES5 代码。</p>\n<p>最后配置好的 config 是这样的：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: [__dirname + <span class=\"string\">'/src/index'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">'/_dist'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'[name]_[hash].js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    root: [</span><br><span class=\"line\">      __dirname + <span class=\"string\">'/src'</span>,</span><br><span class=\"line\">      __dirname + <span class=\"string\">'/node_modules'</span>,</span><br><span class=\"line\">      __dirname,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      loaders: [<span class=\"string\">'babel'</span>],</span><br><span class=\"line\">      exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      loaders: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>],</span><br><span class=\"line\">      include: <span class=\"regexp\">/components/</span>,</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(jpe?g|png|gif|svg|ico)/i</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(ttf|eot|svg|woff|woff2)/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(pdf)/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(swf|xap)/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: __dirname + <span class=\"string\">'/src/index.html'</span>,</span><br><span class=\"line\">      favicon: __dirname + <span class=\"string\">'/src/favicon.ico'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Express-服务器启动\"><a href=\"#Express-服务器启动\" class=\"headerlink\" title=\"Express 服务器启动\"></a>Express 服务器启动</h3><p>Node.js web 应用开发框架 Express 作为项目的 web 服务器，有 Node.js 开发经验的同学应该挺熟悉的了，这里也不多做赘述。</p>\n<p>最终的启动代码是这样的：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"keyword\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpackConfig = <span class=\"keyword\">require</span>(<span class=\"string\">'./webpack.development'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">var</span> compiler = webpack(webpackConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(<span class=\"keyword\">require</span>(<span class=\"string\">'webpack-dev-middleware'</span>)(compiler, &#123;</span><br><span class=\"line\">  stats: &#123;</span><br><span class=\"line\">    colors: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(<span class=\"keyword\">require</span>(<span class=\"string\">'webpack-hot-middleware'</span>)(compiler)); <span class=\"comment\">//热加载</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(process.env.PORT, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err)</span> </span>&#123; <span class=\"comment\">//在没有端口的情况下，会自动给出一个随机端口</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>为了方便我们的访问，项目使用了 <code>minihost</code> 进行启动，方便快捷。值得一提的是，使用 <code>h -- npm start</code> 命令启动时，访问的是项目文件夹的名称作为链接，例如项目叫 <code>myproject</code>，那么此时可以访问 <code>myproject.t.t</code>。</p>\n<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><p>对于复杂的 SPA，状态（state）管理非常重要。state 可能包括：服务端的响应数据、本地对响应数据的缓存、本地创建的数据（比如，表单数据）以及一些 UI 的状态信息（比如，路由、选中的 tab、是否显示下拉列表、页码控制等等）。如果 state 变化不可预测，就会难于调试（state 不易重现，很难复现一些 bug）和不易于扩展（比如，优化更新渲染、服务端渲染、路由切换时获取数据等等）。</p>\n<blockquote>\n<p>state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行。</p>\n</blockquote>\n<p>在使用 Redux 后，state 就变得很容易维护，而且数据流非常清晰，容易解决遇到的 BUG。</p>\n<p>我们可以看下图来简要地理解 Redux：<br><img src=\"http://pic3.mojiax.com/mdimg/2016225/o_1acbp1n1r1qq9107d1enudoa15dtc.png\" alt=\"\"></p>\n<p>我们可以在项目中看到的结构是：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─store</span><br><span class=\"line\">├─actions</span><br><span class=\"line\">├─reducers</span><br><span class=\"line\">├─constants</span><br><span class=\"line\">├─helpers</span><br><span class=\"line\">├─components</span><br><span class=\"line\">├─app<span class=\"selector-class\">.js</span></span><br><span class=\"line\">├─favicon<span class=\"selector-class\">.ico</span></span><br><span class=\"line\">├─index<span class=\"selector-class\">.html</span></span><br><span class=\"line\">├─index<span class=\"selector-class\">.js</span></span><br><span class=\"line\">└─routes.js</span><br></pre></td></tr></table></figure></p>\n<p>最终我们的 store 是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore, applyMiddleware, combineReducers, compose&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> thunk <span class=\"keyword\">from</span> <span class=\"string\">'redux-thunk'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;reduxReactRouter&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> createHistory <span class=\"keyword\">from</span> <span class=\"string\">'history/lib/createHashHistory'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">'../routes'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> reducers <span class=\"keyword\">from</span> <span class=\"string\">'../reducers'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> middlewares = [thunk];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV === <span class=\"string\">'development'</span>) &#123; <span class=\"comment\">//在开发环境下可以看到 state 的 log</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> logger = <span class=\"built_in\">require</span>(<span class=\"string\">'redux-logger'</span>);</span><br><span class=\"line\">  middlewares = [...middlewares, logger];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> finalCreateStore = compose( <span class=\"comment\">//组合多个函数</span></span><br><span class=\"line\">  applyMiddleware(...middlewares),</span><br><span class=\"line\">  reduxReactRouter(&#123;routes, createHistory&#125;),</span><br><span class=\"line\">)(createStore); <span class=\"comment\">//创建 store 来管理所有的 state</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">configureStore</span>(<span class=\"params\">initialState</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducer = combineReducers(reducers);  <span class=\"comment\">//把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = finalCreateStore(reducer, initialState);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV === <span class=\"string\">'development'</span> &amp;&amp; <span class=\"built_in\">module</span>.hot) &#123; <span class=\"comment\">//开发环境下的热加载</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.hot.accept(<span class=\"string\">'../reducers'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextReducers = <span class=\"built_in\">require</span>(<span class=\"string\">'../reducers'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextReducer = combineReducers(nextReducers);</span><br><span class=\"line\">      store.replaceReducer(nextReducer);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> store;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>获取 state 需要在组件中调用 <code>connect</code> 函数，可以自行定义需要获取的 state。（这用于区分展示型和容器型组件）<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@connect</span>(</span><br><span class=\"line\">  state =&gt; (&#123;</span><br><span class=\"line\">    data: state.data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>：<code>connect</code> 必须紧跟 component 的定义，不然会报错。</p>\n<h2 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h2><p>为项目添加路由系统，使用了 react-router 来管理路由。在开发项目的时候，比较推荐的做法是使用路由去跳转页面，并且创建 store 的同时我们就把 router 加入其中，然后我们根据路由的变化去更新视图。</p>\n<p>我们可以看看路由的源码：<br><figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Route <span class=\"keyword\">from</span> <span class=\"string\">'react-router/lib/Route'</span>; //<span class=\"keyword\">import</span> &#123;Route&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Base <span class=\"keyword\">from</span> <span class=\"string\">'components/base/Base'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'components/home/Home'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> default (</span><br><span class=\"line\">  &lt;Route component=&#123;Base&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;Home&#125; /&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/home\"</span> component=&#123;Home&#125; /&gt;</span><br><span class=\"line\">  &lt;/Route&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p><code>path</code> 是跳转路径，<code>component</code> 是与路径相匹配的组件。</p>\n<h2 id=\"Ant-Design\"><a href=\"#Ant-Design\" class=\"headerlink\" title=\"Ant Design\"></a>Ant Design</h2><p>由蚂蚁金服技术部出品的一个 UI 设计语言，也是项目中所用到的 UI 组件库。</p>\n<p>特性：</p>\n<ul>\n<li>Designed as Ant Design，提炼和服务企业级中后台产品的交互语言和视觉风格</li>\n<li><a href=\"http://react-component.github.io/badgeboard/\">React Component</a> 上精心封装的高质量 UI 库</li>\n<li>基于 npm + webpack + babel 的工作流，支持 ES2015</li>\n</ul>\n<p>选择理由：</p>\n<ul>\n<li>有很好的技术支持</li>\n<li>简洁的样式</li>\n<li>基本涵盖常用组件<br>…</li>\n</ul>\n<h2 id=\"简单的-Component\"><a href=\"#简单的-Component\" class=\"headerlink\" title=\"简单的 Component\"></a>简单的 Component</h2><p>组件作为 React 渲染的一个基本组成，我们通常把它们分为两类，<strong>容器型</strong>和<strong>展示型</strong>。相较于<strong>容器型</strong>，<strong>展示型</strong>是通过<strong>容器型</strong>传递 props 来获取数据，而<strong>容器型</strong>可以直接从 store 中获取，处理并传递给下级组件。</p>\n<p>在实际应用中会发现，定义一个容器型组件负责处理数据，然后分发给下级展示型组件，当需要更新数据时，那么容器型组件发生变化会引起下级展示型组件的变化，这样就对我们业务上造成了一定的困扰（在不需要更新的部分组件上也发生了更新）。因此，我们选择在需要获取数据的组件中使用 <code>connect</code>，这样则会方便很多（感觉有些违反规则）。</p>\n<p>在项目中我们会这么定义组件：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123;<span class=\"type\">Component</span>&#125; from <span class=\"symbol\">'reac</span>t';</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;connect&#125; from <span class=\"symbol\">'react</span>-redux';</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">Presentational</span> from <span class=\"symbol\">'components</span>/common/<span class=\"type\">Presentational</span>';</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@connect</span>(</span><br><span class=\"line\">  state =&gt; (&#123;</span><br><span class=\"line\">    data: state.data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;data&#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;<span class=\"type\">Presentational</span> data=&#123;data&#125; /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面是可以从 store 获取数据的组件，并嵌套另一个组件，将数据传递给它。<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123;<span class=\"type\">Component</span>, <span class=\"type\">PropTypes</span>&#125; from <span class=\"symbol\">'reac</span>t';</span><br><span class=\"line\"></span><br><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presentational</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  static propTypes = &#123;</span><br><span class=\"line\">    data: <span class=\"type\">PropTypes</span>.string,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;data&#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;data&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>获取上一个组件传递过来的数据，并展示出来。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这是一篇科普文（哈哈~囧），并没有深入去分析各项技术的具体内容，希望能帮助刚入手 React 的新手们。实践项目的源码可以在 <a href=\"https://github.com/jovey-zheng/react-start-kit\">react-start-kit</a> 看到，你可以下载这个项目进行自己的一些探索和开发。还在努力探索中，文中有措辞不当或是疏漏，欢迎提出意见和建议。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://facebook.github.io/react/\">react 官网</a><br><a href=\"https://babeljs.io/\">Babel 官网</a><br><a href=\"http://segmentfault.com/a/1190000003503338?_ea=323420\">redux 介绍</a><br><a href=\"http://camsong.github.io/redux-in-chinese/\">redux 中文文档</a><br><a href=\"http://ant.design/\">Ant design 官网</a><br><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\">React 入门实例教程</a><br><a href=\"http://react-guide.github.io/react-router-cn/\">react-router 中文文档</a><br><a href=\"http://zhuanlan.zhihu.com/FrontendMagazine/20367175\">Webpack 傻瓜式指南（一）</a><br><a href=\"http://zhuanlan.zhihu.com/purerender/20495964\">CSS Modules 详解及 React 中实践</a><br><a href=\"http://www.cocoachina.com/webapp/20150721/12692.html\">一看就懂的 ReactJs 入门教程（精华版）</a><br><a href=\"http://www.infoq.com/cn/articles/react-and-webpack?utm_source=tuicool\">深入浅出React（二）：React开发神器Webpack</a></p>","sticky":0},{"title":"Hexo 构建博客 - NexT 主题浅谈","date":"2016-03-03T06:16:35.000Z","_content":"\n> 利用 [Github](https://github.com/) 所提供的 **Github Page** 去构建静态的网站已经变得越来越流行，如果还不了解怎么入门，可以阅读我之前的一篇文章[「使用Hexo + Next搭建静态博客」](http://www.jianshu.com/p/f66103553c45)。当然构建博客的方法不是只有一种，你也可以尝试其他方法，而本文主要是针对 **Hexo** 去叙述的。\n\n可能看过[「使用Hexo + Next搭建静态博客」](http://www.jianshu.com/p/f66103553c45)这篇文章的同学都已经构建好了属于自己的博客了，那么接下来要说的就是关于 [NexT 主题](http://theme-next.iissnan.com/)中遇到的一些问题和提示。\n\n# 关于 RSS\n很多同学在看到别人的博客时，都会发现有订阅的功能（即 RSS），但无奈官方介绍比较少，所以无从下手。\n\n那么下面将教大家如何去做：\n\n1. 准备\n你需要安装一个 **Hexo 插件**：\n```\n$ npm install --save hexo-generator-feed\n```\n\n2. 配置\n接下来需要在 `_config.yml` 中配置一下，在 root 目录下的 `_config.yml` 中添加：\n```\n# Extensions\n## Plugins: http://hexo.io/plugins/\nplugins:\n  hexo-generate-feed\n```\n然后在主题文件夹的 `_config.yml` 中配置：\n```\n# Set rss to false to disable feed link.\n# Leave rss as empty to use site's feed link.\n# Set rss to specific value if you have burned your feed already.\nrss: /atom.xml\n```\n\n<!-- more -->\n\n3. 生成 RSS Feed\n配置完之后在 CLI 中运行：\n```\n$ hexo g\n```\n重新生成一次，你会在 `./public` 文件夹中看到 `atom.xml` 文件。然后启动服务器查看是否有效，之后再部署到 `Github` 中。\n\n最后你可以看到：\n![效果](/blog/images/article_img/19-1.png)\n\n# 修改文件后不生效\n> 有时候会发现，明明修改了文件的代码，然而没有生效。\n\n其实不是没有生效，而是静态文件没有更新，此时你需要执行：\n```\n$ hexo clean\n```\n然后执行：\n```\n$hexo g\n```\n重新生成一次即可。\n\n# 社交链接图标\n说明一下，这些图标都是出自 [`FontAwesome - 4.4.0`](https://fortawesome.github.io/Font-Awesome/)，所以你可以根据自己的需求去修改图标。\n\n实际效果：\n![效果](/blog/images/article_img/19-2.png)\n\n有的同学会发现自己的图标是个地球：\n![效果](/blog/images/article_img/19-3.png)\n\n需要配置的是主题文件夹下的 `_config.yml`，**注意：命名需要一致，包括大小写**：\n```\n# Social links\nsocial:\n  GitHub: https://github.com/XXX\n  Twitter: https://twitter.com/XXX\n  Weibo: http://weibo.com/XXX\n  Facebook: https://www.facebook.com/XXX\n  JianShu: http://www.jianshu.com/XXX\n\n# Social Icons\nsocial_icons:\n  enable: true\n  # Icon Mappings\n  GitHub: github\n  Twitter: twitter\n  Weibo: weibo\n  Facebook: facebook-square\n  JianShu: heartbeat\n```\n\n# 阅读次数\n简单介绍一下此功能的做法。\n\n1. 准备\n需要在 [LeanCloud](https://leancloud.cn) 申请一个帐号，进行一番配置后拿到 AppID 和 AppKey。\n\n2. 配置\n然后在主题文件夹下的 `_config.yml` 中配置：\n```\n# Show number of visitors to each article.\n# You can visit https://leancloud.cn get AppID and AppKey.\nleancloud_visitors:\n  enable: true\n  app_id: XXX\n  app_key: XXX\n```\n\n具体可以阅读[这篇文章](http://notes.xiamo.tk/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html)，里面的介绍非常详细！\n\n# 最后\n> 文章将持续更新，有任何疑问和建议可以在下面评论。\n","source":"_posts/article-19.md","raw":"title: Hexo 构建博客 - NexT 主题浅谈\ndate: 2016-03-03 14:16:35\ncategories:\n  - 笔记随笔\ntags:\n  - Hexo\n  - NexT\n  - github\n  - 博客\n---\n\n> 利用 [Github](https://github.com/) 所提供的 **Github Page** 去构建静态的网站已经变得越来越流行，如果还不了解怎么入门，可以阅读我之前的一篇文章[「使用Hexo + Next搭建静态博客」](http://www.jianshu.com/p/f66103553c45)。当然构建博客的方法不是只有一种，你也可以尝试其他方法，而本文主要是针对 **Hexo** 去叙述的。\n\n可能看过[「使用Hexo + Next搭建静态博客」](http://www.jianshu.com/p/f66103553c45)这篇文章的同学都已经构建好了属于自己的博客了，那么接下来要说的就是关于 [NexT 主题](http://theme-next.iissnan.com/)中遇到的一些问题和提示。\n\n# 关于 RSS\n很多同学在看到别人的博客时，都会发现有订阅的功能（即 RSS），但无奈官方介绍比较少，所以无从下手。\n\n那么下面将教大家如何去做：\n\n1. 准备\n你需要安装一个 **Hexo 插件**：\n```\n$ npm install --save hexo-generator-feed\n```\n\n2. 配置\n接下来需要在 `_config.yml` 中配置一下，在 root 目录下的 `_config.yml` 中添加：\n```\n# Extensions\n## Plugins: http://hexo.io/plugins/\nplugins:\n  hexo-generate-feed\n```\n然后在主题文件夹的 `_config.yml` 中配置：\n```\n# Set rss to false to disable feed link.\n# Leave rss as empty to use site's feed link.\n# Set rss to specific value if you have burned your feed already.\nrss: /atom.xml\n```\n\n<!-- more -->\n\n3. 生成 RSS Feed\n配置完之后在 CLI 中运行：\n```\n$ hexo g\n```\n重新生成一次，你会在 `./public` 文件夹中看到 `atom.xml` 文件。然后启动服务器查看是否有效，之后再部署到 `Github` 中。\n\n最后你可以看到：\n![效果](/blog/images/article_img/19-1.png)\n\n# 修改文件后不生效\n> 有时候会发现，明明修改了文件的代码，然而没有生效。\n\n其实不是没有生效，而是静态文件没有更新，此时你需要执行：\n```\n$ hexo clean\n```\n然后执行：\n```\n$hexo g\n```\n重新生成一次即可。\n\n# 社交链接图标\n说明一下，这些图标都是出自 [`FontAwesome - 4.4.0`](https://fortawesome.github.io/Font-Awesome/)，所以你可以根据自己的需求去修改图标。\n\n实际效果：\n![效果](/blog/images/article_img/19-2.png)\n\n有的同学会发现自己的图标是个地球：\n![效果](/blog/images/article_img/19-3.png)\n\n需要配置的是主题文件夹下的 `_config.yml`，**注意：命名需要一致，包括大小写**：\n```\n# Social links\nsocial:\n  GitHub: https://github.com/XXX\n  Twitter: https://twitter.com/XXX\n  Weibo: http://weibo.com/XXX\n  Facebook: https://www.facebook.com/XXX\n  JianShu: http://www.jianshu.com/XXX\n\n# Social Icons\nsocial_icons:\n  enable: true\n  # Icon Mappings\n  GitHub: github\n  Twitter: twitter\n  Weibo: weibo\n  Facebook: facebook-square\n  JianShu: heartbeat\n```\n\n# 阅读次数\n简单介绍一下此功能的做法。\n\n1. 准备\n需要在 [LeanCloud](https://leancloud.cn) 申请一个帐号，进行一番配置后拿到 AppID 和 AppKey。\n\n2. 配置\n然后在主题文件夹下的 `_config.yml` 中配置：\n```\n# Show number of visitors to each article.\n# You can visit https://leancloud.cn get AppID and AppKey.\nleancloud_visitors:\n  enable: true\n  app_id: XXX\n  app_key: XXX\n```\n\n具体可以阅读[这篇文章](http://notes.xiamo.tk/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html)，里面的介绍非常详细！\n\n# 最后\n> 文章将持续更新，有任何疑问和建议可以在下面评论。\n","slug":"article-19","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7emt000qwnprhqokbb3u","content":"<blockquote>\n<p>利用 <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github</a> 所提供的 <strong>Github Page</strong> 去构建静态的网站已经变得越来越流行，如果还不了解怎么入门，可以阅读我之前的一篇文章<a href=\"http://www.jianshu.com/p/f66103553c45\" target=\"_blank\" rel=\"external\">「使用Hexo + Next搭建静态博客」</a>。当然构建博客的方法不是只有一种，你也可以尝试其他方法，而本文主要是针对 <strong>Hexo</strong> 去叙述的。</p>\n</blockquote>\n<p>可能看过<a href=\"http://www.jianshu.com/p/f66103553c45\" target=\"_blank\" rel=\"external\">「使用Hexo + Next搭建静态博客」</a>这篇文章的同学都已经构建好了属于自己的博客了，那么接下来要说的就是关于 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">NexT 主题</a>中遇到的一些问题和提示。</p>\n<h1 id=\"关于-RSS\"><a href=\"#关于-RSS\" class=\"headerlink\" title=\"关于 RSS\"></a>关于 RSS</h1><p>很多同学在看到别人的博客时，都会发现有订阅的功能（即 RSS），但无奈官方介绍比较少，所以无从下手。</p>\n<p>那么下面将教大家如何去做：</p>\n<ol>\n<li><p>准备<br>你需要安装一个 <strong>Hexo 插件</strong>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> <span class=\"comment\">--save hexo-generator-feed</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置<br>接下来需要在 <code>_config.yml</code> 中配置一下，在 root 目录下的 <code>_config.yml</code> 中添加：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: http:<span class=\"comment\">//hexo.io/plugins/</span></span><br><span class=\"line\">plugins:</span><br><span class=\"line\">  hexo-<span class=\"keyword\">generate</span>-feed</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后在主题文件夹的 <code>_config.yml</code> 中配置：<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"keyword\">Set</span> rss <span class=\"keyword\">to</span> <span class=\"literal\">false</span> <span class=\"keyword\">to</span> disable feed link.</span><br><span class=\"line\"># Leave rss as <span class=\"literal\">empty</span> <span class=\"keyword\">to</span> use site<span class=\"comment\">'s feed link.</span></span><br><span class=\"line\"># <span class=\"keyword\">Set</span> rss <span class=\"keyword\">to</span> specific value <span class=\"keyword\">if</span> you have burned your feed already.</span><br><span class=\"line\">rss: /atom.xml</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<ol>\n<li>生成 RSS Feed<br>配置完之后在 CLI 中运行：<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo g</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重新生成一次，你会在 <code>./public</code> 文件夹中看到 <code>atom.xml</code> 文件。然后启动服务器查看是否有效，之后再部署到 <code>Github</code> 中。</p>\n<p>最后你可以看到：<br><img src=\"/blog/images/article_img/19-1.png\" alt=\"效果\"></p>\n<h1 id=\"修改文件后不生效\"><a href=\"#修改文件后不生效\" class=\"headerlink\" title=\"修改文件后不生效\"></a>修改文件后不生效</h1><blockquote>\n<p>有时候会发现，明明修改了文件的代码，然而没有生效。</p>\n</blockquote>\n<p>其实不是没有生效，而是静态文件没有更新，此时你需要执行：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo clean</span><br></pre></td></tr></table></figure></p>\n<p>然后执行：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hexo</span> g</span></span><br></pre></td></tr></table></figure></p>\n<p>重新生成一次即可。</p>\n<h1 id=\"社交链接图标\"><a href=\"#社交链接图标\" class=\"headerlink\" title=\"社交链接图标\"></a>社交链接图标</h1><p>说明一下，这些图标都是出自 <a href=\"https://fortawesome.github.io/Font-Awesome/\" target=\"_blank\" rel=\"external\"><code>FontAwesome - 4.4.0</code></a>，所以你可以根据自己的需求去修改图标。</p>\n<p>实际效果：<br><img src=\"/blog/images/article_img/19-2.png\" alt=\"效果\"></p>\n<p>有的同学会发现自己的图标是个地球：<br><img src=\"/blog/images/article_img/19-3.png\" alt=\"效果\"></p>\n<p>需要配置的是主题文件夹下的 <code>_config.yml</code>，<strong>注意：命名需要一致，包括大小写</strong>：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># Social links</span></span><br><span class=\"line\"><span class=\"symbol\">social:</span></span><br><span class=\"line\"><span class=\"symbol\">  GitHub:</span> https:<span class=\"comment\">//github.com/XXX</span></span><br><span class=\"line\"><span class=\"symbol\">  Twitter:</span> https:<span class=\"comment\">//twitter.com/XXX</span></span><br><span class=\"line\"><span class=\"symbol\">  Weibo:</span> http:<span class=\"comment\">//weibo.com/XXX</span></span><br><span class=\"line\"><span class=\"symbol\">  Facebook:</span> https:<span class=\"comment\">//www.facebook.com/XXX</span></span><br><span class=\"line\"><span class=\"symbol\">  JianShu:</span> http:<span class=\"comment\">//www.jianshu.com/XXX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># Social Icons</span></span><br><span class=\"line\"><span class=\"symbol\">social_icons:</span></span><br><span class=\"line\"><span class=\"symbol\">  enable:</span> true</span><br><span class=\"line\">  <span class=\"meta\"># Icon Mappings</span></span><br><span class=\"line\"><span class=\"symbol\">  GitHub:</span> github</span><br><span class=\"line\"><span class=\"symbol\">  Twitter:</span> twitter</span><br><span class=\"line\"><span class=\"symbol\">  Weibo:</span> weibo</span><br><span class=\"line\"><span class=\"symbol\">  Facebook:</span> facebook-square</span><br><span class=\"line\"><span class=\"symbol\">  JianShu:</span> heartbeat</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"阅读次数\"><a href=\"#阅读次数\" class=\"headerlink\" title=\"阅读次数\"></a>阅读次数</h1><p>简单介绍一下此功能的做法。</p>\n<ol>\n<li><p>准备<br>需要在 <a href=\"https://leancloud.cn\" target=\"_blank\" rel=\"external\">LeanCloud</a> 申请一个帐号，进行一番配置后拿到 AppID 和 AppKey。</p>\n</li>\n<li><p>配置<br>然后在主题文件夹下的 <code>_config.yml</code> 中配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Show number of visitors to each article.</span></span><br><span class=\"line\"><span class=\"comment\"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class=\"line\"><span class=\"attr\">leancloud_visitors:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  app_id:</span> XXX</span><br><span class=\"line\"><span class=\"attr\">  app_key:</span> XXX</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>具体可以阅读<a href=\"http://notes.xiamo.tk/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html\" target=\"_blank\" rel=\"external\">这篇文章</a>，里面的介绍非常详细！</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><blockquote>\n<p>文章将持续更新，有任何疑问和建议可以在下面评论。</p>\n</blockquote>\n","excerpt":"<blockquote>\n<p>利用 <a href=\"https://github.com/\">Github</a> 所提供的 <strong>Github Page</strong> 去构建静态的网站已经变得越来越流行，如果还不了解怎么入门，可以阅读我之前的一篇文章<a href=\"http://www.jianshu.com/p/f66103553c45\">「使用Hexo + Next搭建静态博客」</a>。当然构建博客的方法不是只有一种，你也可以尝试其他方法，而本文主要是针对 <strong>Hexo</strong> 去叙述的。</p>\n</blockquote>\n<p>可能看过<a href=\"http://www.jianshu.com/p/f66103553c45\">「使用Hexo + Next搭建静态博客」</a>这篇文章的同学都已经构建好了属于自己的博客了，那么接下来要说的就是关于 <a href=\"http://theme-next.iissnan.com/\">NexT 主题</a>中遇到的一些问题和提示。</p>\n<h1 id=\"关于-RSS\"><a href=\"#关于-RSS\" class=\"headerlink\" title=\"关于 RSS\"></a>关于 RSS</h1><p>很多同学在看到别人的博客时，都会发现有订阅的功能（即 RSS），但无奈官方介绍比较少，所以无从下手。</p>\n<p>那么下面将教大家如何去做：</p>\n<ol>\n<li><p>准备<br>你需要安装一个 <strong>Hexo 插件</strong>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> <span class=\"comment\">--save hexo-generator-feed</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置<br>接下来需要在 <code>_config.yml</code> 中配置一下，在 root 目录下的 <code>_config.yml</code> 中添加：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: http:<span class=\"comment\">//hexo.io/plugins/</span></span><br><span class=\"line\">plugins:</span><br><span class=\"line\">  hexo-<span class=\"keyword\">generate</span>-feed</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后在主题文件夹的 <code>_config.yml</code> 中配置：<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"keyword\">Set</span> rss <span class=\"keyword\">to</span> <span class=\"literal\">false</span> <span class=\"keyword\">to</span> disable feed link.</span><br><span class=\"line\"># Leave rss as <span class=\"literal\">empty</span> <span class=\"keyword\">to</span> use site<span class=\"comment\">'s feed link.</span></span><br><span class=\"line\"># <span class=\"keyword\">Set</span> rss <span class=\"keyword\">to</span> specific value <span class=\"keyword\">if</span> you have burned your feed already.</span><br><span class=\"line\">rss: /atom.xml</span><br></pre></td></tr></table></figure></p>","more":"<ol>\n<li>生成 RSS Feed<br>配置完之后在 CLI 中运行：<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo g</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重新生成一次，你会在 <code>./public</code> 文件夹中看到 <code>atom.xml</code> 文件。然后启动服务器查看是否有效，之后再部署到 <code>Github</code> 中。</p>\n<p>最后你可以看到：<br><img src=\"/blog/images/article_img/19-1.png\" alt=\"效果\"></p>\n<h1 id=\"修改文件后不生效\"><a href=\"#修改文件后不生效\" class=\"headerlink\" title=\"修改文件后不生效\"></a>修改文件后不生效</h1><blockquote>\n<p>有时候会发现，明明修改了文件的代码，然而没有生效。</p>\n</blockquote>\n<p>其实不是没有生效，而是静态文件没有更新，此时你需要执行：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo clean</span><br></pre></td></tr></table></figure></p>\n<p>然后执行：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hexo</span> g</span></span><br></pre></td></tr></table></figure></p>\n<p>重新生成一次即可。</p>\n<h1 id=\"社交链接图标\"><a href=\"#社交链接图标\" class=\"headerlink\" title=\"社交链接图标\"></a>社交链接图标</h1><p>说明一下，这些图标都是出自 <a href=\"https://fortawesome.github.io/Font-Awesome/\"><code>FontAwesome - 4.4.0</code></a>，所以你可以根据自己的需求去修改图标。</p>\n<p>实际效果：<br><img src=\"/blog/images/article_img/19-2.png\" alt=\"效果\"></p>\n<p>有的同学会发现自己的图标是个地球：<br><img src=\"/blog/images/article_img/19-3.png\" alt=\"效果\"></p>\n<p>需要配置的是主题文件夹下的 <code>_config.yml</code>，<strong>注意：命名需要一致，包括大小写</strong>：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># Social links</span></span><br><span class=\"line\"><span class=\"symbol\">social:</span></span><br><span class=\"line\"><span class=\"symbol\">  GitHub:</span> https:<span class=\"comment\">//github.com/XXX</span></span><br><span class=\"line\"><span class=\"symbol\">  Twitter:</span> https:<span class=\"comment\">//twitter.com/XXX</span></span><br><span class=\"line\"><span class=\"symbol\">  Weibo:</span> http:<span class=\"comment\">//weibo.com/XXX</span></span><br><span class=\"line\"><span class=\"symbol\">  Facebook:</span> https:<span class=\"comment\">//www.facebook.com/XXX</span></span><br><span class=\"line\"><span class=\"symbol\">  JianShu:</span> http:<span class=\"comment\">//www.jianshu.com/XXX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># Social Icons</span></span><br><span class=\"line\"><span class=\"symbol\">social_icons:</span></span><br><span class=\"line\"><span class=\"symbol\">  enable:</span> true</span><br><span class=\"line\">  <span class=\"meta\"># Icon Mappings</span></span><br><span class=\"line\"><span class=\"symbol\">  GitHub:</span> github</span><br><span class=\"line\"><span class=\"symbol\">  Twitter:</span> twitter</span><br><span class=\"line\"><span class=\"symbol\">  Weibo:</span> weibo</span><br><span class=\"line\"><span class=\"symbol\">  Facebook:</span> facebook-square</span><br><span class=\"line\"><span class=\"symbol\">  JianShu:</span> heartbeat</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"阅读次数\"><a href=\"#阅读次数\" class=\"headerlink\" title=\"阅读次数\"></a>阅读次数</h1><p>简单介绍一下此功能的做法。</p>\n<ol>\n<li><p>准备<br>需要在 <a href=\"https://leancloud.cn\">LeanCloud</a> 申请一个帐号，进行一番配置后拿到 AppID 和 AppKey。</p>\n</li>\n<li><p>配置<br>然后在主题文件夹下的 <code>_config.yml</code> 中配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Show number of visitors to each article.</span></span><br><span class=\"line\"><span class=\"comment\"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class=\"line\"><span class=\"attr\">leancloud_visitors:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  app_id:</span> XXX</span><br><span class=\"line\"><span class=\"attr\">  app_key:</span> XXX</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>具体可以阅读<a href=\"http://notes.xiamo.tk/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html\">这篇文章</a>，里面的介绍非常详细！</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><blockquote>\n<p>文章将持续更新，有任何疑问和建议可以在下面评论。</p>\n</blockquote>","sticky":0},{"title":"生成SSH keys","date":"2015-09-07T07:04:33.000Z","_content":"首先确认自己的系统中是否已经拥有密钥。在默认情况下SSH的密钥存储在其`~/.ssh`目录下。可以使用以下命令进入目录并列出内容：\n```\n$ cd ~/.ssh\n$ ls\n\nid_rsa  id_rsa.pub  known_hosts\n```\n\n其中`id_rsa`和`id_rsa.pub`就是存储密钥的文件，带有`.pub`后缀的是公钥，另外一个则是私钥。如果存在这些文件，则可以直接用`$ cat id_rsa.pub`来读取密钥内容。\n如果找不到这样的文件（或者不存在`~/.ssh`目录），则可以通过`$ ssh-keygen`来创建它们。\n```\n$ ssh-keygen -t rsa -C `you@email.com`\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/schacon/.ssh/id_rsa):\nCreated directory '/home/schacon/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/schacon/.ssh/id_rsa.\nYour public key has been saved in /home/schacon/.ssh/id_rsa.pub.\nThe key fingerprint is:\nd0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 you@email.com\n```\n\n<!-- more -->\n\n首先 `$ ssh-keygen`会确认密钥的存储位置（默认是` .ssh/id_rsa`），然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可（为了方便以后操作，建议不设置密码）。\n\n在完成上述操作之后即可获得SSH key，获得的公钥大概是这样的：\n```\n$ cat id_rsa.pub\n\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAmzM2RosSFanpxK+d3Eagt3Wicef9QbgH1x4yH3MFg2\n+6vIuFXchl+L3gMZabWH3BzKpBwoJICg8q9k4N8nOf5LNPtIp74hnEj/1b9Nh7OLrri82Ao6FYEdkC\n0NVsfhKlqha10MQrYxctimabtuKZdoUvv0knSawwvql2mvCIDra2D2350ICycZi0Fg1QULF3QdDF8E\nmtnvso1a5a9jgzf3tyHX6+r7lGnA+Ifzr8bxC4sqZ+aN0R7dn4uqQETF7l+n16dd370Efvbvj8CabZ\nqVs7r5j/fdltcmSrH3i97Yfq0XsM0CIxltOIb8+MhkRzHAXdjWY51LyfyHtyysbgHw==\nyou@email.com\n```\n\n关于在多种操作系统中生成 SSH 密钥的更深入教程，请参阅 GitHub 的 SSH 密钥指南：[*https://help.github.com/articles/generating-ssh-keys*](https://help.github.com/articles/generating-ssh-keys)","source":"_posts/article-2.md","raw":"title: 生成SSH keys\ndate: 2015.09.07 15:04:33\ncategories:\n\t- 笔记随笔\ntags:\n\t- SSH\n\t- git\n\t- 加密\n---\n首先确认自己的系统中是否已经拥有密钥。在默认情况下SSH的密钥存储在其`~/.ssh`目录下。可以使用以下命令进入目录并列出内容：\n```\n$ cd ~/.ssh\n$ ls\n\nid_rsa  id_rsa.pub  known_hosts\n```\n\n其中`id_rsa`和`id_rsa.pub`就是存储密钥的文件，带有`.pub`后缀的是公钥，另外一个则是私钥。如果存在这些文件，则可以直接用`$ cat id_rsa.pub`来读取密钥内容。\n如果找不到这样的文件（或者不存在`~/.ssh`目录），则可以通过`$ ssh-keygen`来创建它们。\n```\n$ ssh-keygen -t rsa -C `you@email.com`\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/schacon/.ssh/id_rsa):\nCreated directory '/home/schacon/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/schacon/.ssh/id_rsa.\nYour public key has been saved in /home/schacon/.ssh/id_rsa.pub.\nThe key fingerprint is:\nd0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 you@email.com\n```\n\n<!-- more -->\n\n首先 `$ ssh-keygen`会确认密钥的存储位置（默认是` .ssh/id_rsa`），然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可（为了方便以后操作，建议不设置密码）。\n\n在完成上述操作之后即可获得SSH key，获得的公钥大概是这样的：\n```\n$ cat id_rsa.pub\n\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAmzM2RosSFanpxK+d3Eagt3Wicef9QbgH1x4yH3MFg2\n+6vIuFXchl+L3gMZabWH3BzKpBwoJICg8q9k4N8nOf5LNPtIp74hnEj/1b9Nh7OLrri82Ao6FYEdkC\n0NVsfhKlqha10MQrYxctimabtuKZdoUvv0knSawwvql2mvCIDra2D2350ICycZi0Fg1QULF3QdDF8E\nmtnvso1a5a9jgzf3tyHX6+r7lGnA+Ifzr8bxC4sqZ+aN0R7dn4uqQETF7l+n16dd370Efvbvj8CabZ\nqVs7r5j/fdltcmSrH3i97Yfq0XsM0CIxltOIb8+MhkRzHAXdjWY51LyfyHtyysbgHw==\nyou@email.com\n```\n\n关于在多种操作系统中生成 SSH 密钥的更深入教程，请参阅 GitHub 的 SSH 密钥指南：[*https://help.github.com/articles/generating-ssh-keys*](https://help.github.com/articles/generating-ssh-keys)","slug":"article-2","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7emw000uwnprubo9g12y","content":"<p>首先确认自己的系统中是否已经拥有密钥。在默认情况下SSH的密钥存储在其<code>~/.ssh</code>目录下。可以使用以下命令进入目录并列出内容：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~/<span class=\"selector-class\">.ssh</span></span><br><span class=\"line\">$ ls</span><br><span class=\"line\"></span><br><span class=\"line\">id_rsa  id_rsa<span class=\"selector-class\">.pub</span>  known_hosts</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>id_rsa</code>和<code>id_rsa.pub</code>就是存储密钥的文件，带有<code>.pub</code>后缀的是公钥，另外一个则是私钥。如果存在这些文件，则可以直接用<code>$ cat id_rsa.pub</code>来读取密钥内容。<br>如果找不到这样的文件（或者不存在<code>~/.ssh</code>目录），则可以通过<code>$ ssh-keygen</code>来创建它们。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C `you<span class=\"meta\">@email</span>.com`</span><br><span class=\"line\"></span><br><span class=\"line\">Generating <span class=\"keyword\">public</span>/<span class=\"keyword\">private</span> rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> which to save the key (<span class=\"regexp\">/home/</span>schacon<span class=\"regexp\">/.ssh/</span>id_rsa):</span><br><span class=\"line\">Created directory <span class=\"string\">'/home/schacon/.ssh'</span>.</span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):</span><br><span class=\"line\">Enter same passphrase <span class=\"string\">again:</span></span><br><span class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> <span class=\"regexp\">/home/</span>schacon<span class=\"regexp\">/.ssh/</span>id_rsa.</span><br><span class=\"line\">Your <span class=\"keyword\">public</span> key has been saved <span class=\"keyword\">in</span> <span class=\"regexp\">/home/</span>schacon<span class=\"regexp\">/.ssh/</span>id_rsa.pub.</span><br><span class=\"line\">The key fingerprint <span class=\"string\">is:</span></span><br><span class=\"line\"><span class=\"string\">d0:</span><span class=\"number\">82</span>:<span class=\"number\">24</span>:<span class=\"number\">8</span><span class=\"string\">e:</span><span class=\"string\">d7:</span><span class=\"string\">f1:</span><span class=\"string\">bb:</span><span class=\"number\">9</span><span class=\"string\">b:</span><span class=\"number\">33</span>:<span class=\"number\">53</span>:<span class=\"number\">96</span>:<span class=\"number\">93</span>:<span class=\"number\">49</span>:<span class=\"string\">da:</span><span class=\"number\">9</span><span class=\"string\">b:</span>e3 you<span class=\"meta\">@email</span>.com</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>首先 <code>$ ssh-keygen</code>会确认密钥的存储位置（默认是<code>.ssh/id_rsa</code>），然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可（为了方便以后操作，建议不设置密码）。</p>\n<p>在完成上述操作之后即可获得SSH key，获得的公钥大概是这样的：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAmzM2RosSFanpxK+d3Eagt3Wicef9Q<span class=\"built_in\">bg</span>H1x4yH3MFg2</span><br><span class=\"line\">+6vIuFXchl+L3gMZabWH3BzKpBwoJICg8q9k4N8nOf5LNPtIp74hnEj/1b9Nh7OLrri82Ao6FYEdkC</span><br><span class=\"line\">0NVsfhKlqha10MQrYxctimabtuKZ<span class=\"keyword\">do</span>Uvv0knSawwvql2mvCIDra2D2350ICycZi0Fg1QULF3QdDF8E</span><br><span class=\"line\">mtnvso1a5a9jgzf3tyHX6+r7lGnA+Ifzr8bxC4sqZ+aN0R7dn4uqQETF7l+n16dd370Efvbvj8CabZ</span><br><span class=\"line\">qVs7r5j/fdltcmSrH3i97Yfq0XsM0CIxltOIb8+MhkRzHAXdjWY51LyfyHtyysbgHw==</span><br><span class=\"line\">you@email.com</span><br></pre></td></tr></table></figure></p>\n<p>关于在多种操作系统中生成 SSH 密钥的更深入教程，请参阅 GitHub 的 SSH 密钥指南：<a href=\"https://help.github.com/articles/generating-ssh-keys\" target=\"_blank\" rel=\"external\"><em>https://help.github.com/articles/generating-ssh-keys</em></a></p>\n","excerpt":"<p>首先确认自己的系统中是否已经拥有密钥。在默认情况下SSH的密钥存储在其<code>~/.ssh</code>目录下。可以使用以下命令进入目录并列出内容：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~/<span class=\"selector-class\">.ssh</span></span><br><span class=\"line\">$ ls</span><br><span class=\"line\"></span><br><span class=\"line\">id_rsa  id_rsa<span class=\"selector-class\">.pub</span>  known_hosts</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>id_rsa</code>和<code>id_rsa.pub</code>就是存储密钥的文件，带有<code>.pub</code>后缀的是公钥，另外一个则是私钥。如果存在这些文件，则可以直接用<code>$ cat id_rsa.pub</code>来读取密钥内容。<br>如果找不到这样的文件（或者不存在<code>~/.ssh</code>目录），则可以通过<code>$ ssh-keygen</code>来创建它们。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C `you<span class=\"meta\">@email</span>.com`</span><br><span class=\"line\"></span><br><span class=\"line\">Generating <span class=\"keyword\">public</span>/<span class=\"keyword\">private</span> rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> which to save the key (<span class=\"regexp\">/home/</span>schacon<span class=\"regexp\">/.ssh/</span>id_rsa):</span><br><span class=\"line\">Created directory <span class=\"string\">'/home/schacon/.ssh'</span>.</span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):</span><br><span class=\"line\">Enter same passphrase <span class=\"string\">again:</span></span><br><span class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> <span class=\"regexp\">/home/</span>schacon<span class=\"regexp\">/.ssh/</span>id_rsa.</span><br><span class=\"line\">Your <span class=\"keyword\">public</span> key has been saved <span class=\"keyword\">in</span> <span class=\"regexp\">/home/</span>schacon<span class=\"regexp\">/.ssh/</span>id_rsa.pub.</span><br><span class=\"line\">The key fingerprint <span class=\"string\">is:</span></span><br><span class=\"line\"><span class=\"string\">d0:</span><span class=\"number\">82</span>:<span class=\"number\">24</span>:<span class=\"number\">8</span><span class=\"string\">e:</span><span class=\"string\">d7:</span><span class=\"string\">f1:</span><span class=\"string\">bb:</span><span class=\"number\">9</span><span class=\"string\">b:</span><span class=\"number\">33</span>:<span class=\"number\">53</span>:<span class=\"number\">96</span>:<span class=\"number\">93</span>:<span class=\"number\">49</span>:<span class=\"string\">da:</span><span class=\"number\">9</span><span class=\"string\">b:</span>e3 you<span class=\"meta\">@email</span>.com</span><br></pre></td></tr></table></figure></p>","more":"<p>首先 <code>$ ssh-keygen</code>会确认密钥的存储位置（默认是<code>.ssh/id_rsa</code>），然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可（为了方便以后操作，建议不设置密码）。</p>\n<p>在完成上述操作之后即可获得SSH key，获得的公钥大概是这样的：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAmzM2RosSFanpxK+d3Eagt3Wicef9Q<span class=\"built_in\">bg</span>H1x4yH3MFg2</span><br><span class=\"line\">+6vIuFXchl+L3gMZabWH3BzKpBwoJICg8q9k4N8nOf5LNPtIp74hnEj/1b9Nh7OLrri82Ao6FYEdkC</span><br><span class=\"line\">0NVsfhKlqha10MQrYxctimabtuKZ<span class=\"keyword\">do</span>Uvv0knSawwvql2mvCIDra2D2350ICycZi0Fg1QULF3QdDF8E</span><br><span class=\"line\">mtnvso1a5a9jgzf3tyHX6+r7lGnA+Ifzr8bxC4sqZ+aN0R7dn4uqQETF7l+n16dd370Efvbvj8CabZ</span><br><span class=\"line\">qVs7r5j/fdltcmSrH3i97Yfq0XsM0CIxltOIb8+MhkRzHAXdjWY51LyfyHtyysbgHw==</span><br><span class=\"line\">you@email.com</span><br></pre></td></tr></table></figure></p>\n<p>关于在多种操作系统中生成 SSH 密钥的更深入教程，请参阅 GitHub 的 SSH 密钥指南：<a href=\"https://help.github.com/articles/generating-ssh-keys\"><em>https://help.github.com/articles/generating-ssh-keys</em></a></p>","sticky":0},{"title":"实用的 CSS — 贝塞尔曲线(cubic-bezier)","date":"2016-03-16T02:39:07.000Z","_content":"\n# 前言\n\n在了解 `cubic-bezier` 之前，你需要对 CSS3 中的动画效果有所认识，它是 `animation-timing-function` 和 `transition-timing-function` 中一个重要的内容。\n\n# 本体\n\n## 简介\n\n`cubic-bezier` 又称**三次贝塞尔**，主要是为 `animation` 生成速度曲线的函数，规定是 `cubic-bezier(<x1>, <y1>, <x2>, <y2>)`。\n\n我们可以从下图中简要理解一下 `cubic-bezier`：\n![cubic-bezier](/blog/images/article_img/cubic-bezier-01.png)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-02.jpg)\n\n从上图我们需要知道的是 `cubic-bezier` 的取值范围:\n * P0：默认值 (0, 0)\n * **P1：动态取值 (x1, y1)**\n * **P2：动态取值 (x2, y2)**\n * P3：默认值 (1, 1)\n\n<!-- more -->\n\n我们需要关注的是 P1 和 P2 两点的取值，而其中 **`X 轴`**的取值范围是 **0** 到 **1**，当取值超出范围时 `cubic-bezier` 将失效；`Y 轴`的取值没有规定，当然也毋须过大。\n\n最直接的理解是，将**以一条直线放在范围只有 1 的坐标轴中，并从中间拿出两个点来拉扯（X 轴的取值区间是 [0, 1]，Y 轴任意），最后形成的曲线就是动画的速度曲线**。\n\n## 使用\n\n在测试例子中：\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n\n  <style>\n    .animation {\n      width: 50px;\n      height: 50px;\n      background-color: #ed3;\n      -webkit-transition:  all 2s;\n           -o-transition:  all 2s;\n              transition:  all 2s;\n    }\n    .animation:hover {\n      -webkit-transform:  translateX(100px);\n          -ms-transform:  translateX(100px);\n           -o-transform:  translateX(100px);\n              transform:  translateX(100px);\n    }\n  </style>\n</head>\n<body>\n  <div class=\"animation\"></div>\n</body>\n</html>\n```\n\n我们可以在浏览器中看到，当鼠标移到元素上时，元素开始向右移动，开始比较慢，之后则比较快，移开时按原曲线回到原点。\n\n在例子中，当我们不为 `transition` 添加 `cubic-bezier` 或是其他 `timing-function` 时，默认的速度曲线是 `ease`，此时的速度曲线是：\n![cubic-bezier](/blog/images/article_img/cubic-bezier-03.png)\n\n那么让我们在代码中加入 `cubic-bezier(.17, .86, .73, .14)`：\n```css\n...\n.animation {\n  ...\n  -webkit-transition:  all 2s cubic-bezier(.17, .86, .73, .14);\n       -o-transition:  all 2s cubic-bezier(.17, .86, .73, .14);\n          transition:  all 2s cubic-bezier(.17, .86, .73, .14);\n}\n...\n```\n\n再刷新页面观察效果，会看到动画在执行过程中有一段很缓慢的移动，前后的速度相似，此时的运动曲线是：\n![cubic-bezier](/blog/images/article_img/cubic-bezier-04.png)\n\n## 几个常用的固定值对应的 `cubic-bezier` 值以及速度曲线\n\n1. `ease`：cubic-bezier(.25, .1, .25, 1)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-03.png)\n\n2. `liner`：cubic-bezier(0, 0, 1, 1) / cubic-bezier(1, 1, 0, 0)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-05.png)\n\n3. `ease-in`：cubic-bezier(.42, 0, 1, 1)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-06.png)\n\n4. `ease-out`：cubic-bezier(0, 0, .58, 1)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-07.png)\n\n5. `ease-in-out`：cubic-bezier(.42, 0, .58, 1)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-08.png)\n\n6. In Out . Back（来回的缓冲效果）：cubic-bezier(0.68, -0.55, 0.27, 1.55)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-09.png)\n\n# 效果参考\n\n文章所提到的动画效果可以在下面站点中看到，当然你也可以大胆尝试：\n * [英文版在线预览（Lea Verou）](http://cubic-bezier.com/#.17,.67,.83,.67)\n * [中文版在线预览（更多效果）](http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67)\n * [在线生成系列](http://xuanfengge.com/easeing/ceaser/)\n * [作者的《Loading》库](https://github.com/jovey-zheng/loader)\n\n# 参考\n\n[MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function)\n[W3School](http://www.w3school.com.cn/cssref/pr_animation-timing-function.asp)\n","source":"_posts/article-20.md","raw":"title: 实用的 CSS — 贝塞尔曲线(cubic-bezier)\ndate: 2016-03-16 10:39:07\ncategories:\n  - 笔记随笔\ntags:\n  - css\n  - cubic-bezier\n  - animation\n---\n\n# 前言\n\n在了解 `cubic-bezier` 之前，你需要对 CSS3 中的动画效果有所认识，它是 `animation-timing-function` 和 `transition-timing-function` 中一个重要的内容。\n\n# 本体\n\n## 简介\n\n`cubic-bezier` 又称**三次贝塞尔**，主要是为 `animation` 生成速度曲线的函数，规定是 `cubic-bezier(<x1>, <y1>, <x2>, <y2>)`。\n\n我们可以从下图中简要理解一下 `cubic-bezier`：\n![cubic-bezier](/blog/images/article_img/cubic-bezier-01.png)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-02.jpg)\n\n从上图我们需要知道的是 `cubic-bezier` 的取值范围:\n * P0：默认值 (0, 0)\n * **P1：动态取值 (x1, y1)**\n * **P2：动态取值 (x2, y2)**\n * P3：默认值 (1, 1)\n\n<!-- more -->\n\n我们需要关注的是 P1 和 P2 两点的取值，而其中 **`X 轴`**的取值范围是 **0** 到 **1**，当取值超出范围时 `cubic-bezier` 将失效；`Y 轴`的取值没有规定，当然也毋须过大。\n\n最直接的理解是，将**以一条直线放在范围只有 1 的坐标轴中，并从中间拿出两个点来拉扯（X 轴的取值区间是 [0, 1]，Y 轴任意），最后形成的曲线就是动画的速度曲线**。\n\n## 使用\n\n在测试例子中：\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n\n  <style>\n    .animation {\n      width: 50px;\n      height: 50px;\n      background-color: #ed3;\n      -webkit-transition:  all 2s;\n           -o-transition:  all 2s;\n              transition:  all 2s;\n    }\n    .animation:hover {\n      -webkit-transform:  translateX(100px);\n          -ms-transform:  translateX(100px);\n           -o-transform:  translateX(100px);\n              transform:  translateX(100px);\n    }\n  </style>\n</head>\n<body>\n  <div class=\"animation\"></div>\n</body>\n</html>\n```\n\n我们可以在浏览器中看到，当鼠标移到元素上时，元素开始向右移动，开始比较慢，之后则比较快，移开时按原曲线回到原点。\n\n在例子中，当我们不为 `transition` 添加 `cubic-bezier` 或是其他 `timing-function` 时，默认的速度曲线是 `ease`，此时的速度曲线是：\n![cubic-bezier](/blog/images/article_img/cubic-bezier-03.png)\n\n那么让我们在代码中加入 `cubic-bezier(.17, .86, .73, .14)`：\n```css\n...\n.animation {\n  ...\n  -webkit-transition:  all 2s cubic-bezier(.17, .86, .73, .14);\n       -o-transition:  all 2s cubic-bezier(.17, .86, .73, .14);\n          transition:  all 2s cubic-bezier(.17, .86, .73, .14);\n}\n...\n```\n\n再刷新页面观察效果，会看到动画在执行过程中有一段很缓慢的移动，前后的速度相似，此时的运动曲线是：\n![cubic-bezier](/blog/images/article_img/cubic-bezier-04.png)\n\n## 几个常用的固定值对应的 `cubic-bezier` 值以及速度曲线\n\n1. `ease`：cubic-bezier(.25, .1, .25, 1)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-03.png)\n\n2. `liner`：cubic-bezier(0, 0, 1, 1) / cubic-bezier(1, 1, 0, 0)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-05.png)\n\n3. `ease-in`：cubic-bezier(.42, 0, 1, 1)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-06.png)\n\n4. `ease-out`：cubic-bezier(0, 0, .58, 1)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-07.png)\n\n5. `ease-in-out`：cubic-bezier(.42, 0, .58, 1)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-08.png)\n\n6. In Out . Back（来回的缓冲效果）：cubic-bezier(0.68, -0.55, 0.27, 1.55)\n![cubic-bezier](/blog/images/article_img/cubic-bezier-09.png)\n\n# 效果参考\n\n文章所提到的动画效果可以在下面站点中看到，当然你也可以大胆尝试：\n * [英文版在线预览（Lea Verou）](http://cubic-bezier.com/#.17,.67,.83,.67)\n * [中文版在线预览（更多效果）](http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67)\n * [在线生成系列](http://xuanfengge.com/easeing/ceaser/)\n * [作者的《Loading》库](https://github.com/jovey-zheng/loader)\n\n# 参考\n\n[MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function)\n[W3School](http://www.w3school.com.cn/cssref/pr_animation-timing-function.asp)\n","slug":"article-20","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7emx000wwnprda4kmupf","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在了解 <code>cubic-bezier</code> 之前，你需要对 CSS3 中的动画效果有所认识，它是 <code>animation-timing-function</code> 和 <code>transition-timing-function</code> 中一个重要的内容。</p>\n<h1 id=\"本体\"><a href=\"#本体\" class=\"headerlink\" title=\"本体\"></a>本体</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>cubic-bezier</code> 又称<strong>三次贝塞尔</strong>，主要是为 <code>animation</code> 生成速度曲线的函数，规定是 <code>cubic-bezier(&lt;x1&gt;, &lt;y1&gt;, &lt;x2&gt;, &lt;y2&gt;)</code>。</p>\n<p>我们可以从下图中简要理解一下 <code>cubic-bezier</code>：<br><img src=\"/blog/images/article_img/cubic-bezier-01.png\" alt=\"cubic-bezier\"><br><img src=\"/blog/images/article_img/cubic-bezier-02.jpg\" alt=\"cubic-bezier\"></p>\n<p>从上图我们需要知道的是 <code>cubic-bezier</code> 的取值范围:</p>\n<ul>\n<li>P0：默认值 (0, 0)</li>\n<li><strong>P1：动态取值 (x1, y1)</strong></li>\n<li><strong>P2：动态取值 (x2, y2)</strong></li>\n<li>P3：默认值 (1, 1)</li>\n</ul>\n<a id=\"more\"></a>\n<p>我们需要关注的是 P1 和 P2 两点的取值，而其中 <strong><code>X 轴</code></strong>的取值范围是 <strong>0</strong> 到 <strong>1</strong>，当取值超出范围时 <code>cubic-bezier</code> 将失效；<code>Y 轴</code>的取值没有规定，当然也毋须过大。</p>\n<p>最直接的理解是，将<strong>以一条直线放在范围只有 1 的坐标轴中，并从中间拿出两个点来拉扯（X 轴的取值区间是 [0, 1]，Y 轴任意），最后形成的曲线就是动画的速度曲线</strong>。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在测试例子中：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span><br><span class=\"line\">    <span class=\"selector-class\">.animation</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#ed3</span>;</span><br><span class=\"line\">      <span class=\"attribute\">-webkit-transition</span>:  all <span class=\"number\">2s</span>;</span><br><span class=\"line\">           <span class=\"attribute\">-o-transition</span>:  all <span class=\"number\">2s</span>;</span><br><span class=\"line\">              <span class=\"attribute\">transition</span>:  all <span class=\"number\">2s</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.animation</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">-webkit-transform</span>:  <span class=\"built_in\">translateX</span>(100px);</span><br><span class=\"line\">          <span class=\"attribute\">-ms-transform</span>:  <span class=\"built_in\">translateX</span>(100px);</span><br><span class=\"line\">           <span class=\"attribute\">-o-transform</span>:  <span class=\"built_in\">translateX</span>(100px);</span><br><span class=\"line\">              <span class=\"attribute\">transform</span>:  <span class=\"built_in\">translateX</span>(100px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"animation\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们可以在浏览器中看到，当鼠标移到元素上时，元素开始向右移动，开始比较慢，之后则比较快，移开时按原曲线回到原点。</p>\n<p>在例子中，当我们不为 <code>transition</code> 添加 <code>cubic-bezier</code> 或是其他 <code>timing-function</code> 时，默认的速度曲线是 <code>ease</code>，此时的速度曲线是：<br><img src=\"/blog/images/article_img/cubic-bezier-03.png\" alt=\"cubic-bezier\"></p>\n<p>那么让我们在代码中加入 <code>cubic-bezier(.17, .86, .73, .14)</code>：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">.animation &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  -webkit-transition:  all 2s cubic-bezier(.17, .86, .73, .14);</span><br><span class=\"line\">       -o-transition:  all 2s cubic-bezier(.17, .86, .73, .14);</span><br><span class=\"line\">          transition:  all 2s cubic-bezier(.17, .86, .73, .14);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>再刷新页面观察效果，会看到动画在执行过程中有一段很缓慢的移动，前后的速度相似，此时的运动曲线是：<br><img src=\"/blog/images/article_img/cubic-bezier-04.png\" alt=\"cubic-bezier\"></p>\n<h2 id=\"几个常用的固定值对应的-cubic-bezier-值以及速度曲线\"><a href=\"#几个常用的固定值对应的-cubic-bezier-值以及速度曲线\" class=\"headerlink\" title=\"几个常用的固定值对应的 cubic-bezier 值以及速度曲线\"></a>几个常用的固定值对应的 <code>cubic-bezier</code> 值以及速度曲线</h2><ol>\n<li><p><code>ease</code>：cubic-bezier(.25, .1, .25, 1)<br><img src=\"/blog/images/article_img/cubic-bezier-03.png\" alt=\"cubic-bezier\"></p>\n</li>\n<li><p><code>liner</code>：cubic-bezier(0, 0, 1, 1) / cubic-bezier(1, 1, 0, 0)<br><img src=\"/blog/images/article_img/cubic-bezier-05.png\" alt=\"cubic-bezier\"></p>\n</li>\n<li><p><code>ease-in</code>：cubic-bezier(.42, 0, 1, 1)<br><img src=\"/blog/images/article_img/cubic-bezier-06.png\" alt=\"cubic-bezier\"></p>\n</li>\n<li><p><code>ease-out</code>：cubic-bezier(0, 0, .58, 1)<br><img src=\"/blog/images/article_img/cubic-bezier-07.png\" alt=\"cubic-bezier\"></p>\n</li>\n<li><p><code>ease-in-out</code>：cubic-bezier(.42, 0, .58, 1)<br><img src=\"/blog/images/article_img/cubic-bezier-08.png\" alt=\"cubic-bezier\"></p>\n</li>\n<li><p>In Out . Back（来回的缓冲效果）：cubic-bezier(0.68, -0.55, 0.27, 1.55)<br><img src=\"/blog/images/article_img/cubic-bezier-09.png\" alt=\"cubic-bezier\"></p>\n</li>\n</ol>\n<h1 id=\"效果参考\"><a href=\"#效果参考\" class=\"headerlink\" title=\"效果参考\"></a>效果参考</h1><p>文章所提到的动画效果可以在下面站点中看到，当然你也可以大胆尝试：</p>\n<ul>\n<li><a href=\"http://cubic-bezier.com/#.17,.67,.83,.67\" target=\"_blank\" rel=\"external\">英文版在线预览（Lea Verou）</a></li>\n<li><a href=\"http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67\" target=\"_blank\" rel=\"external\">中文版在线预览（更多效果）</a></li>\n<li><a href=\"http://xuanfengge.com/easeing/ceaser/\" target=\"_blank\" rel=\"external\">在线生成系列</a></li>\n<li><a href=\"https://github.com/jovey-zheng/loader\" target=\"_blank\" rel=\"external\">作者的《Loading》库</a></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function\" target=\"_blank\" rel=\"external\">MDN</a><br><a href=\"http://www.w3school.com.cn/cssref/pr_animation-timing-function.asp\" target=\"_blank\" rel=\"external\">W3School</a></p>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在了解 <code>cubic-bezier</code> 之前，你需要对 CSS3 中的动画效果有所认识，它是 <code>animation-timing-function</code> 和 <code>transition-timing-function</code> 中一个重要的内容。</p>\n<h1 id=\"本体\"><a href=\"#本体\" class=\"headerlink\" title=\"本体\"></a>本体</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>cubic-bezier</code> 又称<strong>三次贝塞尔</strong>，主要是为 <code>animation</code> 生成速度曲线的函数，规定是 <code>cubic-bezier(&lt;x1&gt;, &lt;y1&gt;, &lt;x2&gt;, &lt;y2&gt;)</code>。</p>\n<p>我们可以从下图中简要理解一下 <code>cubic-bezier</code>：<br><img src=\"/blog/images/article_img/cubic-bezier-01.png\" alt=\"cubic-bezier\"><br><img src=\"/blog/images/article_img/cubic-bezier-02.jpg\" alt=\"cubic-bezier\"></p>\n<p>从上图我们需要知道的是 <code>cubic-bezier</code> 的取值范围:</p>\n<ul>\n<li>P0：默认值 (0, 0)</li>\n<li><strong>P1：动态取值 (x1, y1)</strong></li>\n<li><strong>P2：动态取值 (x2, y2)</strong></li>\n<li>P3：默认值 (1, 1)</li>\n</ul>","more":"<p>我们需要关注的是 P1 和 P2 两点的取值，而其中 <strong><code>X 轴</code></strong>的取值范围是 <strong>0</strong> 到 <strong>1</strong>，当取值超出范围时 <code>cubic-bezier</code> 将失效；<code>Y 轴</code>的取值没有规定，当然也毋须过大。</p>\n<p>最直接的理解是，将<strong>以一条直线放在范围只有 1 的坐标轴中，并从中间拿出两个点来拉扯（X 轴的取值区间是 [0, 1]，Y 轴任意），最后形成的曲线就是动画的速度曲线</strong>。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在测试例子中：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span><br><span class=\"line\">    <span class=\"selector-class\">.animation</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#ed3</span>;</span><br><span class=\"line\">      <span class=\"attribute\">-webkit-transition</span>:  all <span class=\"number\">2s</span>;</span><br><span class=\"line\">           <span class=\"attribute\">-o-transition</span>:  all <span class=\"number\">2s</span>;</span><br><span class=\"line\">              <span class=\"attribute\">transition</span>:  all <span class=\"number\">2s</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.animation</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">-webkit-transform</span>:  <span class=\"built_in\">translateX</span>(100px);</span><br><span class=\"line\">          <span class=\"attribute\">-ms-transform</span>:  <span class=\"built_in\">translateX</span>(100px);</span><br><span class=\"line\">           <span class=\"attribute\">-o-transform</span>:  <span class=\"built_in\">translateX</span>(100px);</span><br><span class=\"line\">              <span class=\"attribute\">transform</span>:  <span class=\"built_in\">translateX</span>(100px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"animation\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们可以在浏览器中看到，当鼠标移到元素上时，元素开始向右移动，开始比较慢，之后则比较快，移开时按原曲线回到原点。</p>\n<p>在例子中，当我们不为 <code>transition</code> 添加 <code>cubic-bezier</code> 或是其他 <code>timing-function</code> 时，默认的速度曲线是 <code>ease</code>，此时的速度曲线是：<br><img src=\"/blog/images/article_img/cubic-bezier-03.png\" alt=\"cubic-bezier\"></p>\n<p>那么让我们在代码中加入 <code>cubic-bezier(.17, .86, .73, .14)</code>：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">.animation &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  -webkit-transition:  all 2s cubic-bezier(.17, .86, .73, .14);</span><br><span class=\"line\">       -o-transition:  all 2s cubic-bezier(.17, .86, .73, .14);</span><br><span class=\"line\">          transition:  all 2s cubic-bezier(.17, .86, .73, .14);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>再刷新页面观察效果，会看到动画在执行过程中有一段很缓慢的移动，前后的速度相似，此时的运动曲线是：<br><img src=\"/blog/images/article_img/cubic-bezier-04.png\" alt=\"cubic-bezier\"></p>\n<h2 id=\"几个常用的固定值对应的-cubic-bezier-值以及速度曲线\"><a href=\"#几个常用的固定值对应的-cubic-bezier-值以及速度曲线\" class=\"headerlink\" title=\"几个常用的固定值对应的 cubic-bezier 值以及速度曲线\"></a>几个常用的固定值对应的 <code>cubic-bezier</code> 值以及速度曲线</h2><ol>\n<li><p><code>ease</code>：cubic-bezier(.25, .1, .25, 1)<br><img src=\"/blog/images/article_img/cubic-bezier-03.png\" alt=\"cubic-bezier\"></p>\n</li>\n<li><p><code>liner</code>：cubic-bezier(0, 0, 1, 1) / cubic-bezier(1, 1, 0, 0)<br><img src=\"/blog/images/article_img/cubic-bezier-05.png\" alt=\"cubic-bezier\"></p>\n</li>\n<li><p><code>ease-in</code>：cubic-bezier(.42, 0, 1, 1)<br><img src=\"/blog/images/article_img/cubic-bezier-06.png\" alt=\"cubic-bezier\"></p>\n</li>\n<li><p><code>ease-out</code>：cubic-bezier(0, 0, .58, 1)<br><img src=\"/blog/images/article_img/cubic-bezier-07.png\" alt=\"cubic-bezier\"></p>\n</li>\n<li><p><code>ease-in-out</code>：cubic-bezier(.42, 0, .58, 1)<br><img src=\"/blog/images/article_img/cubic-bezier-08.png\" alt=\"cubic-bezier\"></p>\n</li>\n<li><p>In Out . Back（来回的缓冲效果）：cubic-bezier(0.68, -0.55, 0.27, 1.55)<br><img src=\"/blog/images/article_img/cubic-bezier-09.png\" alt=\"cubic-bezier\"></p>\n</li>\n</ol>\n<h1 id=\"效果参考\"><a href=\"#效果参考\" class=\"headerlink\" title=\"效果参考\"></a>效果参考</h1><p>文章所提到的动画效果可以在下面站点中看到，当然你也可以大胆尝试：</p>\n<ul>\n<li><a href=\"http://cubic-bezier.com/#.17,.67,.83,.67\">英文版在线预览（Lea Verou）</a></li>\n<li><a href=\"http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67\">中文版在线预览（更多效果）</a></li>\n<li><a href=\"http://xuanfengge.com/easeing/ceaser/\">在线生成系列</a></li>\n<li><a href=\"https://github.com/jovey-zheng/loader\">作者的《Loading》库</a></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function\">MDN</a><br><a href=\"http://www.w3school.com.cn/cssref/pr_animation-timing-function.asp\">W3School</a></p>","sticky":0},{"title":"使用Git管理项目-初始化","date":"2015-09-07T07:57:59.000Z","_content":"# 获取Git仓库\n获取Git仓库的方式主要分为两种。第一种是在现有项目或目录下导入所有文件到 Git 中；第二种是从一个服务器克隆一个现有的 Git 仓库。\n\n## GIT INIT\n首先在现有的项目目录下输入：\n```\n$ git init\n```\n\n这样就简单将你的目录转变成一个Git仓库。该命令将创建一个名为 `.git`的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。\n\n如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。\n```\n$ git add .  //`.`是将目录的所有文件都添加（不包括空文件夹）\n$ git commit -m 'first commit'  //提交修改（`'first commit'`为注释信息）\n```\n\n此时可以使用`$ git status`来查看当前文件状态。\n我们还可以将项目加入到远程Git仓库：\n```\n$ git remote add origin git@github.com:jovey-zheng/test.git  //加入到远程的Git仓库\n$ git push -u origin master  //将项目推到Git仓库\n```\n\n这样我们就可以实现项目的远程操作。\n\n<!-- more -->\n\n## GIT CLONE\n当远程Git仓库已经存在一个项目时，需要对此项目进行操作；或者有一个你想为此贡献自己一份力的开源项目时，就需要用到`$ git clone`。当你执行`$ git clone`命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。\n\n克隆仓库的命令格式为`$ git clone [url]`。例如，要克隆 Git 的可链接库 test，可以用下面的命令：\n```\n$ git clone git@github.com:jovey-zheng/test.git\n```\n\n这会在当前目录下创建一个名为 `test` 的目录，并初始化一个`.git`文件夹。\n如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：\n```\n$ git clone git@github.com:jovey-zheng/test.git myTest\n```\n\n这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 myTest。\n\nGit 支持多种数据传输协议。上面的例子使用的是`SSH`传输协议，当然也可以使用`https://`协议。\n\n关于SSH：《[SSH key生成](http://www.jianshu.com/p/697fe0815689)》\n推荐：《[Git pro](http://git-scm.com/book/zh/v2)》","source":"_posts/article-3.md","raw":"title: 使用Git管理项目-初始化\ndate: 2015.09.07 15:57:59\ncategories:\n\t- Git\ntags:\n\t- git\n\t- 项目管理\n---\n# 获取Git仓库\n获取Git仓库的方式主要分为两种。第一种是在现有项目或目录下导入所有文件到 Git 中；第二种是从一个服务器克隆一个现有的 Git 仓库。\n\n## GIT INIT\n首先在现有的项目目录下输入：\n```\n$ git init\n```\n\n这样就简单将你的目录转变成一个Git仓库。该命令将创建一个名为 `.git`的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。\n\n如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。\n```\n$ git add .  //`.`是将目录的所有文件都添加（不包括空文件夹）\n$ git commit -m 'first commit'  //提交修改（`'first commit'`为注释信息）\n```\n\n此时可以使用`$ git status`来查看当前文件状态。\n我们还可以将项目加入到远程Git仓库：\n```\n$ git remote add origin git@github.com:jovey-zheng/test.git  //加入到远程的Git仓库\n$ git push -u origin master  //将项目推到Git仓库\n```\n\n这样我们就可以实现项目的远程操作。\n\n<!-- more -->\n\n## GIT CLONE\n当远程Git仓库已经存在一个项目时，需要对此项目进行操作；或者有一个你想为此贡献自己一份力的开源项目时，就需要用到`$ git clone`。当你执行`$ git clone`命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。\n\n克隆仓库的命令格式为`$ git clone [url]`。例如，要克隆 Git 的可链接库 test，可以用下面的命令：\n```\n$ git clone git@github.com:jovey-zheng/test.git\n```\n\n这会在当前目录下创建一个名为 `test` 的目录，并初始化一个`.git`文件夹。\n如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：\n```\n$ git clone git@github.com:jovey-zheng/test.git myTest\n```\n\n这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 myTest。\n\nGit 支持多种数据传输协议。上面的例子使用的是`SSH`传输协议，当然也可以使用`https://`协议。\n\n关于SSH：《[SSH key生成](http://www.jianshu.com/p/697fe0815689)》\n推荐：《[Git pro](http://git-scm.com/book/zh/v2)》","slug":"article-3","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7emz0010wnprfzon4euj","content":"<h1 id=\"获取Git仓库\"><a href=\"#获取Git仓库\" class=\"headerlink\" title=\"获取Git仓库\"></a>获取Git仓库</h1><p>获取Git仓库的方式主要分为两种。第一种是在现有项目或目录下导入所有文件到 Git 中；第二种是从一个服务器克隆一个现有的 Git 仓库。</p>\n<h2 id=\"GIT-INIT\"><a href=\"#GIT-INIT\" class=\"headerlink\" title=\"GIT INIT\"></a>GIT INIT</h2><p>首先在现有的项目目录下输入：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git init</span><br></pre></td></tr></table></figure></p>\n<p>这样就简单将你的目录转变成一个Git仓库。该命令将创建一个名为 <code>.git</code>的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。</p>\n<p>如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git add .  <span class=\"comment\">//`.`是将目录的所有文件都添加（不包括空文件夹）</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git commit -m <span class=\"string\">'first commit'</span>  <span class=\"comment\">//提交修改（`'first commit'`为注释信息）</span></span><br></pre></td></tr></table></figure></p>\n<p>此时可以使用<code>$ git status</code>来查看当前文件状态。<br>我们还可以将项目加入到远程Git仓库：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github<span class=\"selector-class\">.com</span>:jovey-zheng/test<span class=\"selector-class\">.git</span>  <span class=\"comment\">//加入到远程的Git仓库</span></span><br><span class=\"line\">$ git push -u origin master  <span class=\"comment\">//将项目推到Git仓库</span></span><br></pre></td></tr></table></figure></p>\n<p>这样我们就可以实现项目的远程操作。</p>\n<a id=\"more\"></a>\n<h2 id=\"GIT-CLONE\"><a href=\"#GIT-CLONE\" class=\"headerlink\" title=\"GIT CLONE\"></a>GIT CLONE</h2><p>当远程Git仓库已经存在一个项目时，需要对此项目进行操作；或者有一个你想为此贡献自己一份力的开源项目时，就需要用到<code>$ git clone</code>。当你执行<code>$ git clone</code>命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。</p>\n<p>克隆仓库的命令格式为<code>$ git clone [url]</code>。例如，要克隆 Git 的可链接库 test，可以用下面的命令：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>@github.com:jovey-zheng/test.git</span><br></pre></td></tr></table></figure></p>\n<p>这会在当前目录下创建一个名为 <code>test</code> 的目录，并初始化一个<code>.git</code>文件夹。<br>如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@github<span class=\"selector-class\">.com</span>:jovey-zheng/test<span class=\"selector-class\">.git</span> myTest</span><br></pre></td></tr></table></figure></p>\n<p>这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 myTest。</p>\n<p>Git 支持多种数据传输协议。上面的例子使用的是<code>SSH</code>传输协议，当然也可以使用<code>https://</code>协议。</p>\n<p>关于SSH：《<a href=\"http://www.jianshu.com/p/697fe0815689\" target=\"_blank\" rel=\"external\">SSH key生成</a>》<br>推荐：《<a href=\"http://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">Git pro</a>》</p>\n","excerpt":"<h1 id=\"获取Git仓库\"><a href=\"#获取Git仓库\" class=\"headerlink\" title=\"获取Git仓库\"></a>获取Git仓库</h1><p>获取Git仓库的方式主要分为两种。第一种是在现有项目或目录下导入所有文件到 Git 中；第二种是从一个服务器克隆一个现有的 Git 仓库。</p>\n<h2 id=\"GIT-INIT\"><a href=\"#GIT-INIT\" class=\"headerlink\" title=\"GIT INIT\"></a>GIT INIT</h2><p>首先在现有的项目目录下输入：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git init</span><br></pre></td></tr></table></figure></p>\n<p>这样就简单将你的目录转变成一个Git仓库。该命令将创建一个名为 <code>.git</code>的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。</p>\n<p>如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git add .  <span class=\"comment\">//`.`是将目录的所有文件都添加（不包括空文件夹）</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git commit -m <span class=\"string\">'first commit'</span>  <span class=\"comment\">//提交修改（`'first commit'`为注释信息）</span></span><br></pre></td></tr></table></figure></p>\n<p>此时可以使用<code>$ git status</code>来查看当前文件状态。<br>我们还可以将项目加入到远程Git仓库：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github<span class=\"selector-class\">.com</span>:jovey-zheng/test<span class=\"selector-class\">.git</span>  <span class=\"comment\">//加入到远程的Git仓库</span></span><br><span class=\"line\">$ git push -u origin master  <span class=\"comment\">//将项目推到Git仓库</span></span><br></pre></td></tr></table></figure></p>\n<p>这样我们就可以实现项目的远程操作。</p>","more":"<h2 id=\"GIT-CLONE\"><a href=\"#GIT-CLONE\" class=\"headerlink\" title=\"GIT CLONE\"></a>GIT CLONE</h2><p>当远程Git仓库已经存在一个项目时，需要对此项目进行操作；或者有一个你想为此贡献自己一份力的开源项目时，就需要用到<code>$ git clone</code>。当你执行<code>$ git clone</code>命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。</p>\n<p>克隆仓库的命令格式为<code>$ git clone [url]</code>。例如，要克隆 Git 的可链接库 test，可以用下面的命令：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>@github.com:jovey-zheng/test.git</span><br></pre></td></tr></table></figure></p>\n<p>这会在当前目录下创建一个名为 <code>test</code> 的目录，并初始化一个<code>.git</code>文件夹。<br>如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@github<span class=\"selector-class\">.com</span>:jovey-zheng/test<span class=\"selector-class\">.git</span> myTest</span><br></pre></td></tr></table></figure></p>\n<p>这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 myTest。</p>\n<p>Git 支持多种数据传输协议。上面的例子使用的是<code>SSH</code>传输协议，当然也可以使用<code>https://</code>协议。</p>\n<p>关于SSH：《<a href=\"http://www.jianshu.com/p/697fe0815689\">SSH key生成</a>》<br>推荐：《<a href=\"http://git-scm.com/book/zh/v2\">Git pro</a>》</p>","sticky":0},{"title":"Brunch:快捷的HTML5构建工具","date":"2015-09-08T06:48:25.000Z","_content":"![Brunch](/blog/images/article_img/2.png)\n# 了解Brunch（官方介绍）\n* 编译你的脚本，模板，样式，链接它们\n* 将脚本和模板封装进common.js/AMD模块里，链接脚本和样式\n* 为链接文件生成源地图，复制资源和静态文件\n* 通过缩减代码和优化图片来收缩输出，看管你的文件更改\n* 并且通过控制台和系统提示通知你错误\n\n# 安装\n当你已经拥有Nodejs时（若没有，请到[nodejs官网](http://nodejs.org)下载），就可以直接使用`npm`运行：\n```\n$ npm install -g brunch\n```\n\n# 新建 new\n* 新建一个Brunch\n```\n$ brunch new <skeleton-URL> [optional-output-dir]\n```\n\n`new`可以简写为`n`。\n`<skeleton-URL>`指定一个架构，则项目会应用此架构进行初始化。\n`[optional-output-dir]`指定输出目录，项目名称可以自定义。\n\n例如：\n```\n$ brunch n https://github.com/scotch/angular-brunch-seed myProject\n08 Sep 12:20:32 - log: Cloning git repo \"https://github.com/scotch/angular-brunc                                                                       h-seed\" to \"E:\\myProject\"...\n08 Sep 12:20:49 - log: Created skeleton directory layout\n08 Sep 12:20:49 - log: Installing packages...\n```\n\n当不指定输出文件夹时，必须保证放置新项目的文件夹为空，否则会`clone`失败。\n<!-- more -->\n\n# 构建 build\n```\n$ brunch build --production\n```\n\n也可以简写为：\n```\n$ brunch b -P\n```\n\n这样构建一个分布式项目，使得项目的体积变小。\n\n# 使用 watch\n```\n$ brunch watch --server\n```\n\n也可以简写为：\n```\n$ brunch w -s\n```\n\n让Brunch看管你的项目，然后你就可以运行项目了。输出结果如：\n```\n08 Sep 12:32:58 - error: { [Error: Component must have \"E:\\w\\bower_components\\console-polyfill\\bower.json\"] code: 'NO_BOWER_JSON' }\n08 Sep 12:32:59 - info: application started on http://localhost:3333/\n08 Sep 12:33:00 - warn: 'test\\karma-e2e.conf.js' compiled, but not written. Check your javascripts.joinTo config.\n```\n\n# 注意\n* **必要安装项**\nGit安装：[Git](http://git-scm.com)\nbower安装：\n```\n$ npm install -g bower\n```\n\n* **运行项目前**\n执行`$ bower install`对项目初始化。\n\n# 参考\n[【官网】](http://brunch.io/)[【README】](https://github.com/brunch/brunch/tree/master/docs)[【Command】](https://github.com/brunch/brunch/blob/master/docs/commands.md)\n","source":"_posts/article-4.md","raw":"title: Brunch:快捷的HTML5构建工具\ndate: 2015.09.08 14:48:25\ncategories:\n\t- 笔记随笔\ntags:\n\t- Brunch\n\t- 构建工具\n---\n![Brunch](/blog/images/article_img/2.png)\n# 了解Brunch（官方介绍）\n* 编译你的脚本，模板，样式，链接它们\n* 将脚本和模板封装进common.js/AMD模块里，链接脚本和样式\n* 为链接文件生成源地图，复制资源和静态文件\n* 通过缩减代码和优化图片来收缩输出，看管你的文件更改\n* 并且通过控制台和系统提示通知你错误\n\n# 安装\n当你已经拥有Nodejs时（若没有，请到[nodejs官网](http://nodejs.org)下载），就可以直接使用`npm`运行：\n```\n$ npm install -g brunch\n```\n\n# 新建 new\n* 新建一个Brunch\n```\n$ brunch new <skeleton-URL> [optional-output-dir]\n```\n\n`new`可以简写为`n`。\n`<skeleton-URL>`指定一个架构，则项目会应用此架构进行初始化。\n`[optional-output-dir]`指定输出目录，项目名称可以自定义。\n\n例如：\n```\n$ brunch n https://github.com/scotch/angular-brunch-seed myProject\n08 Sep 12:20:32 - log: Cloning git repo \"https://github.com/scotch/angular-brunc                                                                       h-seed\" to \"E:\\myProject\"...\n08 Sep 12:20:49 - log: Created skeleton directory layout\n08 Sep 12:20:49 - log: Installing packages...\n```\n\n当不指定输出文件夹时，必须保证放置新项目的文件夹为空，否则会`clone`失败。\n<!-- more -->\n\n# 构建 build\n```\n$ brunch build --production\n```\n\n也可以简写为：\n```\n$ brunch b -P\n```\n\n这样构建一个分布式项目，使得项目的体积变小。\n\n# 使用 watch\n```\n$ brunch watch --server\n```\n\n也可以简写为：\n```\n$ brunch w -s\n```\n\n让Brunch看管你的项目，然后你就可以运行项目了。输出结果如：\n```\n08 Sep 12:32:58 - error: { [Error: Component must have \"E:\\w\\bower_components\\console-polyfill\\bower.json\"] code: 'NO_BOWER_JSON' }\n08 Sep 12:32:59 - info: application started on http://localhost:3333/\n08 Sep 12:33:00 - warn: 'test\\karma-e2e.conf.js' compiled, but not written. Check your javascripts.joinTo config.\n```\n\n# 注意\n* **必要安装项**\nGit安装：[Git](http://git-scm.com)\nbower安装：\n```\n$ npm install -g bower\n```\n\n* **运行项目前**\n执行`$ bower install`对项目初始化。\n\n# 参考\n[【官网】](http://brunch.io/)[【README】](https://github.com/brunch/brunch/tree/master/docs)[【Command】](https://github.com/brunch/brunch/blob/master/docs/commands.md)\n","slug":"article-4","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7en40012wnprkmmljeiq","content":"<p><img src=\"/blog/images/article_img/2.png\" alt=\"Brunch\"></p>\n<h1 id=\"了解Brunch（官方介绍）\"><a href=\"#了解Brunch（官方介绍）\" class=\"headerlink\" title=\"了解Brunch（官方介绍）\"></a>了解Brunch（官方介绍）</h1><ul>\n<li>编译你的脚本，模板，样式，链接它们</li>\n<li>将脚本和模板封装进common.js/AMD模块里，链接脚本和样式</li>\n<li>为链接文件生成源地图，复制资源和静态文件</li>\n<li>通过缩减代码和优化图片来收缩输出，看管你的文件更改</li>\n<li>并且通过控制台和系统提示通知你错误</li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>当你已经拥有Nodejs时（若没有，请到<a href=\"http://nodejs.org\" target=\"_blank\" rel=\"external\">nodejs官网</a>下载），就可以直接使用<code>npm</code>运行：<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> -g brunch</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"新建-new\"><a href=\"#新建-new\" class=\"headerlink\" title=\"新建 new\"></a>新建 new</h1><ul>\n<li>新建一个Brunch<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brunch <span class=\"keyword\">new</span> &lt;skeleton-URL&gt; [optional-<span class=\"keyword\">output</span>-dir]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>new</code>可以简写为<code>n</code>。<br><code>&lt;skeleton-URL&gt;</code>指定一个架构，则项目会应用此架构进行初始化。<br><code>[optional-output-dir]</code>指定输出目录，项目名称可以自定义。</p>\n<p>例如：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brunch n http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/scotch/angular-brunch-seed myProject</span><br><span class=\"line\"><span class=\"number\">08</span> Sep <span class=\"number\">12</span>:<span class=\"number\">20</span>:<span class=\"number\">32</span> - <span class=\"keyword\">lo</span><span class=\"variable\">g:</span> Cloning git repo <span class=\"string\">\"https://github.com/scotch/angular-brunc                                                                       h-seed\"</span> <span class=\"keyword\">to</span> <span class=\"string\">\"E:\\myProject\"</span>...</span><br><span class=\"line\"><span class=\"number\">08</span> Sep <span class=\"number\">12</span>:<span class=\"number\">20</span>:<span class=\"number\">49</span> - <span class=\"keyword\">lo</span><span class=\"variable\">g:</span> Created skeleton directory layout</span><br><span class=\"line\"><span class=\"number\">08</span> Sep <span class=\"number\">12</span>:<span class=\"number\">20</span>:<span class=\"number\">49</span> - <span class=\"keyword\">lo</span><span class=\"variable\">g:</span> Installing packages...</span><br></pre></td></tr></table></figure></p>\n<p>当不指定输出文件夹时，必须保证放置新项目的文件夹为空，否则会<code>clone</code>失败。<br><a id=\"more\"></a></p>\n<h1 id=\"构建-build\"><a href=\"#构建-build\" class=\"headerlink\" title=\"构建 build\"></a>构建 build</h1><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brunch </span><span class=\"keyword\">build </span>--production</span><br></pre></td></tr></table></figure>\n<p>也可以简写为：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brunch </span><span class=\"keyword\">b </span>-P</span><br></pre></td></tr></table></figure></p>\n<p>这样构建一个分布式项目，使得项目的体积变小。</p>\n<h1 id=\"使用-watch\"><a href=\"#使用-watch\" class=\"headerlink\" title=\"使用 watch\"></a>使用 watch</h1><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brunch watch <span class=\"comment\">--server</span></span><br></pre></td></tr></table></figure>\n<p>也可以简写为：<br><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brunch <span class=\"keyword\">w</span> -<span class=\"keyword\">s</span></span><br></pre></td></tr></table></figure></p>\n<p>让Brunch看管你的项目，然后你就可以运行项目了。输出结果如：<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">08 </span>Sep <span class=\"number\">12</span>:<span class=\"number\">32</span>:<span class=\"number\">58</span> - <span class=\"keyword\">error</span>: &#123; [<span class=\"keyword\">Error</span>: Component must have <span class=\"string\">\"E:\\w\\bower_components\\console-polyfill\\bower.json\"</span>] code: <span class=\"comment\">'NO_BOWER_JSON' &#125;</span></span><br><span class=\"line\"><span class=\"symbol\">08 </span>Sep <span class=\"number\">12</span>:<span class=\"number\">32</span>:<span class=\"number\">59</span> - info: application started <span class=\"keyword\">on</span> http://localhost:<span class=\"number\">3333</span>/</span><br><span class=\"line\"><span class=\"symbol\">08 </span>Sep <span class=\"number\">12</span>:<span class=\"number\">33</span>:<span class=\"number\">00</span> - warn: <span class=\"comment\">'test\\karma-e2e.conf.js' compiled, but not written. Check your javascripts.joinTo config.</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><ul>\n<li><p><strong>必要安装项</strong><br>Git安装：<a href=\"http://git-scm.com\" target=\"_blank\" rel=\"external\">Git</a><br>bower安装：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> -g bower</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>运行项目前</strong><br>执行<code>$ bower install</code>对项目初始化。</p>\n</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://brunch.io/\" target=\"_blank\" rel=\"external\">【官网】</a><a href=\"https://github.com/brunch/brunch/tree/master/docs\" target=\"_blank\" rel=\"external\">【README】</a><a href=\"https://github.com/brunch/brunch/blob/master/docs/commands.md\" target=\"_blank\" rel=\"external\">【Command】</a></p>\n","excerpt":"<p><img src=\"/blog/images/article_img/2.png\" alt=\"Brunch\"></p>\n<h1 id=\"了解Brunch（官方介绍）\"><a href=\"#了解Brunch（官方介绍）\" class=\"headerlink\" title=\"了解Brunch（官方介绍）\"></a>了解Brunch（官方介绍）</h1><ul>\n<li>编译你的脚本，模板，样式，链接它们</li>\n<li>将脚本和模板封装进common.js/AMD模块里，链接脚本和样式</li>\n<li>为链接文件生成源地图，复制资源和静态文件</li>\n<li>通过缩减代码和优化图片来收缩输出，看管你的文件更改</li>\n<li>并且通过控制台和系统提示通知你错误</li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>当你已经拥有Nodejs时（若没有，请到<a href=\"http://nodejs.org\">nodejs官网</a>下载），就可以直接使用<code>npm</code>运行：<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> -g brunch</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"新建-new\"><a href=\"#新建-new\" class=\"headerlink\" title=\"新建 new\"></a>新建 new</h1><ul>\n<li>新建一个Brunch<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brunch <span class=\"keyword\">new</span> &lt;skeleton-URL&gt; [optional-<span class=\"keyword\">output</span>-dir]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>new</code>可以简写为<code>n</code>。<br><code>&lt;skeleton-URL&gt;</code>指定一个架构，则项目会应用此架构进行初始化。<br><code>[optional-output-dir]</code>指定输出目录，项目名称可以自定义。</p>\n<p>例如：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brunch n http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/scotch/angular-brunch-seed myProject</span><br><span class=\"line\"><span class=\"number\">08</span> Sep <span class=\"number\">12</span>:<span class=\"number\">20</span>:<span class=\"number\">32</span> - <span class=\"keyword\">lo</span><span class=\"variable\">g:</span> Cloning git repo <span class=\"string\">\"https://github.com/scotch/angular-brunc                                                                       h-seed\"</span> <span class=\"keyword\">to</span> <span class=\"string\">\"E:\\myProject\"</span>...</span><br><span class=\"line\"><span class=\"number\">08</span> Sep <span class=\"number\">12</span>:<span class=\"number\">20</span>:<span class=\"number\">49</span> - <span class=\"keyword\">lo</span><span class=\"variable\">g:</span> Created skeleton directory layout</span><br><span class=\"line\"><span class=\"number\">08</span> Sep <span class=\"number\">12</span>:<span class=\"number\">20</span>:<span class=\"number\">49</span> - <span class=\"keyword\">lo</span><span class=\"variable\">g:</span> Installing packages...</span><br></pre></td></tr></table></figure></p>\n<p>当不指定输出文件夹时，必须保证放置新项目的文件夹为空，否则会<code>clone</code>失败。<br>","more":"</p>\n<h1 id=\"构建-build\"><a href=\"#构建-build\" class=\"headerlink\" title=\"构建 build\"></a>构建 build</h1><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brunch </span><span class=\"keyword\">build </span>--production</span><br></pre></td></tr></table></figure>\n<p>也可以简写为：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brunch </span><span class=\"keyword\">b </span>-P</span><br></pre></td></tr></table></figure></p>\n<p>这样构建一个分布式项目，使得项目的体积变小。</p>\n<h1 id=\"使用-watch\"><a href=\"#使用-watch\" class=\"headerlink\" title=\"使用 watch\"></a>使用 watch</h1><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brunch watch <span class=\"comment\">--server</span></span><br></pre></td></tr></table></figure>\n<p>也可以简写为：<br><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brunch <span class=\"keyword\">w</span> -<span class=\"keyword\">s</span></span><br></pre></td></tr></table></figure></p>\n<p>让Brunch看管你的项目，然后你就可以运行项目了。输出结果如：<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">08 </span>Sep <span class=\"number\">12</span>:<span class=\"number\">32</span>:<span class=\"number\">58</span> - <span class=\"keyword\">error</span>: &#123; [<span class=\"keyword\">Error</span>: Component must have <span class=\"string\">\"E:\\w\\bower_components\\console-polyfill\\bower.json\"</span>] code: <span class=\"comment\">'NO_BOWER_JSON' &#125;</span></span><br><span class=\"line\"><span class=\"symbol\">08 </span>Sep <span class=\"number\">12</span>:<span class=\"number\">32</span>:<span class=\"number\">59</span> - info: application started <span class=\"keyword\">on</span> http://localhost:<span class=\"number\">3333</span>/</span><br><span class=\"line\"><span class=\"symbol\">08 </span>Sep <span class=\"number\">12</span>:<span class=\"number\">33</span>:<span class=\"number\">00</span> - warn: <span class=\"comment\">'test\\karma-e2e.conf.js' compiled, but not written. Check your javascripts.joinTo config.</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><ul>\n<li><p><strong>必要安装项</strong><br>Git安装：<a href=\"http://git-scm.com\">Git</a><br>bower安装：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> -g bower</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>运行项目前</strong><br>执行<code>$ bower install</code>对项目初始化。</p>\n</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://brunch.io/\">【官网】</a><a href=\"https://github.com/brunch/brunch/tree/master/docs\">【README】</a><a href=\"https://github.com/brunch/brunch/blob/master/docs/commands.md\">【Command】</a></p>","sticky":0},{"title":"NPM一些常用命令","date":"2015-09-17T07:57:11.000Z","_content":"# 关于NPM\n\nNPM的全称是Node Package Manager，是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。\n就目前而言，NPM的官网[[1]](https://www.npmjs.com/)拥有18万的packages。国内的镜像是淘宝所提供的CNPM[[2]](http://npm.taobao.org/)，与NPM相同，它会每隔10分钟就同步一次。\n\n# 一些常用命令\n* `npm -v`: 查看npm安装的版本\n* `npm init`: 引导你创建一个package.json文件，包括名称、版本、作者这些信息等\n* `npm install <modulename>`: 安装模块\n* `npm install <modulename> -g`: 安装全局模块\n* `npm install <modulename>@1.0.0`: 安装指定版本的模块\n* `npm install <modulename> -save`: 安装模块并添加到package.json依赖中\n\n* `npm uninstall <modulename>`: 卸载模块\n* `npm cache clean`: 清除缓存\n\n* `npm help`: 查看帮助命令\n* `npm ls`: 查看当前目录安装的依赖\n* `npm ls -g`: 查看全局目录安装的依赖\n\n<!-- more -->\n\n* `npm view <modulename>`: 查看包的package.json\n* `npm view <modulename> dependencies`: 查看包的依赖关系\n* `npm view <modulename> repository.url`: 查看包的源文件地址\n\n* `npm update <modulename>`: 更新模块\n* `npm remove <modulename>`: 移除模块\n\n# 题外话CNPM\n有时候会出现NPM无法使用的情况，此时可以尝试使用CNPM解决此问题。\n## 淘宝NPM镜像\n这是一个完整 `npmjs.org` 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n\n## 使用\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n## 安装模块\n与NPM类似，将`npm install <...>`改为`cpm install <...>`\n\n# 更多\n更多命令参考文档[[3]](https://docs.npmjs.com/)","source":"_posts/article-5.md","raw":"title: NPM一些常用命令\ndate: 2015-09-17 15:57:11\ncategories:\n  - 开发日常\ntags:\n  - npm\n  - module\n  - nodejs\n---\n# 关于NPM\n\nNPM的全称是Node Package Manager，是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。\n就目前而言，NPM的官网[[1]](https://www.npmjs.com/)拥有18万的packages。国内的镜像是淘宝所提供的CNPM[[2]](http://npm.taobao.org/)，与NPM相同，它会每隔10分钟就同步一次。\n\n# 一些常用命令\n* `npm -v`: 查看npm安装的版本\n* `npm init`: 引导你创建一个package.json文件，包括名称、版本、作者这些信息等\n* `npm install <modulename>`: 安装模块\n* `npm install <modulename> -g`: 安装全局模块\n* `npm install <modulename>@1.0.0`: 安装指定版本的模块\n* `npm install <modulename> -save`: 安装模块并添加到package.json依赖中\n\n* `npm uninstall <modulename>`: 卸载模块\n* `npm cache clean`: 清除缓存\n\n* `npm help`: 查看帮助命令\n* `npm ls`: 查看当前目录安装的依赖\n* `npm ls -g`: 查看全局目录安装的依赖\n\n<!-- more -->\n\n* `npm view <modulename>`: 查看包的package.json\n* `npm view <modulename> dependencies`: 查看包的依赖关系\n* `npm view <modulename> repository.url`: 查看包的源文件地址\n\n* `npm update <modulename>`: 更新模块\n* `npm remove <modulename>`: 移除模块\n\n# 题外话CNPM\n有时候会出现NPM无法使用的情况，此时可以尝试使用CNPM解决此问题。\n## 淘宝NPM镜像\n这是一个完整 `npmjs.org` 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n\n## 使用\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n## 安装模块\n与NPM类似，将`npm install <...>`改为`cpm install <...>`\n\n# 更多\n更多命令参考文档[[3]](https://docs.npmjs.com/)","slug":"article-5","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7en60016wnpr8788g4j6","content":"<h1 id=\"关于NPM\"><a href=\"#关于NPM\" class=\"headerlink\" title=\"关于NPM\"></a>关于NPM</h1><p>NPM的全称是Node Package Manager，是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。<br>就目前而言，NPM的官网<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">[1]</a>拥有18万的packages。国内的镜像是淘宝所提供的CNPM<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">[2]</a>，与NPM相同，它会每隔10分钟就同步一次。</p>\n<h1 id=\"一些常用命令\"><a href=\"#一些常用命令\" class=\"headerlink\" title=\"一些常用命令\"></a>一些常用命令</h1><ul>\n<li><code>npm -v</code>: 查看npm安装的版本</li>\n<li><code>npm init</code>: 引导你创建一个package.json文件，包括名称、版本、作者这些信息等</li>\n<li><code>npm install &lt;modulename&gt;</code>: 安装模块</li>\n<li><code>npm install &lt;modulename&gt; -g</code>: 安装全局模块</li>\n<li><code>npm install &lt;modulename&gt;@1.0.0</code>: 安装指定版本的模块</li>\n<li><p><code>npm install &lt;modulename&gt; -save</code>: 安装模块并添加到package.json依赖中</p>\n</li>\n<li><p><code>npm uninstall &lt;modulename&gt;</code>: 卸载模块</p>\n</li>\n<li><p><code>npm cache clean</code>: 清除缓存</p>\n</li>\n<li><p><code>npm help</code>: 查看帮助命令</p>\n</li>\n<li><code>npm ls</code>: 查看当前目录安装的依赖</li>\n<li><code>npm ls -g</code>: 查看全局目录安装的依赖</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><code>npm view &lt;modulename&gt;</code>: 查看包的package.json</li>\n<li><code>npm view &lt;modulename&gt; dependencies</code>: 查看包的依赖关系</li>\n<li><p><code>npm view &lt;modulename&gt; repository.url</code>: 查看包的源文件地址</p>\n</li>\n<li><p><code>npm update &lt;modulename&gt;</code>: 更新模块</p>\n</li>\n<li><code>npm remove &lt;modulename&gt;</code>: 移除模块</li>\n</ul>\n<h1 id=\"题外话CNPM\"><a href=\"#题外话CNPM\" class=\"headerlink\" title=\"题外话CNPM\"></a>题外话CNPM</h1><p>有时候会出现NPM无法使用的情况，此时可以尝试使用CNPM解决此问题。</p>\n<h2 id=\"淘宝NPM镜像\"><a href=\"#淘宝NPM镜像\" class=\"headerlink\" title=\"淘宝NPM镜像\"></a>淘宝NPM镜像</h2><p>这是一个完整 <code>npmjs.org</code> 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h2><p>与NPM类似，将<code>npm install &lt;...&gt;</code>改为<code>cpm install &lt;...&gt;</code></p>\n<h1 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h1><p>更多命令参考文档<a href=\"https://docs.npmjs.com/\" target=\"_blank\" rel=\"external\">[3]</a></p>\n","excerpt":"<h1 id=\"关于NPM\"><a href=\"#关于NPM\" class=\"headerlink\" title=\"关于NPM\"></a>关于NPM</h1><p>NPM的全称是Node Package Manager，是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。<br>就目前而言，NPM的官网<a href=\"https://www.npmjs.com/\">[1]</a>拥有18万的packages。国内的镜像是淘宝所提供的CNPM<a href=\"http://npm.taobao.org/\">[2]</a>，与NPM相同，它会每隔10分钟就同步一次。</p>\n<h1 id=\"一些常用命令\"><a href=\"#一些常用命令\" class=\"headerlink\" title=\"一些常用命令\"></a>一些常用命令</h1><ul>\n<li><code>npm -v</code>: 查看npm安装的版本</li>\n<li><code>npm init</code>: 引导你创建一个package.json文件，包括名称、版本、作者这些信息等</li>\n<li><code>npm install &lt;modulename&gt;</code>: 安装模块</li>\n<li><code>npm install &lt;modulename&gt; -g</code>: 安装全局模块</li>\n<li><code>npm install &lt;modulename&gt;@1.0.0</code>: 安装指定版本的模块</li>\n<li><p><code>npm install &lt;modulename&gt; -save</code>: 安装模块并添加到package.json依赖中</p>\n</li>\n<li><p><code>npm uninstall &lt;modulename&gt;</code>: 卸载模块</p>\n</li>\n<li><p><code>npm cache clean</code>: 清除缓存</p>\n</li>\n<li><p><code>npm help</code>: 查看帮助命令</p>\n</li>\n<li><code>npm ls</code>: 查看当前目录安装的依赖</li>\n<li><code>npm ls -g</code>: 查看全局目录安装的依赖</li>\n</ul>","more":"<ul>\n<li><code>npm view &lt;modulename&gt;</code>: 查看包的package.json</li>\n<li><code>npm view &lt;modulename&gt; dependencies</code>: 查看包的依赖关系</li>\n<li><p><code>npm view &lt;modulename&gt; repository.url</code>: 查看包的源文件地址</p>\n</li>\n<li><p><code>npm update &lt;modulename&gt;</code>: 更新模块</p>\n</li>\n<li><code>npm remove &lt;modulename&gt;</code>: 移除模块</li>\n</ul>\n<h1 id=\"题外话CNPM\"><a href=\"#题外话CNPM\" class=\"headerlink\" title=\"题外话CNPM\"></a>题外话CNPM</h1><p>有时候会出现NPM无法使用的情况，此时可以尝试使用CNPM解决此问题。</p>\n<h2 id=\"淘宝NPM镜像\"><a href=\"#淘宝NPM镜像\" class=\"headerlink\" title=\"淘宝NPM镜像\"></a>淘宝NPM镜像</h2><p>这是一个完整 <code>npmjs.org</code> 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h2><p>与NPM类似，将<code>npm install &lt;...&gt;</code>改为<code>cpm install &lt;...&gt;</code></p>\n<h1 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h1><p>更多命令参考文档<a href=\"https://docs.npmjs.com/\">[3]</a></p>","sticky":0},{"title":"使用Hexo + NexT搭建静态博客","date":"2015-09-18T07:06:37.000Z","_content":"# 前言\n[Github ](https://github.com/)为广大开发者提供了一个非常好的平台，不仅是代码的开源，同时[ Github ](https://github.com/)还提供了开发者可以在[ Github ](https://github.com/)上建立自己的站点（GithubPage）的一个非常有意思的功能。这个功能的局限是只能创建静态的网站，那么我们可以使用一些工具来快速创建这一网站。\n本文旨在帮助刚接触[ Github ](https://github.com/)新手，想利用[ Github ](https://github.com/)来创建自己的站点、个人博客等。大神可以忽视__(:з」∠)__。\n\n# 准备\n你需要在[ Github ](https://github.com/)上创建一个属于自己的账户，然后新建一个仓库（`new repository`），并命名为 `YourSiteName.github.io/com`，此时[ Github ](https://github.com/)会帮助你初始化一个静态网页，你可以根据自己的喜好选择一些模版（~~这都不是重点~~），接着尝试访问下你所建的站点，成功后就可以开始动工了。\n\n# 关于 Hexo\n* **A fast, simple & powerful blog framework**\n* **快速，简单而高效的静态博客框架**\n * **超快速度：** Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n * **支持 Markdown：** Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。\n * **一键部署：** 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。\n * **丰富的插件：** Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。\n\n# 关于NexT\n![Theme-NexT](/blog/images/article_img/hexo-next.jpg)\n* **NexT is built for easily use with elegant appearance. First things first, always keep things simple**\n* **NexT 主旨在于简洁优雅且易于使用，所以首先要尽量确保 NexT 的简洁易用性。**\n\n这是一个扩展主题，由[ iissnan ](https://github.com/iissnan)开发，`精于心，简于形`的理念。\n\n<!-- more -->\n\n# 正题\n上面是对搭建博客的一些技术了解，接下来进入正题。\n\n## Hexo 初始化博客框架\n### 1. 安装 Hexo\nHexo 安装和搭建依赖[ Nodejs ](https://nodejs.org/en/)和[ Git ](http://git-scm.com/)，可自行下载。\n```\n$ npm install -g hexo-cli\n```\n\n### 2. 初始化框架\n```\n$ hexo init <yourFolder>\n$ cd <yourFolder>\n$ npm install\n```\n 初始化完成大概的目录：\n```\n.\n├── _config.yml //网站的 配置 信息，您可以在此配置大部分的参数。\n├── package.json\n├── scaffolds \t//模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n├── source \t//资源文件夹是存放用户资源的地方。\n|   ├── _drafts\n|   └── _posts\n└── themes \t//主题 文件夹。Hexo 会根据主题来生成静态页面。\n```\n\n### 3. 新建文章（创建一个 Hello World）\n```\n$ hexo new \"Hello World\"\n```\n 在 `/source/_post` 里添加 `hello-world.md` 文件，之后新建的文章都将存放在此目录下。\n\n### 4. 生成网站\n```\n$ hexo generate\n```\n 此时会将 `/source` 的 `.md` 文件生成到 `/public` 中，形成网站的静态文件。\n\n### 5. 服务器\n```\n$ hexo server -p 3000\n```\n 输入 `http://localhost:3000` 即可查看网站。\n\n### 6. 部署网站\n```\n$ hexo deploy\n```\n 部署网站之前需要生成静态文件，即可以用 `$ hexo generate -d` 直接生成并部署。此时需要在 `_config.yml` 中配置你所要部署的站点：\n ```\n ## Docs: http://hexo.io/docs/deployment.html\n\tdeploy:\n\t  type: git\n\t  repo: git@github.com:YourRepository.git\n\t  branch: master\n  ```\n### 7. 更多\n* 官网 - [[Hexo]](https://hexo.io/zh-cn/)\n* 配置相关 - [[Hexo | 配置]](https://hexo.io/zh-cn/docs/configuration.html)\n* 更多的命令 - [[Hexo | 指令]](https://hexo.io/zh-cn/docs/commands.html)\n\n那么到此为止网站的雏形算是完成了，接下来你就要自己去管理和完善个人网站了。\n\n## 使用 NexT 主题让站点更酷炫\n### 1. 使用\n```\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n 从Next的 `Gihub` 仓库中获取最新版本。\n\n### 2. 启用\n需要修改 `/root/_config.yml` 配置项 `theme`：\n```\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: next\n```\n\n### 3. 验证是否启用\n```\n$ hexo s --debug\n```\n 访问 `http://localhost:4000`，确保站点正确运行。（~~此命令可以做平时预览用~~）\n\n### 4. 更多\n* Next官网 - [[NexT]](http://theme-next.iissnan.com/)\n* 主题设定 - [[NexT | 主题设定]](http://theme-next.iissnan.com/theme-settings.html)\n* 第三方服务 - [[NexT | 第三方服务]](http://theme-next.iissnan.com/third-party-services.html)\n\n启用 `NexT` 主题成功，那么你的网站变得酷炫（简约）。\n\n# 最后\n[我的博客](http://jovey-zheng.github.io/blog)\n[NexT 官方实例](http://notes.iissnan.com/)\n\n** 有任何疑问和建议可以留言，将在第一时间为你解答 **","source":"_posts/article-6.md","raw":"title: 使用Hexo + NexT搭建静态博客\ndate: 2015-09-18 15:06:37\ncategories:\n  - 笔记随笔\ntags:\n  - Hexo\n  - NexT\n  - github\n  - 博客\n---\n# 前言\n[Github ](https://github.com/)为广大开发者提供了一个非常好的平台，不仅是代码的开源，同时[ Github ](https://github.com/)还提供了开发者可以在[ Github ](https://github.com/)上建立自己的站点（GithubPage）的一个非常有意思的功能。这个功能的局限是只能创建静态的网站，那么我们可以使用一些工具来快速创建这一网站。\n本文旨在帮助刚接触[ Github ](https://github.com/)新手，想利用[ Github ](https://github.com/)来创建自己的站点、个人博客等。大神可以忽视__(:з」∠)__。\n\n# 准备\n你需要在[ Github ](https://github.com/)上创建一个属于自己的账户，然后新建一个仓库（`new repository`），并命名为 `YourSiteName.github.io/com`，此时[ Github ](https://github.com/)会帮助你初始化一个静态网页，你可以根据自己的喜好选择一些模版（~~这都不是重点~~），接着尝试访问下你所建的站点，成功后就可以开始动工了。\n\n# 关于 Hexo\n* **A fast, simple & powerful blog framework**\n* **快速，简单而高效的静态博客框架**\n * **超快速度：** Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n * **支持 Markdown：** Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。\n * **一键部署：** 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。\n * **丰富的插件：** Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。\n\n# 关于NexT\n![Theme-NexT](/blog/images/article_img/hexo-next.jpg)\n* **NexT is built for easily use with elegant appearance. First things first, always keep things simple**\n* **NexT 主旨在于简洁优雅且易于使用，所以首先要尽量确保 NexT 的简洁易用性。**\n\n这是一个扩展主题，由[ iissnan ](https://github.com/iissnan)开发，`精于心，简于形`的理念。\n\n<!-- more -->\n\n# 正题\n上面是对搭建博客的一些技术了解，接下来进入正题。\n\n## Hexo 初始化博客框架\n### 1. 安装 Hexo\nHexo 安装和搭建依赖[ Nodejs ](https://nodejs.org/en/)和[ Git ](http://git-scm.com/)，可自行下载。\n```\n$ npm install -g hexo-cli\n```\n\n### 2. 初始化框架\n```\n$ hexo init <yourFolder>\n$ cd <yourFolder>\n$ npm install\n```\n 初始化完成大概的目录：\n```\n.\n├── _config.yml //网站的 配置 信息，您可以在此配置大部分的参数。\n├── package.json\n├── scaffolds \t//模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n├── source \t//资源文件夹是存放用户资源的地方。\n|   ├── _drafts\n|   └── _posts\n└── themes \t//主题 文件夹。Hexo 会根据主题来生成静态页面。\n```\n\n### 3. 新建文章（创建一个 Hello World）\n```\n$ hexo new \"Hello World\"\n```\n 在 `/source/_post` 里添加 `hello-world.md` 文件，之后新建的文章都将存放在此目录下。\n\n### 4. 生成网站\n```\n$ hexo generate\n```\n 此时会将 `/source` 的 `.md` 文件生成到 `/public` 中，形成网站的静态文件。\n\n### 5. 服务器\n```\n$ hexo server -p 3000\n```\n 输入 `http://localhost:3000` 即可查看网站。\n\n### 6. 部署网站\n```\n$ hexo deploy\n```\n 部署网站之前需要生成静态文件，即可以用 `$ hexo generate -d` 直接生成并部署。此时需要在 `_config.yml` 中配置你所要部署的站点：\n ```\n ## Docs: http://hexo.io/docs/deployment.html\n\tdeploy:\n\t  type: git\n\t  repo: git@github.com:YourRepository.git\n\t  branch: master\n  ```\n### 7. 更多\n* 官网 - [[Hexo]](https://hexo.io/zh-cn/)\n* 配置相关 - [[Hexo | 配置]](https://hexo.io/zh-cn/docs/configuration.html)\n* 更多的命令 - [[Hexo | 指令]](https://hexo.io/zh-cn/docs/commands.html)\n\n那么到此为止网站的雏形算是完成了，接下来你就要自己去管理和完善个人网站了。\n\n## 使用 NexT 主题让站点更酷炫\n### 1. 使用\n```\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n 从Next的 `Gihub` 仓库中获取最新版本。\n\n### 2. 启用\n需要修改 `/root/_config.yml` 配置项 `theme`：\n```\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: next\n```\n\n### 3. 验证是否启用\n```\n$ hexo s --debug\n```\n 访问 `http://localhost:4000`，确保站点正确运行。（~~此命令可以做平时预览用~~）\n\n### 4. 更多\n* Next官网 - [[NexT]](http://theme-next.iissnan.com/)\n* 主题设定 - [[NexT | 主题设定]](http://theme-next.iissnan.com/theme-settings.html)\n* 第三方服务 - [[NexT | 第三方服务]](http://theme-next.iissnan.com/third-party-services.html)\n\n启用 `NexT` 主题成功，那么你的网站变得酷炫（简约）。\n\n# 最后\n[我的博客](http://jovey-zheng.github.io/blog)\n[NexT 官方实例](http://notes.iissnan.com/)\n\n** 有任何疑问和建议可以留言，将在第一时间为你解答 **","slug":"article-6","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7en9001awnprxqq9cgp4","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github </a>为广大开发者提供了一个非常好的平台，不仅是代码的开源，同时<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\"> Github </a>还提供了开发者可以在<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\"> Github </a>上建立自己的站点（GithubPage）的一个非常有意思的功能。这个功能的局限是只能创建静态的网站，那么我们可以使用一些工具来快速创建这一网站。<br>本文旨在帮助刚接触<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\"> Github </a>新手，想利用<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\"> Github </a>来创建自己的站点、个人博客等。大神可以忽视<strong>(:з」∠)</strong>。</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>你需要在<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\"> Github </a>上创建一个属于自己的账户，然后新建一个仓库（<code>new repository</code>），并命名为 <code>YourSiteName.github.io/com</code>，此时<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\"> Github </a>会帮助你初始化一个静态网页，你可以根据自己的喜好选择一些模版（<del>这都不是重点</del>），接着尝试访问下你所建的站点，成功后就可以开始动工了。</p>\n<h1 id=\"关于-Hexo\"><a href=\"#关于-Hexo\" class=\"headerlink\" title=\"关于 Hexo\"></a>关于 Hexo</h1><ul>\n<li><strong>A fast, simple &amp; powerful blog framework</strong></li>\n<li><strong>快速，简单而高效的静态博客框架</strong><ul>\n<li><strong>超快速度：</strong> Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li>\n<li><strong>支持 Markdown：</strong> Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li>\n<li><strong>一键部署：</strong> 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</li>\n<li><strong>丰富的插件：</strong> Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"关于NexT\"><a href=\"#关于NexT\" class=\"headerlink\" title=\"关于NexT\"></a>关于NexT</h1><p><img src=\"/blog/images/article_img/hexo-next.jpg\" alt=\"Theme-NexT\"></p>\n<ul>\n<li><strong>NexT is built for easily use with elegant appearance. First things first, always keep things simple</strong></li>\n<li><strong>NexT 主旨在于简洁优雅且易于使用，所以首先要尽量确保 NexT 的简洁易用性。</strong></li>\n</ul>\n<p>这是一个扩展主题，由<a href=\"https://github.com/iissnan\" target=\"_blank\" rel=\"external\"> iissnan </a>开发，<code>精于心，简于形</code>的理念。</p>\n<a id=\"more\"></a>\n<h1 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h1><p>上面是对搭建博客的一些技术了解，接下来进入正题。</p>\n<h2 id=\"Hexo-初始化博客框架\"><a href=\"#Hexo-初始化博客框架\" class=\"headerlink\" title=\"Hexo 初始化博客框架\"></a>Hexo 初始化博客框架</h2><h3 id=\"1-安装-Hexo\"><a href=\"#1-安装-Hexo\" class=\"headerlink\" title=\"1. 安装 Hexo\"></a>1. 安装 Hexo</h3><p>Hexo 安装和搭建依赖<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\"> Nodejs </a>和<a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\"> Git </a>，可自行下载。<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-<span class=\"keyword\">cli</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-初始化框架\"><a href=\"#2-初始化框架\" class=\"headerlink\" title=\"2. 初始化框架\"></a>2. 初始化框架</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo init &lt;yourFolder&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>cd &lt;yourFolder&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>npm install</span><br></pre></td></tr></table></figure>\n<p> 初始化完成大概的目录：<br><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml <span class=\"comment\">//网站的 配置 信息，您可以在此配置大部分的参数。</span></span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds \t<span class=\"comment\">//模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</span></span><br><span class=\"line\">├── source \t<span class=\"comment\">//资源文件夹是存放用户资源的地方。</span></span><br><span class=\"line\"><span class=\"string\">|   ├── _drafts</span></span><br><span class=\"line\"><span class=\"string\">|   └── _posts</span></span><br><span class=\"line\">└── themes \t<span class=\"comment\">//主题 文件夹。Hexo 会根据主题来生成静态页面。</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-新建文章（创建一个-Hello-World）\"><a href=\"#3-新建文章（创建一个-Hello-World）\" class=\"headerlink\" title=\"3. 新建文章（创建一个 Hello World）\"></a>3. 新建文章（创建一个 Hello World）</h3><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> <span class=\"string\">\"Hello World\"</span></span><br></pre></td></tr></table></figure>\n<p> 在 <code>/source/_post</code> 里添加 <code>hello-world.md</code> 文件，之后新建的文章都将存放在此目录下。</p>\n<h3 id=\"4-生成网站\"><a href=\"#4-生成网站\" class=\"headerlink\" title=\"4. 生成网站\"></a>4. 生成网站</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">generate</span></span><br></pre></td></tr></table></figure>\n<p> 此时会将 <code>/source</code> 的 <code>.md</code> 文件生成到 <code>/public</code> 中，形成网站的静态文件。</p>\n<h3 id=\"5-服务器\"><a href=\"#5-服务器\" class=\"headerlink\" title=\"5. 服务器\"></a>5. 服务器</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server -<span class=\"selector-tag\">p</span> <span class=\"number\">3000</span></span><br></pre></td></tr></table></figure>\n<p> 输入 <code>http://localhost:3000</code> 即可查看网站。</p>\n<h3 id=\"6-部署网站\"><a href=\"#6-部署网站\" class=\"headerlink\" title=\"6. 部署网站\"></a>6. 部署网站</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>\n<p> 部署网站之前需要生成静态文件，即可以用 <code>$ hexo generate -d</code> 直接生成并部署。此时需要在 <code>_config.yml</code> 中配置你所要部署的站点：<br> <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">## Docs: http:<span class=\"comment\">//hexo.io/docs/deployment.html</span></span></span><br><span class=\"line\"><span class=\"symbol\">deploy:</span></span><br><span class=\"line\"><span class=\"symbol\">  type:</span> git</span><br><span class=\"line\"><span class=\"symbol\">  repo:</span> git@github.com:YourRepository.git</span><br><span class=\"line\"><span class=\"symbol\">  branch:</span> master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-更多\"><a href=\"#7-更多\" class=\"headerlink\" title=\"7. 更多\"></a>7. 更多</h3><ul>\n<li>官网 - <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">[Hexo]</a></li>\n<li>配置相关 - <a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">[Hexo | 配置]</a></li>\n<li>更多的命令 - <a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"external\">[Hexo | 指令]</a></li>\n</ul>\n<p>那么到此为止网站的雏形算是完成了，接下来你就要自己去管理和完善个人网站了。</p>\n<h2 id=\"使用-NexT-主题让站点更酷炫\"><a href=\"#使用-NexT-主题让站点更酷炫\" class=\"headerlink\" title=\"使用 NexT 主题让站点更酷炫\"></a>使用 NexT 主题让站点更酷炫</h2><h3 id=\"1-使用\"><a href=\"#1-使用\" class=\"headerlink\" title=\"1. 使用\"></a>1. 使用</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cd</span> your-hexo-site</span><br><span class=\"line\">$ git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/iissnan/hexo-theme-<span class=\"keyword\">next</span> themes/<span class=\"keyword\">next</span></span><br></pre></td></tr></table></figure>\n<p> 从Next的 <code>Gihub</code> 仓库中获取最新版本。</p>\n<h3 id=\"2-启用\"><a href=\"#2-启用\" class=\"headerlink\" title=\"2. 启用\"></a>2. 启用</h3><p>需要修改 <code>/root/_config.yml</code> 配置项 <code>theme</code>：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># Extensions</span></span><br><span class=\"line\"><span class=\"meta\">## Plugins: http:<span class=\"comment\">//hexo.io/plugins/</span></span></span><br><span class=\"line\"><span class=\"meta\">## Themes: http:<span class=\"comment\">//hexo.io/themes/</span></span></span><br><span class=\"line\"><span class=\"symbol\">theme:</span> next</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-验证是否启用\"><a href=\"#3-验证是否启用\" class=\"headerlink\" title=\"3. 验证是否启用\"></a>3. 验证是否启用</h3><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s <span class=\"comment\">--debug</span></span><br></pre></td></tr></table></figure>\n<p> 访问 <code>http://localhost:4000</code>，确保站点正确运行。（<del>此命令可以做平时预览用</del>）</p>\n<h3 id=\"4-更多\"><a href=\"#4-更多\" class=\"headerlink\" title=\"4. 更多\"></a>4. 更多</h3><ul>\n<li>Next官网 - <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">[NexT]</a></li>\n<li>主题设定 - <a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">[NexT | 主题设定]</a></li>\n<li>第三方服务 - <a href=\"http://theme-next.iissnan.com/third-party-services.html\" target=\"_blank\" rel=\"external\">[NexT | 第三方服务]</a></li>\n</ul>\n<p>启用 <code>NexT</code> 主题成功，那么你的网站变得酷炫（简约）。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p><a href=\"http://jovey-zheng.github.io/blog\" target=\"_blank\" rel=\"external\">我的博客</a><br><a href=\"http://notes.iissnan.com/\" target=\"_blank\" rel=\"external\">NexT 官方实例</a></p>\n<p><strong> 有任何疑问和建议可以留言，将在第一时间为你解答 </strong></p>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"https://github.com/\">Github </a>为广大开发者提供了一个非常好的平台，不仅是代码的开源，同时<a href=\"https://github.com/\"> Github </a>还提供了开发者可以在<a href=\"https://github.com/\"> Github </a>上建立自己的站点（GithubPage）的一个非常有意思的功能。这个功能的局限是只能创建静态的网站，那么我们可以使用一些工具来快速创建这一网站。<br>本文旨在帮助刚接触<a href=\"https://github.com/\"> Github </a>新手，想利用<a href=\"https://github.com/\"> Github </a>来创建自己的站点、个人博客等。大神可以忽视<strong>(:з」∠)</strong>。</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>你需要在<a href=\"https://github.com/\"> Github </a>上创建一个属于自己的账户，然后新建一个仓库（<code>new repository</code>），并命名为 <code>YourSiteName.github.io/com</code>，此时<a href=\"https://github.com/\"> Github </a>会帮助你初始化一个静态网页，你可以根据自己的喜好选择一些模版（<del>这都不是重点</del>），接着尝试访问下你所建的站点，成功后就可以开始动工了。</p>\n<h1 id=\"关于-Hexo\"><a href=\"#关于-Hexo\" class=\"headerlink\" title=\"关于 Hexo\"></a>关于 Hexo</h1><ul>\n<li><strong>A fast, simple &amp; powerful blog framework</strong></li>\n<li><strong>快速，简单而高效的静态博客框架</strong><ul>\n<li><strong>超快速度：</strong> Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li>\n<li><strong>支持 Markdown：</strong> Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li>\n<li><strong>一键部署：</strong> 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</li>\n<li><strong>丰富的插件：</strong> Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"关于NexT\"><a href=\"#关于NexT\" class=\"headerlink\" title=\"关于NexT\"></a>关于NexT</h1><p><img src=\"/blog/images/article_img/hexo-next.jpg\" alt=\"Theme-NexT\"></p>\n<ul>\n<li><strong>NexT is built for easily use with elegant appearance. First things first, always keep things simple</strong></li>\n<li><strong>NexT 主旨在于简洁优雅且易于使用，所以首先要尽量确保 NexT 的简洁易用性。</strong></li>\n</ul>\n<p>这是一个扩展主题，由<a href=\"https://github.com/iissnan\"> iissnan </a>开发，<code>精于心，简于形</code>的理念。</p>","more":"<h1 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h1><p>上面是对搭建博客的一些技术了解，接下来进入正题。</p>\n<h2 id=\"Hexo-初始化博客框架\"><a href=\"#Hexo-初始化博客框架\" class=\"headerlink\" title=\"Hexo 初始化博客框架\"></a>Hexo 初始化博客框架</h2><h3 id=\"1-安装-Hexo\"><a href=\"#1-安装-Hexo\" class=\"headerlink\" title=\"1. 安装 Hexo\"></a>1. 安装 Hexo</h3><p>Hexo 安装和搭建依赖<a href=\"https://nodejs.org/en/\"> Nodejs </a>和<a href=\"http://git-scm.com/\"> Git </a>，可自行下载。<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-<span class=\"keyword\">cli</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-初始化框架\"><a href=\"#2-初始化框架\" class=\"headerlink\" title=\"2. 初始化框架\"></a>2. 初始化框架</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo init &lt;yourFolder&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>cd &lt;yourFolder&gt;</span><br><span class=\"line\"><span class=\"variable\">$ </span>npm install</span><br></pre></td></tr></table></figure>\n<p> 初始化完成大概的目录：<br><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml <span class=\"comment\">//网站的 配置 信息，您可以在此配置大部分的参数。</span></span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds \t<span class=\"comment\">//模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</span></span><br><span class=\"line\">├── source \t<span class=\"comment\">//资源文件夹是存放用户资源的地方。</span></span><br><span class=\"line\"><span class=\"string\">|   ├── _drafts</span></span><br><span class=\"line\"><span class=\"string\">|   └── _posts</span></span><br><span class=\"line\">└── themes \t<span class=\"comment\">//主题 文件夹。Hexo 会根据主题来生成静态页面。</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-新建文章（创建一个-Hello-World）\"><a href=\"#3-新建文章（创建一个-Hello-World）\" class=\"headerlink\" title=\"3. 新建文章（创建一个 Hello World）\"></a>3. 新建文章（创建一个 Hello World）</h3><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> <span class=\"string\">\"Hello World\"</span></span><br></pre></td></tr></table></figure>\n<p> 在 <code>/source/_post</code> 里添加 <code>hello-world.md</code> 文件，之后新建的文章都将存放在此目录下。</p>\n<h3 id=\"4-生成网站\"><a href=\"#4-生成网站\" class=\"headerlink\" title=\"4. 生成网站\"></a>4. 生成网站</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">generate</span></span><br></pre></td></tr></table></figure>\n<p> 此时会将 <code>/source</code> 的 <code>.md</code> 文件生成到 <code>/public</code> 中，形成网站的静态文件。</p>\n<h3 id=\"5-服务器\"><a href=\"#5-服务器\" class=\"headerlink\" title=\"5. 服务器\"></a>5. 服务器</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server -<span class=\"selector-tag\">p</span> <span class=\"number\">3000</span></span><br></pre></td></tr></table></figure>\n<p> 输入 <code>http://localhost:3000</code> 即可查看网站。</p>\n<h3 id=\"6-部署网站\"><a href=\"#6-部署网站\" class=\"headerlink\" title=\"6. 部署网站\"></a>6. 部署网站</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>\n<p> 部署网站之前需要生成静态文件，即可以用 <code>$ hexo generate -d</code> 直接生成并部署。此时需要在 <code>_config.yml</code> 中配置你所要部署的站点：<br> <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">## Docs: http:<span class=\"comment\">//hexo.io/docs/deployment.html</span></span></span><br><span class=\"line\"><span class=\"symbol\">deploy:</span></span><br><span class=\"line\"><span class=\"symbol\">  type:</span> git</span><br><span class=\"line\"><span class=\"symbol\">  repo:</span> git@github.com:YourRepository.git</span><br><span class=\"line\"><span class=\"symbol\">  branch:</span> master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-更多\"><a href=\"#7-更多\" class=\"headerlink\" title=\"7. 更多\"></a>7. 更多</h3><ul>\n<li>官网 - <a href=\"https://hexo.io/zh-cn/\">[Hexo]</a></li>\n<li>配置相关 - <a href=\"https://hexo.io/zh-cn/docs/configuration.html\">[Hexo | 配置]</a></li>\n<li>更多的命令 - <a href=\"https://hexo.io/zh-cn/docs/commands.html\">[Hexo | 指令]</a></li>\n</ul>\n<p>那么到此为止网站的雏形算是完成了，接下来你就要自己去管理和完善个人网站了。</p>\n<h2 id=\"使用-NexT-主题让站点更酷炫\"><a href=\"#使用-NexT-主题让站点更酷炫\" class=\"headerlink\" title=\"使用 NexT 主题让站点更酷炫\"></a>使用 NexT 主题让站点更酷炫</h2><h3 id=\"1-使用\"><a href=\"#1-使用\" class=\"headerlink\" title=\"1. 使用\"></a>1. 使用</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cd</span> your-hexo-site</span><br><span class=\"line\">$ git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/iissnan/hexo-theme-<span class=\"keyword\">next</span> themes/<span class=\"keyword\">next</span></span><br></pre></td></tr></table></figure>\n<p> 从Next的 <code>Gihub</code> 仓库中获取最新版本。</p>\n<h3 id=\"2-启用\"><a href=\"#2-启用\" class=\"headerlink\" title=\"2. 启用\"></a>2. 启用</h3><p>需要修改 <code>/root/_config.yml</code> 配置项 <code>theme</code>：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># Extensions</span></span><br><span class=\"line\"><span class=\"meta\">## Plugins: http:<span class=\"comment\">//hexo.io/plugins/</span></span></span><br><span class=\"line\"><span class=\"meta\">## Themes: http:<span class=\"comment\">//hexo.io/themes/</span></span></span><br><span class=\"line\"><span class=\"symbol\">theme:</span> next</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-验证是否启用\"><a href=\"#3-验证是否启用\" class=\"headerlink\" title=\"3. 验证是否启用\"></a>3. 验证是否启用</h3><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s <span class=\"comment\">--debug</span></span><br></pre></td></tr></table></figure>\n<p> 访问 <code>http://localhost:4000</code>，确保站点正确运行。（<del>此命令可以做平时预览用</del>）</p>\n<h3 id=\"4-更多\"><a href=\"#4-更多\" class=\"headerlink\" title=\"4. 更多\"></a>4. 更多</h3><ul>\n<li>Next官网 - <a href=\"http://theme-next.iissnan.com/\">[NexT]</a></li>\n<li>主题设定 - <a href=\"http://theme-next.iissnan.com/theme-settings.html\">[NexT | 主题设定]</a></li>\n<li>第三方服务 - <a href=\"http://theme-next.iissnan.com/third-party-services.html\">[NexT | 第三方服务]</a></li>\n</ul>\n<p>启用 <code>NexT</code> 主题成功，那么你的网站变得酷炫（简约）。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p><a href=\"http://jovey-zheng.github.io/blog\">我的博客</a><br><a href=\"http://notes.iissnan.com/\">NexT 官方实例</a></p>\n<p><strong> 有任何疑问和建议可以留言，将在第一时间为你解答 </strong></p>","sticky":0},{"title":"更新Github的Fork代码","date":"2015-10-06T08:46:12.000Z","_content":"[github](https://github.com/) 提供了一个非常便捷的功能叫 **Fork**，即用户可以很方便的从别的仓库中复制一份代码到自己的名下。但是有一个不足是 [github](https://github.com/) 并不提供自动更新功能，那么此时就需要我们自己手动更新这个 **Fork** 仓库代码。\n\n# 基本方法\n1. 安装 [github客户端](https://desktop.github.com/) 或者 [Git](http://www.git-scm.com/download/)。\n2. **clone** 需要更新的 **Fork** 分支到本地：\n - github客户端：直接打开客户端，添加 **Fork** 分支，然后** clone**。\n - Git命令：\n  ```\n  $ git clone git@github.com:yourname/repos.git <yourfolder>\n  ```\n **注**：github客户端 **clone** 成功后，可以使用 **git bash** 进行命令行输入。\n\n3. 将源分支添加到该仓库的远程分支中：\n ```\n $ git remote add author git@github.com:author/repos.git\n ```\n 此时可以使用 `$ git remote -v` 查看远程分支列表，结果如下：\n ```\n author git@github.com:author/repos.git (fetch)\n author git@github.com:author/repos.git (push)\n origin  git@github.com:yourname/repos.git (fetch)\n origin  git@github.com:yourname/repos.git (push)\n ```\n\n4. **fetch** 源仓库代码的最新版本到本地：\n```\n$ git fetch author   //这里的`author`是上面从源分支添加到远程分支的分支名\n```\n\n5. 合并两个版本的代码：\n```\n$ git merge author/master\n```\n\n6. 将本地代码更新到 **Fork** 仓库：\n```\n$ git push origin master\n```\n\n# 其他方法\n重复上述的1-3，然后使用 `git pull author master` 把源仓库的最新代码拉下来，然后使用第6步的方法，将代码推到自己的 fork 的仓库中。","source":"_posts/article-7.md","raw":"title: 更新Github的Fork代码\ndate: 2015-10-06 16:46:12\ncategories:\n  - 笔记随笔\ntags:\n  - Git\n  - 项目管理\n---\n[github](https://github.com/) 提供了一个非常便捷的功能叫 **Fork**，即用户可以很方便的从别的仓库中复制一份代码到自己的名下。但是有一个不足是 [github](https://github.com/) 并不提供自动更新功能，那么此时就需要我们自己手动更新这个 **Fork** 仓库代码。\n\n# 基本方法\n1. 安装 [github客户端](https://desktop.github.com/) 或者 [Git](http://www.git-scm.com/download/)。\n2. **clone** 需要更新的 **Fork** 分支到本地：\n - github客户端：直接打开客户端，添加 **Fork** 分支，然后** clone**。\n - Git命令：\n  ```\n  $ git clone git@github.com:yourname/repos.git <yourfolder>\n  ```\n **注**：github客户端 **clone** 成功后，可以使用 **git bash** 进行命令行输入。\n\n3. 将源分支添加到该仓库的远程分支中：\n ```\n $ git remote add author git@github.com:author/repos.git\n ```\n 此时可以使用 `$ git remote -v` 查看远程分支列表，结果如下：\n ```\n author git@github.com:author/repos.git (fetch)\n author git@github.com:author/repos.git (push)\n origin  git@github.com:yourname/repos.git (fetch)\n origin  git@github.com:yourname/repos.git (push)\n ```\n\n4. **fetch** 源仓库代码的最新版本到本地：\n```\n$ git fetch author   //这里的`author`是上面从源分支添加到远程分支的分支名\n```\n\n5. 合并两个版本的代码：\n```\n$ git merge author/master\n```\n\n6. 将本地代码更新到 **Fork** 仓库：\n```\n$ git push origin master\n```\n\n# 其他方法\n重复上述的1-3，然后使用 `git pull author master` 把源仓库的最新代码拉下来，然后使用第6步的方法，将代码推到自己的 fork 的仓库中。","slug":"article-7","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7end001dwnpre5t1aq33","content":"<p><a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a> 提供了一个非常便捷的功能叫 <strong>Fork</strong>，即用户可以很方便的从别的仓库中复制一份代码到自己的名下。但是有一个不足是 <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a> 并不提供自动更新功能，那么此时就需要我们自己手动更新这个 <strong>Fork</strong> 仓库代码。</p>\n<h1 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h1><ol>\n<li>安装 <a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"external\">github客户端</a> 或者 <a href=\"http://www.git-scm.com/download/\" target=\"_blank\" rel=\"external\">Git</a>。</li>\n<li><p><strong>clone</strong> 需要更新的 <strong>Fork</strong> 分支到本地：</p>\n<ul>\n<li>github客户端：直接打开客户端，添加 <strong>Fork</strong> 分支，然后<strong> clone</strong>。</li>\n<li>Git命令：<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@github<span class=\"selector-class\">.com</span>:yourname/repos<span class=\"selector-class\">.git</span> &lt;yourfolder&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>注</strong>：github客户端 <strong>clone</strong> 成功后，可以使用 <strong>git bash</strong> 进行命令行输入。</p>\n</li>\n<li><p>将源分支添加到该仓库的远程分支中：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git remote add author git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>author/repos.git</span><br></pre></td></tr></table></figure>\n<p>此时可以使用 <code>$ git remote -v</code> 查看远程分支列表，结果如下：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:author/repos.git (fetch)</span><br><span class=\"line\">author git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:author/repos.git (push)</span><br><span class=\"line\">origin  git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:yourname/repos.git (fetch)</span><br><span class=\"line\">origin  git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:yourname/repos.git (push)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>fetch</strong> 源仓库代码的最新版本到本地：</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch author   //这里的`author`是上面从源分支添加到远程分支的分支名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并两个版本的代码：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">merge</span> author/<span class=\"keyword\">master</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将本地代码更新到 <strong>Fork</strong> 仓库：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h1><p>重复上述的1-3，然后使用 <code>git pull author master</code> 把源仓库的最新代码拉下来，然后使用第6步的方法，将代码推到自己的 fork 的仓库中。</p>\n","excerpt":"","more":"<p><a href=\"https://github.com/\">github</a> 提供了一个非常便捷的功能叫 <strong>Fork</strong>，即用户可以很方便的从别的仓库中复制一份代码到自己的名下。但是有一个不足是 <a href=\"https://github.com/\">github</a> 并不提供自动更新功能，那么此时就需要我们自己手动更新这个 <strong>Fork</strong> 仓库代码。</p>\n<h1 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h1><ol>\n<li>安装 <a href=\"https://desktop.github.com/\">github客户端</a> 或者 <a href=\"http://www.git-scm.com/download/\">Git</a>。</li>\n<li><p><strong>clone</strong> 需要更新的 <strong>Fork</strong> 分支到本地：</p>\n<ul>\n<li>github客户端：直接打开客户端，添加 <strong>Fork</strong> 分支，然后<strong> clone</strong>。</li>\n<li>Git命令：<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@github<span class=\"selector-class\">.com</span>:yourname/repos<span class=\"selector-class\">.git</span> &lt;yourfolder&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>注</strong>：github客户端 <strong>clone</strong> 成功后，可以使用 <strong>git bash</strong> 进行命令行输入。</p>\n</li>\n<li><p>将源分支添加到该仓库的远程分支中：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git remote add author git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>author/repos.git</span><br></pre></td></tr></table></figure>\n<p>此时可以使用 <code>$ git remote -v</code> 查看远程分支列表，结果如下：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:author/repos.git (fetch)</span><br><span class=\"line\">author git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:author/repos.git (push)</span><br><span class=\"line\">origin  git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:yourname/repos.git (fetch)</span><br><span class=\"line\">origin  git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:yourname/repos.git (push)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>fetch</strong> 源仓库代码的最新版本到本地：</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch author   //这里的`author`是上面从源分支添加到远程分支的分支名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并两个版本的代码：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">merge</span> author/<span class=\"keyword\">master</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将本地代码更新到 <strong>Fork</strong> 仓库：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h1><p>重复上述的1-3，然后使用 <code>git pull author master</code> 把源仓库的最新代码拉下来，然后使用第6步的方法，将代码推到自己的 fork 的仓库中。</p>\n","sticky":0},{"title":"ECharts - 数据图表的使用","date":"2015-10-16T10:14:23.000Z","_content":"![ECharts](/blog/images/article_img/3.png)\n\n# 关于ECharts（[ECharts](http://echarts.baidu.com/doc/about.html)）\nECharts 是百度提供的一款开源、功能强大的数据可视化产品。\n主要提供折线图、柱状图、散点图、K线图、饼图、雷达图、地图、和弦图、力导向布局图、仪表盘以及漏斗图。\n\n# 特性\n- 拖拽重计算\n- 数据视图\n- 多图联动\n- 值域漫游\n- 炫光特效\n……\n\n# 准备\n下载 ECharts 静态包[【echarts-2.2.7】](http://echarts.baidu.com/build/echarts-2.2.7.zip)，也可以直接使用链接进行加载。建议下载静态包，避免官方 **更新新特性** 时造成图表无法正常呈现的问题。\n\n<!-- more -->\n\n# 使用\nECharts的使用很简单，以官方提供的为例分为下面几步：\n#### 1. 新建一个 `test.html` 并放置一个 `div` 来承载图表：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"main\" style=\"height: 400px;\"></div>\n</body>\n</html>\n```\n\n#### 2. 引入 `echarts.js` ：\n\n```\n<script src=\"http://echarts.baidu.com/build/dist/echarts.js\"></script>\n```\n\n#### 3. 添加模块加载器配置 echarts 和所需图表的路径（相对路径为从当前页面链接到echarts.js），引入图表文件见[引入 ECharts2](http://echarts.baidu.com/doc/doc.html#引入ECharts2)：\n\n```\n<script type=\"text/javascript\">\n    // 路径配置\n    require.config({\n        paths: {\n          echarts: 'http://echarts.baidu.com/build/dist'\n        }\n     });\n</script>\n```\n\n#### 4. 动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见[API & Doc](http://echarts.baidu.com/doc/doc.html#Option)：\n\n```\nrequire(\n    [\n        'echarts',\n        'echarts/chart/bar' // 使用柱状图就加载bar模块，按需加载\n    ],\n    function (ec) {\n        // 基于准备好的dom，初始化echarts图表\n        var myChart = ec.init(document.getElementById('main'));\n\n        var option = {\n            tooltip: {\n                show: true\n            },\n            legend: {\n                data:['销量']\n            },\n            xAxis : [\n                {\n                    type : 'category',\n                    data : [\"衬衫\",\"羊毛衫\",\"雪纺衫\",\"裤子\",\"高跟鞋\",\"袜子\"]\n                }\n            ],\n            yAxis : [\n                {\n                    type : 'value'\n                }\n            ],\n            series : [\n                {\n                    \"name\":\"销量\",\n                    \"type\":\"bar\",\n                    \"data\":[5, 20, 40, 10, 10, 20]\n                }\n            ]\n        };\n\n        // 为echarts对象加载数据\n        myChart.setOption(option);\n    }\n);\n```\n\n#### 5. 最后的样子：\n![](/blog/images/article_img/3-1.png)\n\n# 重点- option 部分相关配置说明\n用户可以在 option 配置里自定义图标的样式。\n- title 标题：\n![](/blog/images/article_img/3-2.png)\n```\ntitle : {\n    text: '某地区蒸发量和降水量',  //文本\n    subtext: '纯属虚构'\n}\n```\n- toolbox 便捷的工具：\n![](/blog/images/article_img/3-3.png)\n```\ntoolbox: {\n    show : true,  //是否显示工具栏\n    feature : {  //特性\n        mark : {show: true},  //辅助线\n        dataView : {show: true, readOnly: false},  //数据视图\n        magicType : {show: true, type: ['line', 'bar']},  //切换视图（折线/柱状）\n        restore : {show: true},  //重新加载视图\n        saveAsImage : {show: true}  //保存该视图为图片\n    }\n}\n```\n- series 数据列表：\n```\nseries : [\n{\n    name:'蒸发量',  //名称\n    type:'bar',  //视图类型\n    data:[2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3],  //数据\n    markPoint : {  //标记\n        data : [\n            {type : 'max', name: '最大值'},  //最大值，name为显示文本\n            {type : 'min', name: '最小值'}  //最小值，name为显示文本\n        ]\n    },\n    markLine : {  //标线\n        data : [\n            {type : 'average', name: '平均值'}  //平均值，name为显示文本\n        ]\n    }\n}\n```\n- xAxis ： X 轴\n- yAxis ： Y 轴\n- legend ：\n![](/blog/images/article_img/3-4.png)\n```\nlegend: {\n    orient : 'vertical',  //方向“垂直”，默认从左向右横向排列\n    x : 'left',  //位于 X 轴左侧，默认顶部居中\n    data:['直接访问','邮件营销','联盟广告','视频广告','搜索引擎']  //显示文本\n}\n```\n\n更多配置可在[【实例】](http://echarts.baidu.com/doc/example.html)中点开测试。\n\n# 参考\n- [入门教程](http://echarts.baidu.com/doc/start.html)\n- [实例](http://echarts.baidu.com/doc/example.html)\n- [Fork on github](https://github.com/ecomfe/echarts)","source":"_posts/article-8.md","raw":"title: ECharts - 数据图表的使用\ndate: 2015.10.16 18:14:23\ncategories:\n  - 笔记随笔\ntags:\n - ECharts\n - js\n---\n![ECharts](/blog/images/article_img/3.png)\n\n# 关于ECharts（[ECharts](http://echarts.baidu.com/doc/about.html)）\nECharts 是百度提供的一款开源、功能强大的数据可视化产品。\n主要提供折线图、柱状图、散点图、K线图、饼图、雷达图、地图、和弦图、力导向布局图、仪表盘以及漏斗图。\n\n# 特性\n- 拖拽重计算\n- 数据视图\n- 多图联动\n- 值域漫游\n- 炫光特效\n……\n\n# 准备\n下载 ECharts 静态包[【echarts-2.2.7】](http://echarts.baidu.com/build/echarts-2.2.7.zip)，也可以直接使用链接进行加载。建议下载静态包，避免官方 **更新新特性** 时造成图表无法正常呈现的问题。\n\n<!-- more -->\n\n# 使用\nECharts的使用很简单，以官方提供的为例分为下面几步：\n#### 1. 新建一个 `test.html` 并放置一个 `div` 来承载图表：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"main\" style=\"height: 400px;\"></div>\n</body>\n</html>\n```\n\n#### 2. 引入 `echarts.js` ：\n\n```\n<script src=\"http://echarts.baidu.com/build/dist/echarts.js\"></script>\n```\n\n#### 3. 添加模块加载器配置 echarts 和所需图表的路径（相对路径为从当前页面链接到echarts.js），引入图表文件见[引入 ECharts2](http://echarts.baidu.com/doc/doc.html#引入ECharts2)：\n\n```\n<script type=\"text/javascript\">\n    // 路径配置\n    require.config({\n        paths: {\n          echarts: 'http://echarts.baidu.com/build/dist'\n        }\n     });\n</script>\n```\n\n#### 4. 动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见[API & Doc](http://echarts.baidu.com/doc/doc.html#Option)：\n\n```\nrequire(\n    [\n        'echarts',\n        'echarts/chart/bar' // 使用柱状图就加载bar模块，按需加载\n    ],\n    function (ec) {\n        // 基于准备好的dom，初始化echarts图表\n        var myChart = ec.init(document.getElementById('main'));\n\n        var option = {\n            tooltip: {\n                show: true\n            },\n            legend: {\n                data:['销量']\n            },\n            xAxis : [\n                {\n                    type : 'category',\n                    data : [\"衬衫\",\"羊毛衫\",\"雪纺衫\",\"裤子\",\"高跟鞋\",\"袜子\"]\n                }\n            ],\n            yAxis : [\n                {\n                    type : 'value'\n                }\n            ],\n            series : [\n                {\n                    \"name\":\"销量\",\n                    \"type\":\"bar\",\n                    \"data\":[5, 20, 40, 10, 10, 20]\n                }\n            ]\n        };\n\n        // 为echarts对象加载数据\n        myChart.setOption(option);\n    }\n);\n```\n\n#### 5. 最后的样子：\n![](/blog/images/article_img/3-1.png)\n\n# 重点- option 部分相关配置说明\n用户可以在 option 配置里自定义图标的样式。\n- title 标题：\n![](/blog/images/article_img/3-2.png)\n```\ntitle : {\n    text: '某地区蒸发量和降水量',  //文本\n    subtext: '纯属虚构'\n}\n```\n- toolbox 便捷的工具：\n![](/blog/images/article_img/3-3.png)\n```\ntoolbox: {\n    show : true,  //是否显示工具栏\n    feature : {  //特性\n        mark : {show: true},  //辅助线\n        dataView : {show: true, readOnly: false},  //数据视图\n        magicType : {show: true, type: ['line', 'bar']},  //切换视图（折线/柱状）\n        restore : {show: true},  //重新加载视图\n        saveAsImage : {show: true}  //保存该视图为图片\n    }\n}\n```\n- series 数据列表：\n```\nseries : [\n{\n    name:'蒸发量',  //名称\n    type:'bar',  //视图类型\n    data:[2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3],  //数据\n    markPoint : {  //标记\n        data : [\n            {type : 'max', name: '最大值'},  //最大值，name为显示文本\n            {type : 'min', name: '最小值'}  //最小值，name为显示文本\n        ]\n    },\n    markLine : {  //标线\n        data : [\n            {type : 'average', name: '平均值'}  //平均值，name为显示文本\n        ]\n    }\n}\n```\n- xAxis ： X 轴\n- yAxis ： Y 轴\n- legend ：\n![](/blog/images/article_img/3-4.png)\n```\nlegend: {\n    orient : 'vertical',  //方向“垂直”，默认从左向右横向排列\n    x : 'left',  //位于 X 轴左侧，默认顶部居中\n    data:['直接访问','邮件营销','联盟广告','视频广告','搜索引擎']  //显示文本\n}\n```\n\n更多配置可在[【实例】](http://echarts.baidu.com/doc/example.html)中点开测试。\n\n# 参考\n- [入门教程](http://echarts.baidu.com/doc/start.html)\n- [实例](http://echarts.baidu.com/doc/example.html)\n- [Fork on github](https://github.com/ecomfe/echarts)","slug":"article-8","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7eng001hwnpr4k4yjs3a","content":"<p><img src=\"/blog/images/article_img/3.png\" alt=\"ECharts\"></p>\n<h1 id=\"关于ECharts（ECharts）\"><a href=\"#关于ECharts（ECharts）\" class=\"headerlink\" title=\"关于ECharts（ECharts）\"></a>关于ECharts（<a href=\"http://echarts.baidu.com/doc/about.html\" target=\"_blank\" rel=\"external\">ECharts</a>）</h1><p>ECharts 是百度提供的一款开源、功能强大的数据可视化产品。<br>主要提供折线图、柱状图、散点图、K线图、饼图、雷达图、地图、和弦图、力导向布局图、仪表盘以及漏斗图。</p>\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><ul>\n<li>拖拽重计算</li>\n<li>数据视图</li>\n<li>多图联动</li>\n<li>值域漫游</li>\n<li>炫光特效<br>……</li>\n</ul>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>下载 ECharts 静态包<a href=\"http://echarts.baidu.com/build/echarts-2.2.7.zip\" target=\"_blank\" rel=\"external\">【echarts-2.2.7】</a>，也可以直接使用链接进行加载。建议下载静态包，避免官方 <strong>更新新特性</strong> 时造成图表无法正常呈现的问题。</p>\n<a id=\"more\"></a>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>ECharts的使用很简单，以官方提供的为例分为下面几步：</p>\n<h4 id=\"1-新建一个-test-html-并放置一个-div-来承载图表：\"><a href=\"#1-新建一个-test-html-并放置一个-div-来承载图表：\" class=\"headerlink\" title=\"1. 新建一个 test.html 并放置一个 div 来承载图表：\"></a>1. 新建一个 <code>test.html</code> 并放置一个 <code>div</code> 来承载图表：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 400px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-引入-echarts-js-：\"><a href=\"#2-引入-echarts-js-：\" class=\"headerlink\" title=\"2. 引入 echarts.js ：\"></a>2. 引入 <code>echarts.js</code> ：</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://echarts.baidu.com/build/dist/echarts.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-添加模块加载器配置-echarts-和所需图表的路径（相对路径为从当前页面链接到echarts-js），引入图表文件见引入-ECharts2：\"><a href=\"#3-添加模块加载器配置-echarts-和所需图表的路径（相对路径为从当前页面链接到echarts-js），引入图表文件见引入-ECharts2：\" class=\"headerlink\" title=\"3. 添加模块加载器配置 echarts 和所需图表的路径（相对路径为从当前页面链接到echarts.js），引入图表文件见引入 ECharts2：\"></a>3. 添加模块加载器配置 echarts 和所需图表的路径（相对路径为从当前页面链接到echarts.js），引入图表文件见<a href=\"http://echarts.baidu.com/doc/doc.html#引入ECharts2\" target=\"_blank\" rel=\"external\">引入 ECharts2</a>：</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">    <span class=\"comment\">// 路径配置</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">        paths: &#123;</span><br><span class=\"line\">          echarts: <span class=\"string\">'http://echarts.baidu.com/build/dist'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见API-amp-Doc：\"><a href=\"#4-动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见API-amp-Doc：\" class=\"headerlink\" title=\"4. 动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见API &amp; Doc：\"></a>4. 动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见<a href=\"http://echarts.baidu.com/doc/doc.html#Option\" target=\"_blank\" rel=\"external\">API &amp; Doc</a>：</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(</span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"string\">'echarts'</span>,</span><br><span class=\"line\">        <span class=\"string\">'echarts/chart/bar'</span> <span class=\"comment\">// 使用柱状图就加载bar模块，按需加载</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ec</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 基于准备好的dom，初始化echarts图表</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> myChart = ec.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'main'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> option = &#123;</span><br><span class=\"line\">            tooltip: &#123;</span><br><span class=\"line\">                show: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            legend: &#123;</span><br><span class=\"line\">                data:[<span class=\"string\">'销量'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            xAxis : [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">type</span> : <span class=\"string\">'category'</span>,</span><br><span class=\"line\">                    data : [<span class=\"string\">\"衬衫\"</span>,<span class=\"string\">\"羊毛衫\"</span>,<span class=\"string\">\"雪纺衫\"</span>,<span class=\"string\">\"裤子\"</span>,<span class=\"string\">\"高跟鞋\"</span>,<span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            yAxis : [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">type</span> : <span class=\"string\">'value'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            series : [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">\"name\"</span>:<span class=\"string\">\"销量\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"type\"</span>:<span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"data\"</span>:[<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">40</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 为echarts对象加载数据</span></span><br><span class=\"line\">        myChart.setOption(option);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-最后的样子：\"><a href=\"#5-最后的样子：\" class=\"headerlink\" title=\"5. 最后的样子：\"></a>5. 最后的样子：</h4><p><img src=\"/blog/images/article_img/3-1.png\" alt=\"\"></p>\n<h1 id=\"重点-option-部分相关配置说明\"><a href=\"#重点-option-部分相关配置说明\" class=\"headerlink\" title=\"重点- option 部分相关配置说明\"></a>重点- option 部分相关配置说明</h1><p>用户可以在 option 配置里自定义图标的样式。</p>\n<ul>\n<li><p>title 标题：<br><img src=\"/blog/images/article_img/3-2.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">title</span> : &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text</span>: <span class=\"string\">'某地区蒸发量和降水量'</span>,  //文本</span><br><span class=\"line\">    subtext: <span class=\"string\">'纯属虚构'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>toolbox 便捷的工具：<br><img src=\"/blog/images/article_img/3-3.png\" alt=\"\"></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">toolbox:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">show :</span> <span class=\"literal\">true</span>,  <span class=\"comment\">//是否显示工具栏</span></span><br><span class=\"line\">    <span class=\"string\">feature :</span> &#123;  <span class=\"comment\">//特性</span></span><br><span class=\"line\">        <span class=\"string\">mark :</span> &#123;<span class=\"string\">show:</span> <span class=\"literal\">true</span>&#125;,  <span class=\"comment\">//辅助线</span></span><br><span class=\"line\">        <span class=\"string\">dataView :</span> &#123;<span class=\"string\">show:</span> <span class=\"literal\">true</span>, <span class=\"string\">readOnly:</span> <span class=\"literal\">false</span>&#125;,  <span class=\"comment\">//数据视图</span></span><br><span class=\"line\">        <span class=\"string\">magicType :</span> &#123;<span class=\"string\">show:</span> <span class=\"literal\">true</span>, <span class=\"string\">type:</span> [<span class=\"string\">'line'</span>, <span class=\"string\">'bar'</span>]&#125;,  <span class=\"comment\">//切换视图（折线/柱状）</span></span><br><span class=\"line\">        <span class=\"string\">restore :</span> &#123;<span class=\"string\">show:</span> <span class=\"literal\">true</span>&#125;,  <span class=\"comment\">//重新加载视图</span></span><br><span class=\"line\">        <span class=\"string\">saveAsImage :</span> &#123;<span class=\"string\">show:</span> <span class=\"literal\">true</span>&#125;  <span class=\"comment\">//保存该视图为图片</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>series 数据列表：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">series </span>: [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attribute\">name</span>:<span class=\"string\">'蒸发量'</span>,  <span class=\"comment\">//名称</span></span><br><span class=\"line\">    <span class=\"attribute\">type</span>:<span class=\"string\">'bar'</span>,  <span class=\"comment\">//视图类型</span></span><br><span class=\"line\">    <span class=\"attribute\">data</span>:[<span class=\"number\">2.0</span>, <span class=\"number\">4.9</span>, <span class=\"number\">7.0</span>, <span class=\"number\">23.2</span>, <span class=\"number\">25.6</span>, <span class=\"number\">76.7</span>, <span class=\"number\">135.6</span>, <span class=\"number\">162.2</span>, <span class=\"number\">32.6</span>, <span class=\"number\">20.0</span>, <span class=\"number\">6.4</span>, <span class=\"number\">3.3</span>],  <span class=\"comment\">//数据</span></span><br><span class=\"line\">    <span class=\"attribute\">markPoint </span>: &#123;  <span class=\"comment\">//标记</span></span><br><span class=\"line\">        <span class=\"attribute\">data </span>: [</span><br><span class=\"line\">            &#123;<span class=\"attribute\">type </span>: <span class=\"string\">'max'</span>, <span class=\"attribute\">name</span>: <span class=\"string\">'最大值'</span>&#125;,  <span class=\"comment\">//最大值，name为显示文本</span></span><br><span class=\"line\">            &#123;<span class=\"attribute\">type </span>: <span class=\"string\">'min'</span>, <span class=\"attribute\">name</span>: <span class=\"string\">'最小值'</span>&#125;  <span class=\"comment\">//最小值，name为显示文本</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attribute\">markLine </span>: &#123;  <span class=\"comment\">//标线</span></span><br><span class=\"line\">        <span class=\"attribute\">data </span>: [</span><br><span class=\"line\">            &#123;<span class=\"attribute\">type </span>: <span class=\"string\">'average'</span>, <span class=\"attribute\">name</span>: <span class=\"string\">'平均值'</span>&#125;  <span class=\"comment\">//平均值，name为显示文本</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>xAxis ： X 轴</p>\n</li>\n<li>yAxis ： Y 轴</li>\n<li>legend ：<br><img src=\"/blog/images/article_img/3-4.png\" alt=\"\"><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">legend</span>: &#123;</span><br><span class=\"line\">    <span class=\"attribute\">orient </span>: <span class=\"string\">'vertical'</span>,  <span class=\"comment\">//方向“垂直”，默认从左向右横向排列</span></span><br><span class=\"line\">    <span class=\"attribute\">x </span>: <span class=\"string\">'left'</span>,  <span class=\"comment\">//位于 X 轴左侧，默认顶部居中</span></span><br><span class=\"line\">    <span class=\"attribute\">data</span>:[<span class=\"string\">'直接访问'</span>,<span class=\"string\">'邮件营销'</span>,<span class=\"string\">'联盟广告'</span>,<span class=\"string\">'视频广告'</span>,<span class=\"string\">'搜索引擎'</span>]  <span class=\"comment\">//显示文本</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>更多配置可在<a href=\"http://echarts.baidu.com/doc/example.html\" target=\"_blank\" rel=\"external\">【实例】</a>中点开测试。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://echarts.baidu.com/doc/start.html\" target=\"_blank\" rel=\"external\">入门教程</a></li>\n<li><a href=\"http://echarts.baidu.com/doc/example.html\" target=\"_blank\" rel=\"external\">实例</a></li>\n<li><a href=\"https://github.com/ecomfe/echarts\" target=\"_blank\" rel=\"external\">Fork on github</a></li>\n</ul>\n","excerpt":"<p><img src=\"/blog/images/article_img/3.png\" alt=\"ECharts\"></p>\n<h1 id=\"关于ECharts（ECharts）\"><a href=\"#关于ECharts（ECharts）\" class=\"headerlink\" title=\"关于ECharts（ECharts）\"></a>关于ECharts（<a href=\"http://echarts.baidu.com/doc/about.html\">ECharts</a>）</h1><p>ECharts 是百度提供的一款开源、功能强大的数据可视化产品。<br>主要提供折线图、柱状图、散点图、K线图、饼图、雷达图、地图、和弦图、力导向布局图、仪表盘以及漏斗图。</p>\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><ul>\n<li>拖拽重计算</li>\n<li>数据视图</li>\n<li>多图联动</li>\n<li>值域漫游</li>\n<li>炫光特效<br>……</li>\n</ul>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>下载 ECharts 静态包<a href=\"http://echarts.baidu.com/build/echarts-2.2.7.zip\">【echarts-2.2.7】</a>，也可以直接使用链接进行加载。建议下载静态包，避免官方 <strong>更新新特性</strong> 时造成图表无法正常呈现的问题。</p>","more":"<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>ECharts的使用很简单，以官方提供的为例分为下面几步：</p>\n<h4 id=\"1-新建一个-test-html-并放置一个-div-来承载图表：\"><a href=\"#1-新建一个-test-html-并放置一个-div-来承载图表：\" class=\"headerlink\" title=\"1. 新建一个 test.html 并放置一个 div 来承载图表：\"></a>1. 新建一个 <code>test.html</code> 并放置一个 <code>div</code> 来承载图表：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 400px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-引入-echarts-js-：\"><a href=\"#2-引入-echarts-js-：\" class=\"headerlink\" title=\"2. 引入 echarts.js ：\"></a>2. 引入 <code>echarts.js</code> ：</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://echarts.baidu.com/build/dist/echarts.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-添加模块加载器配置-echarts-和所需图表的路径（相对路径为从当前页面链接到echarts-js），引入图表文件见引入-ECharts2：\"><a href=\"#3-添加模块加载器配置-echarts-和所需图表的路径（相对路径为从当前页面链接到echarts-js），引入图表文件见引入-ECharts2：\" class=\"headerlink\" title=\"3. 添加模块加载器配置 echarts 和所需图表的路径（相对路径为从当前页面链接到echarts.js），引入图表文件见引入 ECharts2：\"></a>3. 添加模块加载器配置 echarts 和所需图表的路径（相对路径为从当前页面链接到echarts.js），引入图表文件见<a href=\"http://echarts.baidu.com/doc/doc.html#引入ECharts2\">引入 ECharts2</a>：</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">    <span class=\"comment\">// 路径配置</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">        paths: &#123;</span><br><span class=\"line\">          echarts: <span class=\"string\">'http://echarts.baidu.com/build/dist'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见API-amp-Doc：\"><a href=\"#4-动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见API-amp-Doc：\" class=\"headerlink\" title=\"4. 动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见API &amp; Doc：\"></a>4. 动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见<a href=\"http://echarts.baidu.com/doc/doc.html#Option\">API &amp; Doc</a>：</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(</span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"string\">'echarts'</span>,</span><br><span class=\"line\">        <span class=\"string\">'echarts/chart/bar'</span> <span class=\"comment\">// 使用柱状图就加载bar模块，按需加载</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ec</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 基于准备好的dom，初始化echarts图表</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> myChart = ec.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'main'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> option = &#123;</span><br><span class=\"line\">            tooltip: &#123;</span><br><span class=\"line\">                show: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            legend: &#123;</span><br><span class=\"line\">                data:[<span class=\"string\">'销量'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            xAxis : [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">type</span> : <span class=\"string\">'category'</span>,</span><br><span class=\"line\">                    data : [<span class=\"string\">\"衬衫\"</span>,<span class=\"string\">\"羊毛衫\"</span>,<span class=\"string\">\"雪纺衫\"</span>,<span class=\"string\">\"裤子\"</span>,<span class=\"string\">\"高跟鞋\"</span>,<span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            yAxis : [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">type</span> : <span class=\"string\">'value'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            series : [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">\"name\"</span>:<span class=\"string\">\"销量\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"type\"</span>:<span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"data\"</span>:[<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">40</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 为echarts对象加载数据</span></span><br><span class=\"line\">        myChart.setOption(option);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-最后的样子：\"><a href=\"#5-最后的样子：\" class=\"headerlink\" title=\"5. 最后的样子：\"></a>5. 最后的样子：</h4><p><img src=\"/blog/images/article_img/3-1.png\" alt=\"\"></p>\n<h1 id=\"重点-option-部分相关配置说明\"><a href=\"#重点-option-部分相关配置说明\" class=\"headerlink\" title=\"重点- option 部分相关配置说明\"></a>重点- option 部分相关配置说明</h1><p>用户可以在 option 配置里自定义图标的样式。</p>\n<ul>\n<li><p>title 标题：<br><img src=\"/blog/images/article_img/3-2.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">title</span> : &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text</span>: <span class=\"string\">'某地区蒸发量和降水量'</span>,  //文本</span><br><span class=\"line\">    subtext: <span class=\"string\">'纯属虚构'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>toolbox 便捷的工具：<br><img src=\"/blog/images/article_img/3-3.png\" alt=\"\"></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">toolbox:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">show :</span> <span class=\"literal\">true</span>,  <span class=\"comment\">//是否显示工具栏</span></span><br><span class=\"line\">    <span class=\"string\">feature :</span> &#123;  <span class=\"comment\">//特性</span></span><br><span class=\"line\">        <span class=\"string\">mark :</span> &#123;<span class=\"string\">show:</span> <span class=\"literal\">true</span>&#125;,  <span class=\"comment\">//辅助线</span></span><br><span class=\"line\">        <span class=\"string\">dataView :</span> &#123;<span class=\"string\">show:</span> <span class=\"literal\">true</span>, <span class=\"string\">readOnly:</span> <span class=\"literal\">false</span>&#125;,  <span class=\"comment\">//数据视图</span></span><br><span class=\"line\">        <span class=\"string\">magicType :</span> &#123;<span class=\"string\">show:</span> <span class=\"literal\">true</span>, <span class=\"string\">type:</span> [<span class=\"string\">'line'</span>, <span class=\"string\">'bar'</span>]&#125;,  <span class=\"comment\">//切换视图（折线/柱状）</span></span><br><span class=\"line\">        <span class=\"string\">restore :</span> &#123;<span class=\"string\">show:</span> <span class=\"literal\">true</span>&#125;,  <span class=\"comment\">//重新加载视图</span></span><br><span class=\"line\">        <span class=\"string\">saveAsImage :</span> &#123;<span class=\"string\">show:</span> <span class=\"literal\">true</span>&#125;  <span class=\"comment\">//保存该视图为图片</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>series 数据列表：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">series </span>: [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attribute\">name</span>:<span class=\"string\">'蒸发量'</span>,  <span class=\"comment\">//名称</span></span><br><span class=\"line\">    <span class=\"attribute\">type</span>:<span class=\"string\">'bar'</span>,  <span class=\"comment\">//视图类型</span></span><br><span class=\"line\">    <span class=\"attribute\">data</span>:[<span class=\"number\">2.0</span>, <span class=\"number\">4.9</span>, <span class=\"number\">7.0</span>, <span class=\"number\">23.2</span>, <span class=\"number\">25.6</span>, <span class=\"number\">76.7</span>, <span class=\"number\">135.6</span>, <span class=\"number\">162.2</span>, <span class=\"number\">32.6</span>, <span class=\"number\">20.0</span>, <span class=\"number\">6.4</span>, <span class=\"number\">3.3</span>],  <span class=\"comment\">//数据</span></span><br><span class=\"line\">    <span class=\"attribute\">markPoint </span>: &#123;  <span class=\"comment\">//标记</span></span><br><span class=\"line\">        <span class=\"attribute\">data </span>: [</span><br><span class=\"line\">            &#123;<span class=\"attribute\">type </span>: <span class=\"string\">'max'</span>, <span class=\"attribute\">name</span>: <span class=\"string\">'最大值'</span>&#125;,  <span class=\"comment\">//最大值，name为显示文本</span></span><br><span class=\"line\">            &#123;<span class=\"attribute\">type </span>: <span class=\"string\">'min'</span>, <span class=\"attribute\">name</span>: <span class=\"string\">'最小值'</span>&#125;  <span class=\"comment\">//最小值，name为显示文本</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attribute\">markLine </span>: &#123;  <span class=\"comment\">//标线</span></span><br><span class=\"line\">        <span class=\"attribute\">data </span>: [</span><br><span class=\"line\">            &#123;<span class=\"attribute\">type </span>: <span class=\"string\">'average'</span>, <span class=\"attribute\">name</span>: <span class=\"string\">'平均值'</span>&#125;  <span class=\"comment\">//平均值，name为显示文本</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>xAxis ： X 轴</p>\n</li>\n<li>yAxis ： Y 轴</li>\n<li>legend ：<br><img src=\"/blog/images/article_img/3-4.png\" alt=\"\"><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">legend</span>: &#123;</span><br><span class=\"line\">    <span class=\"attribute\">orient </span>: <span class=\"string\">'vertical'</span>,  <span class=\"comment\">//方向“垂直”，默认从左向右横向排列</span></span><br><span class=\"line\">    <span class=\"attribute\">x </span>: <span class=\"string\">'left'</span>,  <span class=\"comment\">//位于 X 轴左侧，默认顶部居中</span></span><br><span class=\"line\">    <span class=\"attribute\">data</span>:[<span class=\"string\">'直接访问'</span>,<span class=\"string\">'邮件营销'</span>,<span class=\"string\">'联盟广告'</span>,<span class=\"string\">'视频广告'</span>,<span class=\"string\">'搜索引擎'</span>]  <span class=\"comment\">//显示文本</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>更多配置可在<a href=\"http://echarts.baidu.com/doc/example.html\">【实例】</a>中点开测试。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://echarts.baidu.com/doc/start.html\">入门教程</a></li>\n<li><a href=\"http://echarts.baidu.com/doc/example.html\">实例</a></li>\n<li><a href=\"https://github.com/ecomfe/echarts\">Fork on github</a></li>\n</ul>","sticky":0},{"title":"使用 Git 管理项目 - reset 与 rebase","date":"2015-11-04T09:49:09.000Z","_content":"在日常管理项目的过程中，可能会遇到提交的 commit/merge 并不是想要的，或是操作失误提交了，那么此时我们需要把不想要的 commit/merge 取消掉，如果做到呢？Git 为我们提供了一个 `reset` command，很好地解决了这个问题。\n\n# reset\n## 1. 命令说明\n```\n$ git reset [--hard|soft|mixed|merge|keep] [<commit>|<HEAD>]\n```\n常用的是`[--hard|soft|mixed]`，本文主要使用`--hard`作为例子进行说明。\n\n## 2. 本地仓库\n在本地仓库执行 `$ git reset --hard HEAD^` 可以将本地的仓库回滚到上一次提交时的状态，`HEAD^`指的是上一次提交。\n\n同时你也可以执行 `$ git reset --hard fc232ae` 将其回滚到 `fc232ae` commit 时的状态。\n\n## 3. 远程仓库\n以上操作只会对本地仓库造成影响，而远程仓库的源码和 commit 信息并不会因此改变。那么此时我们需要另外一个 command 来改变远程仓库的状态。\n\n**注意，此时不要在上一步的操作之后执行`$ git pull` ，因为这个操作会使本地仓库的状态与远程同步。**\n```\n$ git push origin [branch] -f\n```\n执行此命令后，Git 会将远程仓库的状态与本地仓库的保持一致，即回滚状态。\n\n<!-- more -->\n\n在更新代码时，难免一次到位，此时就会生成许许多多的 commit 。比如同一个文件，反复地修改代码，反复地提交，此时会有5，6个 commit 甚至更多，那么你会在提交 list 中看到一大串的 commit 记录，会觉得很是头疼，杂乱。此时我们需要把这些 commit 整合以下，合并到一个 commit 中，其他的 commit 都 squash 到第一 commit 中，那么就需要用到 `rebase`。\n# rebase\n## 1. 说明\n```\n$ git rebase -i [branch|<commit>]\n```\n\n你可以直接进入某个分支的 rebase 也可以进入某次 commit 的 rebase，如果你是项将某些 commit 合并，那么建议使用 `$ git rebase -i <commit>`。\n\n此外 rebase 还提供三个操作命令，分别是 `--continue`、`--absort` 和 `--skip`，这三个命令的意思分别是“继续”、“退出”和“跳过”。\n## 2. 查看记录\n```\n$ git log\n```\n执行此命令即可看到当前分支下所有的提交记录，然后根据个人需要复制其中的 commit 的 SHA 进行 rebase 操作。\n## 3. rebase\n执行：\n```\n$ git rebase -i 9cbc329\n```\n然后就会看到：\n```\npick fb554f5 This is commit 1\npick 2bd1903 This is commit 2\npick d987ebf This is commit 3\n# Rebase 9cbc329..d987ebf onto 9cbc329\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n```\n那么其中 `pick fb554f5 This is commit 1`我们可以把它分成三部分去解释：\n- `pick`:：操作，即 rebase command\n- `fb554f5`：commit shortID，提交的简写ID\n- `This is commit 1`： commit message，提交时填写的提交信息\n\n此时我们可以看到输出结果中所提供的一些操作方法，比如 `pick`、`squash`、`edit` 等。那么重要的是 `pick` 和 `squash`。\n\n接着我们需要把 `2bd1903` 和 `d987ebf ` 合并到 `fb554f5 ` 中，做如下操作（**注意：此时是 VIM 的操作界面，熟悉 Linux 的同学可以无视，不熟悉的可以[简略的指导](#简略的指导)**）：\n```\npick fb554f5 This is commit 1\nsquash 2bd1903 This is commit 2\nsquash d987ebf This is commit 3\n# Rebase 9cbc329..d987ebf onto 9cbc329\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n```\n在做完以上修改操作后输入 `:x` 保存文件并退出界面，然后就会看到：\n```\n$ git rebase -i 9cbc329\nrebase in progress; onto 9cbc329\nYou are currently rebasing branch 'master' on '9cbc329'.\n\nnothing to commit, working directory clean\nThe previous cherry-pick is now empty, possibly due to conflict resolution.\nIf you wish to commit it anyway, use:\n\n    git commit --allow-empty\n\nOtherwise, please use 'git reset'\nCould not apply 9cbc329f722f8e531496da70ee3857b031574b6d... squash commit on rebase\n```\n此时用 `$ git status`  查看会看到：\n```\n$ git status\nrebase in progress; onto 9cbc329\nYou are currently rebasing branch 'master' on '9cbc329'.\n  (all conflicts fixed: run \"git rebase --continue\")\n\nnothing to commit, working directory clean\n```\n紧接着我们需要执行 `$ git rebase --continue` 操作：\n```\n$ git rebase --continue\n[detached HEAD 2bd1903...d987ebf] squash commit on rebase\n Date: Tue Nov 3 10:09:43 2015 +0800\n 1 file changed, 149 insertions(+), 154 deletions(-)\n rewrite test.js (72%)\nSuccessfully rebased and updated refs/heads/master.\n```\n最后我们需要把修改合并好的 commit push 到远程仓库上：\n```\n$ git push origin [branch] -f\n```\n到此为止，整个 rebase 操作都已完成。\n你会看到类似：\n![before](/blog/images/article_img/4.png)\n变成类似：\n![after](/blog/images/article_img/5.png)\n\n# 简略的指导\n在 VIM 的操作界面下，需要按 `I/Insert` 键进行插入修改文本操作，修改完文本之后需要按 `Esc` 键退出编辑状态，然后输入 `:q` 是离开，输入 `:!q` 是强制离开，输入 `:x` 是保存修改并离开。\n在 rebase 修改文本结束后需要输入 `:x` 进行保存。","source":"_posts/article-9.md","raw":"title: 使用 Git 管理项目 - reset 与 rebase\ndate: 2015-11-04 17:49:09\ncategories:\n  - Git\ntags:\n - git\n - 项目管理\n - reset\n - rebase\n---\n在日常管理项目的过程中，可能会遇到提交的 commit/merge 并不是想要的，或是操作失误提交了，那么此时我们需要把不想要的 commit/merge 取消掉，如果做到呢？Git 为我们提供了一个 `reset` command，很好地解决了这个问题。\n\n# reset\n## 1. 命令说明\n```\n$ git reset [--hard|soft|mixed|merge|keep] [<commit>|<HEAD>]\n```\n常用的是`[--hard|soft|mixed]`，本文主要使用`--hard`作为例子进行说明。\n\n## 2. 本地仓库\n在本地仓库执行 `$ git reset --hard HEAD^` 可以将本地的仓库回滚到上一次提交时的状态，`HEAD^`指的是上一次提交。\n\n同时你也可以执行 `$ git reset --hard fc232ae` 将其回滚到 `fc232ae` commit 时的状态。\n\n## 3. 远程仓库\n以上操作只会对本地仓库造成影响，而远程仓库的源码和 commit 信息并不会因此改变。那么此时我们需要另外一个 command 来改变远程仓库的状态。\n\n**注意，此时不要在上一步的操作之后执行`$ git pull` ，因为这个操作会使本地仓库的状态与远程同步。**\n```\n$ git push origin [branch] -f\n```\n执行此命令后，Git 会将远程仓库的状态与本地仓库的保持一致，即回滚状态。\n\n<!-- more -->\n\n在更新代码时，难免一次到位，此时就会生成许许多多的 commit 。比如同一个文件，反复地修改代码，反复地提交，此时会有5，6个 commit 甚至更多，那么你会在提交 list 中看到一大串的 commit 记录，会觉得很是头疼，杂乱。此时我们需要把这些 commit 整合以下，合并到一个 commit 中，其他的 commit 都 squash 到第一 commit 中，那么就需要用到 `rebase`。\n# rebase\n## 1. 说明\n```\n$ git rebase -i [branch|<commit>]\n```\n\n你可以直接进入某个分支的 rebase 也可以进入某次 commit 的 rebase，如果你是项将某些 commit 合并，那么建议使用 `$ git rebase -i <commit>`。\n\n此外 rebase 还提供三个操作命令，分别是 `--continue`、`--absort` 和 `--skip`，这三个命令的意思分别是“继续”、“退出”和“跳过”。\n## 2. 查看记录\n```\n$ git log\n```\n执行此命令即可看到当前分支下所有的提交记录，然后根据个人需要复制其中的 commit 的 SHA 进行 rebase 操作。\n## 3. rebase\n执行：\n```\n$ git rebase -i 9cbc329\n```\n然后就会看到：\n```\npick fb554f5 This is commit 1\npick 2bd1903 This is commit 2\npick d987ebf This is commit 3\n# Rebase 9cbc329..d987ebf onto 9cbc329\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n```\n那么其中 `pick fb554f5 This is commit 1`我们可以把它分成三部分去解释：\n- `pick`:：操作，即 rebase command\n- `fb554f5`：commit shortID，提交的简写ID\n- `This is commit 1`： commit message，提交时填写的提交信息\n\n此时我们可以看到输出结果中所提供的一些操作方法，比如 `pick`、`squash`、`edit` 等。那么重要的是 `pick` 和 `squash`。\n\n接着我们需要把 `2bd1903` 和 `d987ebf ` 合并到 `fb554f5 ` 中，做如下操作（**注意：此时是 VIM 的操作界面，熟悉 Linux 的同学可以无视，不熟悉的可以[简略的指导](#简略的指导)**）：\n```\npick fb554f5 This is commit 1\nsquash 2bd1903 This is commit 2\nsquash d987ebf This is commit 3\n# Rebase 9cbc329..d987ebf onto 9cbc329\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n```\n在做完以上修改操作后输入 `:x` 保存文件并退出界面，然后就会看到：\n```\n$ git rebase -i 9cbc329\nrebase in progress; onto 9cbc329\nYou are currently rebasing branch 'master' on '9cbc329'.\n\nnothing to commit, working directory clean\nThe previous cherry-pick is now empty, possibly due to conflict resolution.\nIf you wish to commit it anyway, use:\n\n    git commit --allow-empty\n\nOtherwise, please use 'git reset'\nCould not apply 9cbc329f722f8e531496da70ee3857b031574b6d... squash commit on rebase\n```\n此时用 `$ git status`  查看会看到：\n```\n$ git status\nrebase in progress; onto 9cbc329\nYou are currently rebasing branch 'master' on '9cbc329'.\n  (all conflicts fixed: run \"git rebase --continue\")\n\nnothing to commit, working directory clean\n```\n紧接着我们需要执行 `$ git rebase --continue` 操作：\n```\n$ git rebase --continue\n[detached HEAD 2bd1903...d987ebf] squash commit on rebase\n Date: Tue Nov 3 10:09:43 2015 +0800\n 1 file changed, 149 insertions(+), 154 deletions(-)\n rewrite test.js (72%)\nSuccessfully rebased and updated refs/heads/master.\n```\n最后我们需要把修改合并好的 commit push 到远程仓库上：\n```\n$ git push origin [branch] -f\n```\n到此为止，整个 rebase 操作都已完成。\n你会看到类似：\n![before](/blog/images/article_img/4.png)\n变成类似：\n![after](/blog/images/article_img/5.png)\n\n# 简略的指导\n在 VIM 的操作界面下，需要按 `I/Insert` 键进行插入修改文本操作，修改完文本之后需要按 `Esc` 键退出编辑状态，然后输入 `:q` 是离开，输入 `:!q` 是强制离开，输入 `:x` 是保存修改并离开。\n在 rebase 修改文本结束后需要输入 `:x` 进行保存。","slug":"article-9","published":1,"updated":"2016-05-22T14:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioit7enj001kwnprsyxok2xs","content":"<p>在日常管理项目的过程中，可能会遇到提交的 commit/merge 并不是想要的，或是操作失误提交了，那么此时我们需要把不想要的 commit/merge 取消掉，如果做到呢？Git 为我们提供了一个 <code>reset</code> command，很好地解决了这个问题。</p>\n<h1 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h1><h2 id=\"1-命令说明\"><a href=\"#1-命令说明\" class=\"headerlink\" title=\"1. 命令说明\"></a>1. 命令说明</h2><figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset [--hard|soft|mixed|merge|keep] <span class=\"meta\">[&lt;commit&gt;|&lt;HEAD&gt;]</span></span><br></pre></td></tr></table></figure>\n<p>常用的是<code>[--hard|soft|mixed]</code>，本文主要使用<code>--hard</code>作为例子进行说明。</p>\n<h2 id=\"2-本地仓库\"><a href=\"#2-本地仓库\" class=\"headerlink\" title=\"2. 本地仓库\"></a>2. 本地仓库</h2><p>在本地仓库执行 <code>$ git reset --hard HEAD^</code> 可以将本地的仓库回滚到上一次提交时的状态，<code>HEAD^</code>指的是上一次提交。</p>\n<p>同时你也可以执行 <code>$ git reset --hard fc232ae</code> 将其回滚到 <code>fc232ae</code> commit 时的状态。</p>\n<h2 id=\"3-远程仓库\"><a href=\"#3-远程仓库\" class=\"headerlink\" title=\"3. 远程仓库\"></a>3. 远程仓库</h2><p>以上操作只会对本地仓库造成影响，而远程仓库的源码和 commit 信息并不会因此改变。那么此时我们需要另外一个 command 来改变远程仓库的状态。</p>\n<p><strong>注意，此时不要在上一步的操作之后执行<code>$ git pull</code> ，因为这个操作会使本地仓库的状态与远程同步。</strong><br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">push </span>origin [<span class=\"keyword\">branch] </span>-f</span><br></pre></td></tr></table></figure></p>\n<p>执行此命令后，Git 会将远程仓库的状态与本地仓库的保持一致，即回滚状态。</p>\n<a id=\"more\"></a>\n<p>在更新代码时，难免一次到位，此时就会生成许许多多的 commit 。比如同一个文件，反复地修改代码，反复地提交，此时会有5，6个 commit 甚至更多，那么你会在提交 list 中看到一大串的 commit 记录，会觉得很是头疼，杂乱。此时我们需要把这些 commit 整合以下，合并到一个 commit 中，其他的 commit 都 squash 到第一 commit 中，那么就需要用到 <code>rebase</code>。</p>\n<h1 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h1><h2 id=\"1-说明\"><a href=\"#1-说明\" class=\"headerlink\" title=\"1. 说明\"></a>1. 说明</h2><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i [branch<span class=\"string\">|&lt;commit&gt;]</span></span><br></pre></td></tr></table></figure>\n<p>你可以直接进入某个分支的 rebase 也可以进入某次 commit 的 rebase，如果你是项将某些 commit 合并，那么建议使用 <code>$ git rebase -i &lt;commit&gt;</code>。</p>\n<p>此外 rebase 还提供三个操作命令，分别是 <code>--continue</code>、<code>--absort</code> 和 <code>--skip</code>，这三个命令的意思分别是“继续”、“退出”和“跳过”。</p>\n<h2 id=\"2-查看记录\"><a href=\"#2-查看记录\" class=\"headerlink\" title=\"2. 查看记录\"></a>2. 查看记录</h2><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git <span class=\"built-in\">log</span></span><br></pre></td></tr></table></figure>\n<p>执行此命令即可看到当前分支下所有的提交记录，然后根据个人需要复制其中的 commit 的 SHA 进行 rebase 操作。</p>\n<h2 id=\"3-rebase\"><a href=\"#3-rebase\" class=\"headerlink\" title=\"3. rebase\"></a>3. rebase</h2><p>执行：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -<span class=\"selector-tag\">i</span> <span class=\"number\">9</span>cbc329</span><br></pre></td></tr></table></figure></p>\n<p>然后就会看到：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick fb554f5 This <span class=\"keyword\">is</span> commit <span class=\"number\">1</span></span><br><span class=\"line\">pick <span class=\"number\">2</span>bd1903 This <span class=\"keyword\">is</span> commit <span class=\"number\">2</span></span><br><span class=\"line\">pick d987ebf This <span class=\"keyword\">is</span> commit <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># Rebase 9cbc329..d987ebf onto 9cbc329</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup = like \"squash\", but discard this commit's log message</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></p>\n<p>那么其中 <code>pick fb554f5 This is commit 1</code>我们可以把它分成三部分去解释：</p>\n<ul>\n<li><code>pick</code>:：操作，即 rebase command</li>\n<li><code>fb554f5</code>：commit shortID，提交的简写ID</li>\n<li><code>This is commit 1</code>： commit message，提交时填写的提交信息</li>\n</ul>\n<p>此时我们可以看到输出结果中所提供的一些操作方法，比如 <code>pick</code>、<code>squash</code>、<code>edit</code> 等。那么重要的是 <code>pick</code> 和 <code>squash</code>。</p>\n<p>接着我们需要把 <code>2bd1903</code> 和 <code>d987ebf</code> 合并到 <code>fb554f5</code> 中，做如下操作（<strong>注意：此时是 VIM 的操作界面，熟悉 Linux 的同学可以无视，不熟悉的可以<a href=\"#简略的指导\">简略的指导</a></strong>）：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick fb554f5 This <span class=\"keyword\">is</span> commit <span class=\"number\">1</span></span><br><span class=\"line\">squash <span class=\"number\">2</span>bd1903 This <span class=\"keyword\">is</span> commit <span class=\"number\">2</span></span><br><span class=\"line\">squash d987ebf This <span class=\"keyword\">is</span> commit <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># Rebase 9cbc329..d987ebf onto 9cbc329</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup = like \"squash\", but discard this commit's log message</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></p>\n<p>在做完以上修改操作后输入 <code>:x</code> 保存文件并退出界面，然后就会看到：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i 9cbc329</span><br><span class=\"line\">rebase in progress; onto 9cbc329</span><br><span class=\"line\">You are currently rebasing branch 'master' on '9cbc329'.</span><br><span class=\"line\"></span><br><span class=\"line\">nothing to <span class=\"keyword\">commit</span>, working <span class=\"keyword\">directory</span> clean</span><br><span class=\"line\">The previous cherry-pick <span class=\"keyword\">is</span> <span class=\"keyword\">now</span> <span class=\"keyword\">empty</span>, possibly due <span class=\"keyword\">to</span> conflict resolution.</span><br><span class=\"line\"><span class=\"keyword\">If</span> you wish <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span> it anyway, <span class=\"keyword\">use</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    git <span class=\"keyword\">commit</span> <span class=\"comment\">--allow-empty</span></span><br><span class=\"line\"></span><br><span class=\"line\">Otherwise, please <span class=\"keyword\">use</span> <span class=\"string\">'git reset'</span></span><br><span class=\"line\">Could <span class=\"keyword\">not</span> <span class=\"keyword\">apply</span> <span class=\"number\">9</span>cbc329f722f8e531496da70ee3857b031574b6d... squash <span class=\"keyword\">commit</span> <span class=\"keyword\">on</span> rebase</span><br></pre></td></tr></table></figure></p>\n<p>此时用 <code>$ git status</code>  查看会看到：<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">rebase <span class=\"keyword\">in</span> progress; onto <span class=\"number\">9</span>cbc329</span><br><span class=\"line\">You are currently rebasing branch <span class=\"string\">'master'</span> <span class=\"keyword\">on</span> <span class=\"string\">'9cbc329'</span>.</span><br><span class=\"line\">  (all conflicts fixed: run <span class=\"string\">\"git rebase --continue\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">nothing <span class=\"built_in\">to</span> commit, working <span class=\"built_in\">directory</span> clean</span><br></pre></td></tr></table></figure></p>\n<p>紧接着我们需要执行 <code>$ git rebase --continue</code> 操作：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase <span class=\"comment\">--continue</span></span><br><span class=\"line\">[detached HEAD 2bd1903...d987ebf] squash <span class=\"keyword\">commit</span> <span class=\"keyword\">on</span> rebase</span><br><span class=\"line\"> <span class=\"built_in\">Date</span>: Tue Nov <span class=\"number\">3</span> <span class=\"number\">10</span>:<span class=\"number\">09</span>:<span class=\"number\">43</span> <span class=\"number\">2015</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">file</span> <span class=\"keyword\">changed</span>, <span class=\"number\">149</span> insertions(+), <span class=\"number\">154</span> deletions(-)</span><br><span class=\"line\"> rewrite test.js (<span class=\"number\">72</span>%)</span><br><span class=\"line\">Successfully rebased <span class=\"keyword\">and</span> <span class=\"keyword\">updated</span> refs/heads/master.</span><br></pre></td></tr></table></figure></p>\n<p>最后我们需要把修改合并好的 commit push 到远程仓库上：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">push </span>origin [<span class=\"keyword\">branch] </span>-f</span><br></pre></td></tr></table></figure></p>\n<p>到此为止，整个 rebase 操作都已完成。<br>你会看到类似：<br><img src=\"/blog/images/article_img/4.png\" alt=\"before\"><br>变成类似：<br><img src=\"/blog/images/article_img/5.png\" alt=\"after\"></p>\n<h1 id=\"简略的指导\"><a href=\"#简略的指导\" class=\"headerlink\" title=\"简略的指导\"></a>简略的指导</h1><p>在 VIM 的操作界面下，需要按 <code>I/Insert</code> 键进行插入修改文本操作，修改完文本之后需要按 <code>Esc</code> 键退出编辑状态，然后输入 <code>:q</code> 是离开，输入 <code>:!q</code> 是强制离开，输入 <code>:x</code> 是保存修改并离开。<br>在 rebase 修改文本结束后需要输入 <code>:x</code> 进行保存。</p>\n","excerpt":"<p>在日常管理项目的过程中，可能会遇到提交的 commit/merge 并不是想要的，或是操作失误提交了，那么此时我们需要把不想要的 commit/merge 取消掉，如果做到呢？Git 为我们提供了一个 <code>reset</code> command，很好地解决了这个问题。</p>\n<h1 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h1><h2 id=\"1-命令说明\"><a href=\"#1-命令说明\" class=\"headerlink\" title=\"1. 命令说明\"></a>1. 命令说明</h2><figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset [--hard|soft|mixed|merge|keep] <span class=\"meta\">[&lt;commit&gt;|&lt;HEAD&gt;]</span></span><br></pre></td></tr></table></figure>\n<p>常用的是<code>[--hard|soft|mixed]</code>，本文主要使用<code>--hard</code>作为例子进行说明。</p>\n<h2 id=\"2-本地仓库\"><a href=\"#2-本地仓库\" class=\"headerlink\" title=\"2. 本地仓库\"></a>2. 本地仓库</h2><p>在本地仓库执行 <code>$ git reset --hard HEAD^</code> 可以将本地的仓库回滚到上一次提交时的状态，<code>HEAD^</code>指的是上一次提交。</p>\n<p>同时你也可以执行 <code>$ git reset --hard fc232ae</code> 将其回滚到 <code>fc232ae</code> commit 时的状态。</p>\n<h2 id=\"3-远程仓库\"><a href=\"#3-远程仓库\" class=\"headerlink\" title=\"3. 远程仓库\"></a>3. 远程仓库</h2><p>以上操作只会对本地仓库造成影响，而远程仓库的源码和 commit 信息并不会因此改变。那么此时我们需要另外一个 command 来改变远程仓库的状态。</p>\n<p><strong>注意，此时不要在上一步的操作之后执行<code>$ git pull</code> ，因为这个操作会使本地仓库的状态与远程同步。</strong><br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">push </span>origin [<span class=\"keyword\">branch] </span>-f</span><br></pre></td></tr></table></figure></p>\n<p>执行此命令后，Git 会将远程仓库的状态与本地仓库的保持一致，即回滚状态。</p>","more":"<p>在更新代码时，难免一次到位，此时就会生成许许多多的 commit 。比如同一个文件，反复地修改代码，反复地提交，此时会有5，6个 commit 甚至更多，那么你会在提交 list 中看到一大串的 commit 记录，会觉得很是头疼，杂乱。此时我们需要把这些 commit 整合以下，合并到一个 commit 中，其他的 commit 都 squash 到第一 commit 中，那么就需要用到 <code>rebase</code>。</p>\n<h1 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h1><h2 id=\"1-说明\"><a href=\"#1-说明\" class=\"headerlink\" title=\"1. 说明\"></a>1. 说明</h2><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i [branch<span class=\"string\">|&lt;commit&gt;]</span></span><br></pre></td></tr></table></figure>\n<p>你可以直接进入某个分支的 rebase 也可以进入某次 commit 的 rebase，如果你是项将某些 commit 合并，那么建议使用 <code>$ git rebase -i &lt;commit&gt;</code>。</p>\n<p>此外 rebase 还提供三个操作命令，分别是 <code>--continue</code>、<code>--absort</code> 和 <code>--skip</code>，这三个命令的意思分别是“继续”、“退出”和“跳过”。</p>\n<h2 id=\"2-查看记录\"><a href=\"#2-查看记录\" class=\"headerlink\" title=\"2. 查看记录\"></a>2. 查看记录</h2><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git <span class=\"built-in\">log</span></span><br></pre></td></tr></table></figure>\n<p>执行此命令即可看到当前分支下所有的提交记录，然后根据个人需要复制其中的 commit 的 SHA 进行 rebase 操作。</p>\n<h2 id=\"3-rebase\"><a href=\"#3-rebase\" class=\"headerlink\" title=\"3. rebase\"></a>3. rebase</h2><p>执行：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -<span class=\"selector-tag\">i</span> <span class=\"number\">9</span>cbc329</span><br></pre></td></tr></table></figure></p>\n<p>然后就会看到：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick fb554f5 This <span class=\"keyword\">is</span> commit <span class=\"number\">1</span></span><br><span class=\"line\">pick <span class=\"number\">2</span>bd1903 This <span class=\"keyword\">is</span> commit <span class=\"number\">2</span></span><br><span class=\"line\">pick d987ebf This <span class=\"keyword\">is</span> commit <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># Rebase 9cbc329..d987ebf onto 9cbc329</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup = like \"squash\", but discard this commit's log message</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></p>\n<p>那么其中 <code>pick fb554f5 This is commit 1</code>我们可以把它分成三部分去解释：</p>\n<ul>\n<li><code>pick</code>:：操作，即 rebase command</li>\n<li><code>fb554f5</code>：commit shortID，提交的简写ID</li>\n<li><code>This is commit 1</code>： commit message，提交时填写的提交信息</li>\n</ul>\n<p>此时我们可以看到输出结果中所提供的一些操作方法，比如 <code>pick</code>、<code>squash</code>、<code>edit</code> 等。那么重要的是 <code>pick</code> 和 <code>squash</code>。</p>\n<p>接着我们需要把 <code>2bd1903</code> 和 <code>d987ebf</code> 合并到 <code>fb554f5</code> 中，做如下操作（<strong>注意：此时是 VIM 的操作界面，熟悉 Linux 的同学可以无视，不熟悉的可以<a href=\"#简略的指导\">简略的指导</a></strong>）：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick fb554f5 This <span class=\"keyword\">is</span> commit <span class=\"number\">1</span></span><br><span class=\"line\">squash <span class=\"number\">2</span>bd1903 This <span class=\"keyword\">is</span> commit <span class=\"number\">2</span></span><br><span class=\"line\">squash d987ebf This <span class=\"keyword\">is</span> commit <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># Rebase 9cbc329..d987ebf onto 9cbc329</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup = like \"squash\", but discard this commit's log message</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></p>\n<p>在做完以上修改操作后输入 <code>:x</code> 保存文件并退出界面，然后就会看到：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i 9cbc329</span><br><span class=\"line\">rebase in progress; onto 9cbc329</span><br><span class=\"line\">You are currently rebasing branch 'master' on '9cbc329'.</span><br><span class=\"line\"></span><br><span class=\"line\">nothing to <span class=\"keyword\">commit</span>, working <span class=\"keyword\">directory</span> clean</span><br><span class=\"line\">The previous cherry-pick <span class=\"keyword\">is</span> <span class=\"keyword\">now</span> <span class=\"keyword\">empty</span>, possibly due <span class=\"keyword\">to</span> conflict resolution.</span><br><span class=\"line\"><span class=\"keyword\">If</span> you wish <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span> it anyway, <span class=\"keyword\">use</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    git <span class=\"keyword\">commit</span> <span class=\"comment\">--allow-empty</span></span><br><span class=\"line\"></span><br><span class=\"line\">Otherwise, please <span class=\"keyword\">use</span> <span class=\"string\">'git reset'</span></span><br><span class=\"line\">Could <span class=\"keyword\">not</span> <span class=\"keyword\">apply</span> <span class=\"number\">9</span>cbc329f722f8e531496da70ee3857b031574b6d... squash <span class=\"keyword\">commit</span> <span class=\"keyword\">on</span> rebase</span><br></pre></td></tr></table></figure></p>\n<p>此时用 <code>$ git status</code>  查看会看到：<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">rebase <span class=\"keyword\">in</span> progress; onto <span class=\"number\">9</span>cbc329</span><br><span class=\"line\">You are currently rebasing branch <span class=\"string\">'master'</span> <span class=\"keyword\">on</span> <span class=\"string\">'9cbc329'</span>.</span><br><span class=\"line\">  (all conflicts fixed: run <span class=\"string\">\"git rebase --continue\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">nothing <span class=\"built_in\">to</span> commit, working <span class=\"built_in\">directory</span> clean</span><br></pre></td></tr></table></figure></p>\n<p>紧接着我们需要执行 <code>$ git rebase --continue</code> 操作：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase <span class=\"comment\">--continue</span></span><br><span class=\"line\">[detached HEAD 2bd1903...d987ebf] squash <span class=\"keyword\">commit</span> <span class=\"keyword\">on</span> rebase</span><br><span class=\"line\"> <span class=\"built_in\">Date</span>: Tue Nov <span class=\"number\">3</span> <span class=\"number\">10</span>:<span class=\"number\">09</span>:<span class=\"number\">43</span> <span class=\"number\">2015</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">file</span> <span class=\"keyword\">changed</span>, <span class=\"number\">149</span> insertions(+), <span class=\"number\">154</span> deletions(-)</span><br><span class=\"line\"> rewrite test.js (<span class=\"number\">72</span>%)</span><br><span class=\"line\">Successfully rebased <span class=\"keyword\">and</span> <span class=\"keyword\">updated</span> refs/heads/master.</span><br></pre></td></tr></table></figure></p>\n<p>最后我们需要把修改合并好的 commit push 到远程仓库上：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">push </span>origin [<span class=\"keyword\">branch] </span>-f</span><br></pre></td></tr></table></figure></p>\n<p>到此为止，整个 rebase 操作都已完成。<br>你会看到类似：<br><img src=\"/blog/images/article_img/4.png\" alt=\"before\"><br>变成类似：<br><img src=\"/blog/images/article_img/5.png\" alt=\"after\"></p>\n<h1 id=\"简略的指导\"><a href=\"#简略的指导\" class=\"headerlink\" title=\"简略的指导\"></a>简略的指导</h1><p>在 VIM 的操作界面下，需要按 <code>I/Insert</code> 键进行插入修改文本操作，修改完文本之后需要按 <code>Esc</code> 键退出编辑状态，然后输入 <code>:q</code> 是离开，输入 <code>:!q</code> 是强制离开，输入 <code>:x</code> 是保存修改并离开。<br>在 rebase 修改文本结束后需要输入 <code>:x</code> 进行保存。</p>","sticky":0}],"PostAsset":[],"PostCategory":[{"post_id":"cioit7elp0000wnprgausj2so","category_id":"cioit7em10005wnprwffb7cd3","_id":"cioit7emg000cwnprjmfx01c8"},{"post_id":"cioit7em9000bwnpr34cs4d3r","category_id":"cioit7em8000awnprb2hroiu5","_id":"cioit7eml000iwnprb578d8qt"},{"post_id":"cioit7elv0002wnprg0qxnwda","category_id":"cioit7em8000awnprb2hroiu5","_id":"cioit7emp000nwnpr82sstwby"},{"post_id":"cioit7emg000dwnprkz83og1o","category_id":"cioit7em8000awnprb2hroiu5","_id":"cioit7ems000pwnprtut1m3g8"},{"post_id":"cioit7emk000hwnprij5lbt4h","category_id":"cioit7em8000awnprb2hroiu5","_id":"cioit7emv000twnprqs1ssllm"},{"post_id":"cioit7em20006wnprzxhm46u0","category_id":"cioit7em8000awnprb2hroiu5","_id":"cioit7emx000vwnpre2fxkf7r"},{"post_id":"cioit7emn000kwnprqo8lxvm7","category_id":"cioit7em8000awnprb2hroiu5","_id":"cioit7emz000ywnpr9h8p7o97"},{"post_id":"cioit7em40007wnprl0y4n91w","category_id":"cioit7emp000lwnprfidtfllt","_id":"cioit7en20011wnpruqc5e9u7"},{"post_id":"cioit7em70009wnprcshecd1d","category_id":"cioit7em8000awnprb2hroiu5","_id":"cioit7en60014wnprt7pkhjwv"},{"post_id":"cioit7emz0010wnprfzon4euj","category_id":"cioit7em10005wnprwffb7cd3","_id":"cioit7en90019wnprgczu9j59"},{"post_id":"cioit7emq000ownprsqsh7zag","category_id":"cioit7emz000xwnprh4tfbeix","_id":"cioit7end001cwnprs3anawu9"},{"post_id":"cioit7en9001awnprxqq9cgp4","category_id":"cioit7en60015wnpra1esvmgp","_id":"cioit7eni001jwnpri7yhsdk0"},{"post_id":"cioit7emt000qwnprhqokbb3u","category_id":"cioit7en60015wnpra1esvmgp","_id":"cioit7enk001ownprksu7vecx"},{"post_id":"cioit7end001dwnpre5t1aq33","category_id":"cioit7en60015wnpra1esvmgp","_id":"cioit7enm001pwnprig7qk5o4"},{"post_id":"cioit7eng001hwnpr4k4yjs3a","category_id":"cioit7en60015wnpra1esvmgp","_id":"cioit7enm001swnpr9xlau2is"},{"post_id":"cioit7emw000uwnprubo9g12y","category_id":"cioit7en60015wnpra1esvmgp","_id":"cioit7enm001twnprx9f0i21o"},{"post_id":"cioit7enj001kwnprsyxok2xs","category_id":"cioit7em10005wnprwffb7cd3","_id":"cioit7eno001wwnprlkmvhbrb"},{"post_id":"cioit7emx000wwnprda4kmupf","category_id":"cioit7en60015wnpra1esvmgp","_id":"cioit7eno001xwnprvf04kbyj"},{"post_id":"cioit7en40012wnprkmmljeiq","category_id":"cioit7en60015wnpra1esvmgp","_id":"cioit7eno001ywnpr3v5gvd8s"},{"post_id":"cioit7en60016wnpr8788g4j6","category_id":"cioit7enm001uwnprla3k4p6k","_id":"cioit7enp0021wnprz0tntgpm"}],"PostTag":[{"post_id":"cioit7elp0000wnprgausj2so","tag_id":"cioit7elz0004wnprxbjo11q4","_id":"cioit7emj000gwnprng6322a6"},{"post_id":"cioit7elp0000wnprgausj2so","tag_id":"cioit7em60008wnpr9p1jz2yj","_id":"cioit7emn000jwnprkwuhho9c"},{"post_id":"cioit7emz0010wnprfzon4euj","tag_id":"cioit7elz0004wnprxbjo11q4","_id":"cioit7en60013wnprsxr5zd22"},{"post_id":"cioit7emz0010wnprfzon4euj","tag_id":"cioit7em60008wnpr9p1jz2yj","_id":"cioit7en90018wnprh3c2rl4t"},{"post_id":"cioit7elv0002wnprg0qxnwda","tag_id":"cioit7emh000ewnprdcwmgg56","_id":"cioit7end001bwnprd3s7jbse"},{"post_id":"cioit7elv0002wnprg0qxnwda","tag_id":"cioit7emp000mwnpr4xefwqnd","_id":"cioit7eng001gwnprgg0vbdfj"},{"post_id":"cioit7elv0002wnprg0qxnwda","tag_id":"cioit7emv000swnpr0f1ulqu4","_id":"cioit7eni001iwnpres3yp2n1"},{"post_id":"cioit7elv0002wnprg0qxnwda","tag_id":"cioit7emz000zwnpr60xlt06a","_id":"cioit7enk001nwnpr7ruu7b7k"},{"post_id":"cioit7em20006wnprzxhm46u0","tag_id":"cioit7emh000ewnprdcwmgg56","_id":"cioit7enp0020wnprt912woiv"},{"post_id":"cioit7em20006wnprzxhm46u0","tag_id":"cioit7emv000swnpr0f1ulqu4","_id":"cioit7enp0022wnprnuxrm18b"},{"post_id":"cioit7em20006wnprzxhm46u0","tag_id":"cioit7enk001mwnprip134ugl","_id":"cioit7enp0024wnprcw95vxkz"},{"post_id":"cioit7em20006wnprzxhm46u0","tag_id":"cioit7enm001rwnprcrseonaw","_id":"cioit7enp0025wnprv4t4psni"},{"post_id":"cioit7em20006wnprzxhm46u0","tag_id":"cioit7enn001vwnprs2jegmi6","_id":"cioit7enr0027wnprmf0mdcgx"},{"post_id":"cioit7em40007wnprl0y4n91w","tag_id":"cioit7eno001zwnprz5n9xpy9","_id":"cioit7enr002awnpr3vrwnuu0"},{"post_id":"cioit7em40007wnprl0y4n91w","tag_id":"cioit7enp0023wnprmtnsymcu","_id":"cioit7enr002bwnpr1h4u56da"},{"post_id":"cioit7em40007wnprl0y4n91w","tag_id":"cioit7enq0026wnprom3hld0a","_id":"cioit7ent002dwnpry1tou5yv"},{"post_id":"cioit7em40007wnprl0y4n91w","tag_id":"cioit7enr0028wnprdzyevrb0","_id":"cioit7ent002ewnpr94kxa5wg"},{"post_id":"cioit7em70009wnprcshecd1d","tag_id":"cioit7emh000ewnprdcwmgg56","_id":"cioit7env002jwnprl7emcxzf"},{"post_id":"cioit7em70009wnprcshecd1d","tag_id":"cioit7enr002cwnprpcl1tdmt","_id":"cioit7env002kwnprpwl20mwo"},{"post_id":"cioit7em70009wnprcshecd1d","tag_id":"cioit7ent002fwnpr9jx6matb","_id":"cioit7enw002mwnprbpj6edpf"},{"post_id":"cioit7em70009wnprcshecd1d","tag_id":"cioit7env002gwnproibcqsqe","_id":"cioit7enw002nwnprcm3hbm99"},{"post_id":"cioit7em70009wnprcshecd1d","tag_id":"cioit7env002hwnprg080j7ut","_id":"cioit7enw002pwnprgjxpsm5c"},{"post_id":"cioit7em9000bwnpr34cs4d3r","tag_id":"cioit7emh000ewnprdcwmgg56","_id":"cioit7enw002rwnprdhntbxb6"},{"post_id":"cioit7em9000bwnpr34cs4d3r","tag_id":"cioit7env002lwnprs5tf3llz","_id":"cioit7enw002swnprlfxcyu91"},{"post_id":"cioit7em9000bwnpr34cs4d3r","tag_id":"cioit7enw002ownprsrmjmxcn","_id":"cioit7enw002uwnprcz5hxkgp"},{"post_id":"cioit7emg000dwnprkz83og1o","tag_id":"cioit7emh000ewnprdcwmgg56","_id":"cioit7enx002ywnprw4js4r1g"},{"post_id":"cioit7emg000dwnprkz83og1o","tag_id":"cioit7enw002twnpr4a5biq25","_id":"cioit7enx002zwnprq1oixnqm"},{"post_id":"cioit7emg000dwnprkz83og1o","tag_id":"cioit7enw002vwnpr5scuvmd4","_id":"cioit7enx0031wnprvkb59lct"},{"post_id":"cioit7emg000dwnprkz83og1o","tag_id":"cioit7enx002wwnprtie30s0b","_id":"cioit7enx0032wnprlae6x128"},{"post_id":"cioit7emk000hwnprij5lbt4h","tag_id":"cioit7emh000ewnprdcwmgg56","_id":"cioit7eny0035wnpr3q2p6h3l"},{"post_id":"cioit7emk000hwnprij5lbt4h","tag_id":"cioit7enx002xwnprsfihwoo2","_id":"cioit7eny0036wnprtj763xiv"},{"post_id":"cioit7emk000hwnprij5lbt4h","tag_id":"cioit7enx0030wnprxh62dhbs","_id":"cioit7eny0038wnprpc1zinkp"},{"post_id":"cioit7emk000hwnprij5lbt4h","tag_id":"cioit7enx0033wnprc2utrzja","_id":"cioit7eny0039wnpr4qv757b0"},{"post_id":"cioit7emn000kwnprqo8lxvm7","tag_id":"cioit7emh000ewnprdcwmgg56","_id":"cioit7enz003dwnprkqhfberb"},{"post_id":"cioit7emn000kwnprqo8lxvm7","tag_id":"cioit7env002lwnprs5tf3llz","_id":"cioit7enz003ewnprlbi5m2f0"},{"post_id":"cioit7emn000kwnprqo8lxvm7","tag_id":"cioit7eny0037wnpryeeom7x8","_id":"cioit7enz003gwnprqgm7qms0"},{"post_id":"cioit7emn000kwnprqo8lxvm7","tag_id":"cioit7eny003awnprnqueh71b","_id":"cioit7enz003hwnprndxdznxy"},{"post_id":"cioit7emn000kwnprqo8lxvm7","tag_id":"cioit7enw002ownprsrmjmxcn","_id":"cioit7enz003jwnprao0fc5fc"},{"post_id":"cioit7emq000ownprsqsh7zag","tag_id":"cioit7env002lwnprs5tf3llz","_id":"cioit7eo0003lwnprbpt058so"},{"post_id":"cioit7emq000ownprsqsh7zag","tag_id":"cioit7enz003fwnpr4dj3gtne","_id":"cioit7eo0003mwnprmdp1tbyv"},{"post_id":"cioit7emq000ownprsqsh7zag","tag_id":"cioit7enz003iwnprcvxnhr49","_id":"cioit7eo0003ownprdorzda1c"},{"post_id":"cioit7emt000qwnprhqokbb3u","tag_id":"cioit7eo0003kwnprddklpt2j","_id":"cioit7eo1003swnpri7j2r7c2"},{"post_id":"cioit7emt000qwnprhqokbb3u","tag_id":"cioit7eo0003nwnprta6t3tj0","_id":"cioit7eo1003twnprfjy646yr"},{"post_id":"cioit7emt000qwnprhqokbb3u","tag_id":"cioit7eo0003pwnprhdsq59j2","_id":"cioit7eo1003vwnprp3d0pasr"},{"post_id":"cioit7emt000qwnprhqokbb3u","tag_id":"cioit7eo0003qwnprue6t7fun","_id":"cioit7eo1003wwnpr7hdbjq45"},{"post_id":"cioit7emw000uwnprubo9g12y","tag_id":"cioit7eo0003rwnprei6uroqd","_id":"cioit7eo1003ywnpr38zmib7e"},{"post_id":"cioit7emw000uwnprubo9g12y","tag_id":"cioit7elz0004wnprxbjo11q4","_id":"cioit7eo2003zwnprqnn4oxf6"},{"post_id":"cioit7emw000uwnprubo9g12y","tag_id":"cioit7eo1003uwnprcqzlh1u0","_id":"cioit7eo20041wnprgroj8nxa"},{"post_id":"cioit7emx000wwnprda4kmupf","tag_id":"cioit7enx002xwnprsfihwoo2","_id":"cioit7eo40044wnprrmudcrlh"},{"post_id":"cioit7emx000wwnprda4kmupf","tag_id":"cioit7eo20040wnprysat6mqm","_id":"cioit7eo40045wnprwmi8s9fb"},{"post_id":"cioit7emx000wwnprda4kmupf","tag_id":"cioit7eo30042wnprj5ut7m8o","_id":"cioit7eo40047wnpr6blmeimm"},{"post_id":"cioit7en40012wnprkmmljeiq","tag_id":"cioit7eo40043wnpr6gp3cir9","_id":"cioit7eo50049wnpriq91c5iq"},{"post_id":"cioit7en40012wnprkmmljeiq","tag_id":"cioit7eo40046wnprov5bc8xj","_id":"cioit7eo5004awnprt46bc82y"},{"post_id":"cioit7en60016wnpr8788g4j6","tag_id":"cioit7eo40048wnprt9rpxuoy","_id":"cioit7eo6004ewnpr2uufsyb2"},{"post_id":"cioit7en60016wnpr8788g4j6","tag_id":"cioit7eo5004bwnprnil5t345","_id":"cioit7eo6004fwnprk4kygxhp"},{"post_id":"cioit7en60016wnpr8788g4j6","tag_id":"cioit7eo5004cwnprkiwoxhs0","_id":"cioit7eo6004hwnpr6ajiiwu4"},{"post_id":"cioit7en9001awnprxqq9cgp4","tag_id":"cioit7eo0003kwnprddklpt2j","_id":"cioit7eo7004lwnpryn5snrfn"},{"post_id":"cioit7en9001awnprxqq9cgp4","tag_id":"cioit7eo0003nwnprta6t3tj0","_id":"cioit7eo7004mwnpryf54y4p8"},{"post_id":"cioit7en9001awnprxqq9cgp4","tag_id":"cioit7eo0003pwnprhdsq59j2","_id":"cioit7eo7004ownpr577bcds4"},{"post_id":"cioit7en9001awnprxqq9cgp4","tag_id":"cioit7eo0003qwnprue6t7fun","_id":"cioit7eo7004pwnprpc7in6jy"},{"post_id":"cioit7end001dwnpre5t1aq33","tag_id":"cioit7eo7004kwnpr7q3eppoo","_id":"cioit7eo7004rwnprjbv11c7n"},{"post_id":"cioit7end001dwnpre5t1aq33","tag_id":"cioit7em60008wnpr9p1jz2yj","_id":"cioit7eo7004swnprlsip4vxj"},{"post_id":"cioit7eng001hwnpr4k4yjs3a","tag_id":"cioit7eo7004nwnprrnpeclaa","_id":"cioit7eo8004uwnprlqpfunmu"},{"post_id":"cioit7eng001hwnpr4k4yjs3a","tag_id":"cioit7eo7004qwnprd1vkxkjz","_id":"cioit7eo8004vwnpru62wlppu"},{"post_id":"cioit7enj001kwnprsyxok2xs","tag_id":"cioit7elz0004wnprxbjo11q4","_id":"cioit7eo9004xwnprjwklzmwc"},{"post_id":"cioit7enj001kwnprsyxok2xs","tag_id":"cioit7em60008wnpr9p1jz2yj","_id":"cioit7eo9004ywnprr0a6mgmz"},{"post_id":"cioit7enj001kwnprsyxok2xs","tag_id":"cioit7eo8004twnprlj8j4szj","_id":"cioit7eo9004zwnprz1iqdaqw"},{"post_id":"cioit7enj001kwnprsyxok2xs","tag_id":"cioit7eo8004wwnprafbwlb34","_id":"cioit7eo90050wnprjt3qs79o"}],"Tag":[{"name":"git","_id":"cioit7elz0004wnprxbjo11q4"},{"name":"项目管理","_id":"cioit7em60008wnpr9p1jz2yj"},{"name":"译文","_id":"cioit7emh000ewnprdcwmgg56"},{"name":"Web Dedign","_id":"cioit7emp000mwnpr4xefwqnd"},{"name":"Web Development","_id":"cioit7emv000swnpr0f1ulqu4"},{"name":"Websites","_id":"cioit7emz000zwnpr60xlt06a"},{"name":"Chrome Extensions","_id":"cioit7enk001mwnprip134ugl"},{"name":"Web Designers","_id":"cioit7enm001rwnprcrseonaw"},{"name":"Developers","_id":"cioit7enn001vwnprs2jegmi6"},{"name":"blog","_id":"cioit7eno001zwnprz5n9xpy9"},{"name":"next","_id":"cioit7enp0023wnprmtnsymcu"},{"name":"hexo","_id":"cioit7enq0026wnprom3hld0a"},{"name":"pisces","_id":"cioit7enr0028wnprdzyevrb0"},{"name":"ReactJS","_id":"cioit7enr002cwnprpcl1tdmt"},{"name":"教程","_id":"cioit7ent002fwnpr9jx6matb"},{"name":"Tutorials","_id":"cioit7env002gwnproibcqsqe"},{"name":"getting started lesson","_id":"cioit7env002hwnprg080j7ut"},{"name":"React","_id":"cioit7env002lwnprs5tf3llz"},{"name":"JavaScript","_id":"cioit7enw002ownprsrmjmxcn"},{"name":"button","_id":"cioit7enw002twnpr4a5biq25"},{"name":"interactive","_id":"cioit7enw002vwnpr5scuvmd4"},{"name":"web","_id":"cioit7enx002wwnprtie30s0b"},{"name":"css","_id":"cioit7enx002xwnprsfihwoo2"},{"name":"features","_id":"cioit7enx0030wnprxh62dhbs"},{"name":"front-end","_id":"cioit7enx0033wnprc2utrzja"},{"name":"Tutorial","_id":"cioit7eny0037wnpryeeom7x8"},{"name":"Testing","_id":"cioit7eny003awnprnqueh71b"},{"name":"入门","_id":"cioit7enz003fwnpr4dj3gtne"},{"name":"实践","_id":"cioit7enz003iwnprcvxnhr49"},{"name":"Hexo","_id":"cioit7eo0003kwnprddklpt2j"},{"name":"NexT","_id":"cioit7eo0003nwnprta6t3tj0"},{"name":"github","_id":"cioit7eo0003pwnprhdsq59j2"},{"name":"博客","_id":"cioit7eo0003qwnprue6t7fun"},{"name":"SSH","_id":"cioit7eo0003rwnprei6uroqd"},{"name":"加密","_id":"cioit7eo1003uwnprcqzlh1u0"},{"name":"cubic-bezier","_id":"cioit7eo20040wnprysat6mqm"},{"name":"animation","_id":"cioit7eo30042wnprj5ut7m8o"},{"name":"Brunch","_id":"cioit7eo40043wnpr6gp3cir9"},{"name":"构建工具","_id":"cioit7eo40046wnprov5bc8xj"},{"name":"npm","_id":"cioit7eo40048wnprt9rpxuoy"},{"name":"module","_id":"cioit7eo5004bwnprnil5t345"},{"name":"nodejs","_id":"cioit7eo5004cwnprkiwoxhs0"},{"name":"Git","_id":"cioit7eo7004kwnpr7q3eppoo"},{"name":"ECharts","_id":"cioit7eo7004nwnprrnpeclaa"},{"name":"js","_id":"cioit7eo7004qwnprd1vkxkjz"},{"name":"reset","_id":"cioit7eo8004twnprlj8j4szj"},{"name":"rebase","_id":"cioit7eo8004wwnprafbwlb34"}]}}